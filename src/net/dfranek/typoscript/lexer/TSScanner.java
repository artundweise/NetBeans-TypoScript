/* The following code was generated by JFlex 1.4.3 on 14.10.11 18:45 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package net.dfranek.typoscript.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.10.11 18:45 from the specification file
 * <tt>/media/DATEN/Users/Daniel/Documents/NetBeansProjects/TypoScript/src/net/dfranek/typoscript/tools/TSScanner.flex</tt>
 */
public class TSScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CURLY = 10;
  public static final int COMMENT_SECTION = 4;
  public static final int LINE_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int CONDITION = 6;
  public static final int PARANTHESE = 12;
  public static final int VALUE = 8;
  public static final int INCLUDE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\2\0\1\33\4\0"+
    "\1\27\1\37\1\35\3\0\1\30\1\34\12\0\1\23\1\0\1\4"+
    "\1\31\1\24\2\0\1\43\1\42\1\7\1\12\1\13\1\0\1\41"+
    "\1\0\1\5\2\0\1\10\1\0\1\6\1\20\1\17\1\0\1\22"+
    "\1\21\1\15\1\11\3\0\1\16\1\0\1\36\1\0\1\40\1\0"+
    "\1\14\1\0\1\43\1\42\1\7\1\12\1\13\1\0\1\41\1\0"+
    "\1\5\2\0\1\10\1\0\1\6\1\20\1\17\1\0\1\22\1\21"+
    "\1\15\1\11\3\0\1\16\1\0\1\25\1\32\1\26\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\2\16"+
    "\3\1\2\17\1\1\1\20\1\1\1\21\2\22\1\1"+
    "\1\23\1\1\2\24\1\1\1\24\1\0\1\25\1\26"+
    "\1\15\2\0\1\27\1\0\1\30\3\0\1\21\2\0"+
    "\1\31\2\0\1\32\1\33\4\0\1\34\6\0\1\35"+
    "\1\36\15\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u01b0\0\u0120\0\u01d4\0\u01f8"+
    "\0\u0120\0\u021c\0\u0240\0\u0264\0\u0288\0\u0264\0\u02ac\0\u0120"+
    "\0\u02d0\0\u02f4\0\u0318\0\u0120\0\u033c\0\u0120\0\u0360\0\u0384"+
    "\0\u0360\0\u03a8\0\u0120\0\u03cc\0\u0120\0\u0120\0\u0120\0\u021c"+
    "\0\u03f0\0\u0120\0\u0264\0\u0120\0\u0414\0\u0438\0\u045c\0\u0120"+
    "\0\u033c\0\u0360\0\u0120\0\u0480\0\u04a4\0\u0120\0\u0264\0\u04c8"+
    "\0\u04ec\0\u0510\0\u0534\0\u0264\0\u0558\0\u057c\0\u05a0\0\u05c4"+
    "\0\u05e8\0\u060c\0\u0264\0\u0360\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc"+
    "\0\u07e0\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\1\13\16\11\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\11\1\26"+
    "\5\11\2\27\1\30\1\31\40\27\35\32\1\33\6\32"+
    "\2\34\1\35\1\36\7\34\1\37\24\34\1\40\1\41"+
    "\2\34\2\42\1\43\1\44\40\42\44\11\37\45\1\46"+
    "\4\45\2\47\1\50\1\51\15\47\1\52\2\47\1\53"+
    "\17\47\45\0\3\12\45\0\1\54\67\0\1\55\47\0"+
    "\1\56\6\0\2\27\2\57\40\27\3\0\1\31\40\0"+
    "\35\60\1\61\42\60\1\62\1\61\6\60\40\63\1\64"+
    "\6\63\1\36\34\63\1\64\11\63\1\65\1\63\1\66"+
    "\27\63\1\64\13\63\1\67\27\63\1\64\3\63\2\42"+
    "\2\70\40\42\3\0\1\44\40\0\37\71\1\44\4\71"+
    "\24\72\1\73\22\72\1\51\20\72\1\73\37\72\1\74"+
    "\3\72\1\73\17\72\6\0\1\75\35\0\34\60\1\76"+
    "\1\61\6\60\12\63\1\77\25\63\1\64\24\63\1\100"+
    "\16\63\1\64\23\63\1\101\17\63\1\64\3\63\11\72"+
    "\1\102\12\72\1\73\17\72\7\0\1\103\34\0\13\63"+
    "\1\104\24\63\1\64\43\63\1\64\1\63\1\105\1\63"+
    "\22\72\1\106\1\72\1\73\17\72\10\0\1\107\33\0"+
    "\40\63\1\64\2\63\1\110\7\72\1\111\14\72\1\73"+
    "\17\72\11\0\1\112\32\0\10\63\1\113\27\63\1\64"+
    "\3\63\13\72\1\114\10\72\1\73\17\72\12\0\1\115"+
    "\44\0\1\116\44\0\1\117\44\0\1\120\44\0\1\121"+
    "\44\0\1\122\44\0\1\123\44\0\1\124\31\0\1\125"+
    "\56\0\1\126\26\0\1\127\55\0\1\130\41\0\1\131"+
    "\51\0\1\132\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2052];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\3\1\10\11\1\1\1\11\2\1\1\11"+
    "\6\1\1\11\3\1\1\11\1\1\1\11\4\1\1\11"+
    "\1\0\3\11\2\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\1\4\0\1\1\6\0"+
    "\2\1\15\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private LexerInput input;
public TSScanner(LexerRestartInfo info) {
	this.input = info.input();
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TSScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TSScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TSTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    // char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      // yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      // zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
	  int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
			zzInput = input.read();
			if(zzInput == LexerInput.EOF) {
				//end of input reached
            zzInput = YYEOF;
            break zzForAction;
          }
    
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
		   input.backup(input.readLength() - tokenLength);
	  }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { yybegin(INCLUDE); return TSTokenId.TS_INCLUDE_START;
          }
        case 32: break;
        case 11: 
          { yybegin(LINE_COMMENT);
          }
        case 33: break;
        case 3: 
          { return TSTokenId.TS_LT;
          }
        case 34: break;
        case 1: 
          { return TSTokenId.TS_PROPERTY;
          }
        case 35: break;
        case 5: 
          { return TSTokenId.TS_CURLY_START;
          }
        case 36: break;
        case 21: 
          { yybegin(VALUE);return TSTokenId.TS_COLON_EQUALS;
          }
        case 37: break;
        case 28: 
          { return TSTokenId.TS_ELSE;
          }
        case 38: break;
        case 4: 
          { return TSTokenId.TS_GT;
          }
        case 39: break;
        case 25: 
          { return TSTokenId.TS_INCLUDE;
          }
        case 40: break;
        case 8: 
          { return TSTokenId.TS_DOT;
          }
        case 41: break;
        case 13: 
          { return TSTokenId.TS_LINE_COMMENT;
          }
        case 42: break;
        case 17: 
          { return TSTokenId.TS_VALUE;
          }
        case 43: break;
        case 6: 
          { return TSTokenId.TS_CURLY_END;
          }
        case 44: break;
        case 19: 
          { yybegin(YYINITIAL); return TSTokenId.TS_PARANTHESE_END;
          }
        case 45: break;
        case 27: 
          { return TSTokenId.TS_END;
          }
        case 46: break;
        case 15: 
          { yybegin(YYINITIAL); return TSTokenId.TS_PROPERTY;
          }
        case 47: break;
        case 20: 
          { yybegin(YYINITIAL); return TSTokenId.TS_INCLUDE_END;
          }
        case 48: break;
        case 23: 
          { yybegin(YYINITIAL); return TSTokenId.TS_COMMENT_END;
          }
        case 49: break;
        case 30: 
          { return TSTokenId.TS_SOURCE;
          }
        case 50: break;
        case 16: 
          { yybegin(YYINITIAL); return TSTokenId.TS_CONDITION_END;
          }
        case 51: break;
        case 9: 
          { yybegin(VALUE); return TSTokenId.TS_EQUALS;
          }
        case 52: break;
        case 29: 
          { return TSTokenId.TS_GLOBAL;
          }
        case 53: break;
        case 22: 
          { yybegin(COMMENT_SECTION); return TSTokenId.TS_COMMENT_START;
          }
        case 54: break;
        case 7: 
          { yybegin(PARANTHESE); return TSTokenId.TS_PARANTHESE_START;
          }
        case 55: break;
        case 18: 
          { yybegin(YYINITIAL);return TSTokenId.TS_VALUE;
          }
        case 56: break;
        case 2: 
          { return TSTokenId.WHITESPACE;
          }
        case 57: break;
        case 24: 
          { return TSTokenId.TS_CONDITION;
          }
        case 58: break;
        case 12: 
          { yybegin(CONDITION); return TSTokenId.TS_CONDITION_START;
          }
        case 59: break;
        case 14: 
          { yybegin(YYINITIAL); return TSTokenId.TS_LINE_COMMENT;
          }
        case 60: break;
        case 26: 
          { return TSTokenId.TS_COMMENT;
          }
        case 61: break;
        case 10: 
          { return TSTokenId.TS_PIPE;
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return TSTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
