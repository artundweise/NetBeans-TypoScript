<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="xsl_style_content.xslt" ?>
<?xml-stylesheet type="text/css" href="content.css" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<book>
	<chapter>
		<title>
			<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100000000000012900000052F83997E9.png" width=""/>
			<para/>TypoScript Reference
		</title>
		<para>Extension Key: doc_core_tsref</para>
		<para>Language: en</para>
		<para>Version: 4.5.0</para>
		<para>Keywords: forAdmins, forIntermediates</para>
		<para>Copyright 2000-2011, Documentation Team, &lt;documentation@typo3.org&gt;</para>
		<para/>
		<para>This document is published under the Open Content License</para>
		<para>available from http://www.opencontent.org/opl.shtml</para>
		<para/>
		<para>The content of this document is related to TYPO3 </para>
		<para>- a GNU/GPL CMS/Framework available from www.typo3.org</para>
		<para/>
		<para/>
		<para/>
		<para/>
		<para>Official documentation</para>
		<para>This document is included as part of the official TYPO3 documentation. It has been approved by the TYPO3 Documentation Team following a peer-review process. The reader should expect the information in this document to be accurate - please report discrepancies to the Documentation Team (documentation@typo3.org). Official documents are kept up-to-date to the best of the Documentation Team's abilities.</para>
		<para/>
		<para>Core Manual</para>
		<para>This document is a Core Manual. Core Manuals address the built in functionality of TYPO3 and are designed to provide the reader with in-depth information. Each Core Manual addresses a particular process or function and how it is implemented within the TYPO3 source code. These may include information on available APIs, specific configuration options, etc.</para>
		<para>Core Manuals are written as reference manuals. The reader should rely on the Table of Contents to identify what particular section will best address the task at hand.</para>
		<para/>
		<para/>
		<section>
			<title>Introduction</title>
			<section>
				<title>About this document</title>
				<para>This document is a complete reference to all objects and properties of TypoScript as used in TYPO3 templates (and not in TSconfig).</para>
				<para>For explanations about the syntax of TypoScript itself, please refer to the "TypoScript Syntax and In-Depth Study" manual.</para>
				<para>This version is updated for TYPO3 version 4.5.</para>
			</section>
			<section>
				<title>What's new</title>
				<para>The main changes include the new content objects FLUIDTEMPLATE and SVG, the new stdWrap property "numberFormat" and new properties for imageLinkWrap to allow easy integration of a lightbox. Furthermore a new condition for the current page has been added to the condition reference as well as some improvements concerning the detection of newer browsers and operating systems. Nearly all TypoScript properties have stdWrap now. The new GIFBUILDER object "ELLIPSE" has been added and missing documentation of many GIFBUILDER properties has been appended.</para>
				<para>Additionally various descriptions were improved and many smaller mistakes were fixed. All screenshots have been refreshed.</para>
				<para>For more details about changes in the various TYPO3 versions please refer to the links below.</para>
				<para/>
				<para>
					<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100002010000002000000020C7A70868.png" width=""/>More information about changed properties
				</para>
				<para>You can find a list of changes for more recent TYPO3 versions in the wiki: </para>
				<para>
					<ulink url="http://wiki.typo3.org/Documentation_changes_in_4.2">http://wiki.typo3.org/Documentation_changes_in_4.2</ulink> 
				</para>
				<para>
					<ulink url="http://wiki.typo3.org/Documentation_changes_in_4.3">http://wiki.typo3.org/Documentation_changes_in_4.3</ulink> 
				</para>
				<para>
					<ulink url="http://wiki.typo3.org/Documentation_changes_in_4.4_and_4.5">http://wiki.typo3.org/Documentation_changes_in_4.4_and_4.5</ulink> 
				</para>
			</section>
			<section>
				<title>Credits</title>
				<para>The manual was originally written by Kasper Sk&#xE5;rh&#xF8;j. Over the years it has been maintained and updated successively by Michael Stucki, Fran&#xE7;ois Suter and Christopher Stelmaszyk.</para>
			</section>
			<section>
				<title>Feedback</title>
				<para>For general questions about the documentation get in touch by writing to 
					<olink targetdocent="mailto:documentation@typo3.org">documentation@typo3.org</olink>.
				</para>
				<para>If you find a bug in this manual, please file an issue in this manual's bug tracker: 
					<ulink url="http://forge.typo3.org/projects/typo3v4-doc_core_tsref/issues">http://forge.typo3.org/projects/typo3v4-doc_core_tsref/issues</ulink>
				</para>
				<para>Maintaining quality documentation is hard work and the Documentation Team is always looking for volunteers. If you feel like helping please join the documentation mailing list (typo3.projects.documentation on lists.typo3.org).</para>
			</section>
			<section>
				<title>General information</title>
				<section>
					<title>Case sensitivity</title>
					<para>All names and references in TypoScript are case sensitive! This is very important to notice. That means that:</para>
					<programlisting>myObject = HTML</programlisting>
					<programlisting>myObject.value = &lt;strong&gt; HTML - code &lt;/strong&gt;</programlisting>
					<programlisting/>
					<para>is not the same as</para>
					<programlisting>myObject = html</programlisting>
					<programlisting>myObject.Value = &lt;strong&gt; HTML - code &lt;/strong&gt;</programlisting>
					<programlisting/>
					<para>While the first will be recognized as the content-object "HTML" and will produce the desired output, the latter will not be recognized and will not output anything. Even if you wrote "HTML" in uppercase in the second example, it would still not work, because the property "value" is misspelled. </para>
					<para>Always remember: In this manual the case of objects is important.</para>
				</section>
			</section>
		</section>
		<section>
			<title>Data types</title>
			<section>
				<title>Introduction</title>
				<para>The values you assign to properties in TypoScript are often of a specific format. The following table describes these formats. </para>
				<para>E.g. if a value is defined as the type "&lt;tag&gt;", you're supposed to supply HTML-code. If it is of the type "resource", it's a reference to a file from the resource-field in the template. If the type is "GraphicColor" a color-definition is expected and you should supply an HTML-valid color-code or RGB-values comma-separated.</para>
			</section>
			<section>
				<title>Data types reference</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Examples:</para>
								</entry>
								<entry>
									<para>Comment:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>&lt;tag&gt;</para>
								</entry>
								<entry>
									<para>&lt;BODY bgcolor="red"&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>align</para>
								</entry>
								<entry>
									<para>right</para>
								</entry>
								<entry>
									<para>right / left / center</para>
									<para>Decides alignment, typically in HTML-tags</para>
								</entry>
								<entry>
									<para>left</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>VHalign</para>
								</entry>
								<entry>
									<para>Horizontal alignment = right and Vertical alignment = center:</para>
									<para>r , c</para>
								</entry>
								<entry>
									<para>Pair of values separated by a comma. The first value determines the horizontal alignment, the second one the vertical alignment.</para>
									<para/>
									<para>Possible values:</para>
									<para>r/c/l , t/c/b</para>
									<para/>
									<para>Horizontal values standing for: right, center, left</para>
									<para>Vertical values standing for: top, center, bottom</para>
								</entry>
								<entry>
									<para>l , t</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>From the resourcefield:</para>
									<para>toplogo*.gif</para>
									<para/>
									<para>Reference to filesystem:</para>
									<para>fileadmin/picture.gif</para>
								</entry>
								<entry>
									<orderedlist>
										<listitem>
											<para>A reference to a file from the resource-field in the template.You can write the exact filename or you can include an asterisk (*) as wildcard.It's recommended to include a "*" before the file extension (see example to the left). This will ensure that the file is still referenced correct even if the template is copied and the file will have it's name prepended with numbers!!</para>
										</listitem>
										<listitem>
											<para>If the value contains a "/" it's expected to be a reference (absolute or relative) to a file on the file-system instead of the resource-field. No support for wildcards.</para>
										</listitem>
									</orderedlist>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para>Here "file" is an imgResource:</para>
									<para>file = toplogo*.gif</para>
									<para>file.width = 200</para>
									<para/>
									<para>GIFBUILDER:</para>
									<para>file = GIFBUILDER</para>
									<para>file {</para>
									<para>&#xA0; &#xA0;... (GIFBUILDER-properties here)</para>
									<para>}</para>
								</entry>
								<entry>
									<orderedlist>
										<listitem>
											<para>A "resource" (see above) + imgResource-properties (see example to the left and object-reference below)Filetypes can be anything among the allowed types defined in the configuration variable$TYPO3_CONF_VARS['GFX']['imagefile_ext']. Standard is pdf, gif, jpg, jpeg, tif, bmp, ai, pcx, tga, png.</para>
										</listitem>
										<listitem>
											<para>GIFBUILDER-object</para>
										</listitem>
									</orderedlist>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>HTML-code</para>
								</entry>
								<entry>
									<para>&lt;b&gt;Some text in bold&lt;/b&gt;</para>
								</entry>
								<entry>
									<para>pure HTML-code</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>_top</para>
									<para>_blank</para>
									<para>content</para>
								</entry>
								<entry>
									<para>target in &lt;A&gt;-tag. </para>
									<para>This is normally the same value as the name of the root-level object that defines the frame.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imageExtension</para>
								</entry>
								<entry>
									<para>jpg</para>
									<para>web (gif or jpg ..)</para>
								</entry>
								<entry>
									<para>Image extensions can be anything among the allowed types defined in the global variable $TYPO3_CONF_VARS['GFX']['imagefile_ext']. Standard is pdf, gif, jpg, jpeg, tif, bmp, ai, pcx, tga, png.</para>
									<para>The value "web" is special. This will just ensure that an image is converted to a web image format (gif or jpg) if it happens not to be already!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>degree</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>-90 to 90, integers</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>posint / int+</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Positive integer</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>integer</para>
									<para>(sometimes used generally though another type would have been more appropriate, like "pixels")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>str / string / value</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>string.</para>
									<para>(sometimes used generally though another type would have been more appropriate, like "align")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
								<entry>
									<para>boolean </para>
									<para>non-empty strings (but not zero) are "true"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>rotation</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>integer, degrees from 0 - 360</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>x,y,w,h</para>
								</entry>
								<entry>
									<para>10,10,5,5</para>
								</entry>
								<entry>
									<para>x,y is the offset from the upper left corner. </para>
									<para>w,h is the width and height</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>HTML-color</para>
								</entry>
								<entry>
									<para>red</para>
									<para>#ffeecc </para>
								</entry>
								<entry>
									<para>HTML-color codes:</para>
									<para/>
									<para>Black = "#000000" &#xA0; </para>
									<para>Silver = "#C0C0C0" &#xA0; </para>
									<para>Gray = "#808080" &#xA0; </para>
									<para>White = "#FFFFFF" &#xA0; </para>
									<para>Maroon = "#800000" &#xA0; </para>
									<para>Red = "#FF0000" &#xA0; </para>
									<para>Purple = "#800080" &#xA0; </para>
									<para>Fuchsia = "#FF00FF" &#xA0; </para>
									<para>Green = "#008000"</para>
									<para>Lime = "#00FF00"</para>
									<para>Olive = "#808000"</para>
									<para>Yellow = "#FFFF00"</para>
									<para>Navy = "#000080"</para>
									<para>Blue = "#0000FF"</para>
									<para>Teal = "#008080"</para>
									<para>Aqua = "#00FFFF" </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>GraphicColor</para>
								</entry>
								<entry>
									<para>red(HTML-color)</para>
									<para>#ffeecc (HTML-color)</para>
									<para>255,0,255(RGB-integers)</para>
									<para/>
									<para>Extra:</para>
									<para>red : *0.8("red" is darkened by factor 0.8)</para>
									<para>#ffeecc : +16("ffeecc" is going to #fffedc because 16 is added)</para>
									<para/>
								</entry>
								<entry>
									<para>The color can be given as HTML-colors or as a comma-separated list of RGB-values (integers)</para>
									<para>You can add an extra parameter that will modify the color mathematically:</para>
									<para>Syntax:</para>
									<para>[colordef] : [modifier]</para>
									<para>where modifier can be and integer which is added/subtracted to the three RGB-channels or a floating point with an "*" before, which will then multiply the values with that factor.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>page_id</para>
								</entry>
								<entry>
									<para>this</para>
									<para>34</para>
								</entry>
								<entry>
									<para>A page id (int) or "this" (=current page id)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>pixels</para>
								</entry>
								<entry>
									<para>345</para>
								</entry>
								<entry>
									<para>pixel-distance</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>list</para>
								</entry>
								<entry>
									<para>item,item2,item3</para>
								</entry>
								<entry>
									<para>list of values</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>margins</para>
								</entry>
								<entry>
									<para>This sets leftmargin to 10 and bottom-margin to 5. Top and right is not set (zero)</para>
									<para>10,0,0,5</para>
									<para/>
									<para/>
								</entry>
								<entry>
									<para>l,t,r,b</para>
									<para>left, top, right, bottom</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>This will cause the value to be wrapped in a font-tag coloring the value red:</para>
									<para>&lt;font color="red"&gt; | &lt;/font&gt;</para>
								</entry>
								<entry>
									<para>&lt;...&gt; | &lt;/...&gt;</para>
									<para>Used to wrap something. The part on the left and right of the vertical line is placed on the left and right side of the value.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkWrap</para>
								</entry>
								<entry>
									<para>This will make a link to the root-level of a website:</para>
									<para>&lt;a href="?id={0}"&gt; | &lt;/a&gt;</para>
								</entry>
								<entry>
									<para>&lt;.. {x}.&gt; | &lt;/...&gt;</para>
									<para>{x}; x is an integer (0-9) and points to a key in the PHP-array rootLine. The key is equal to the level the current page is on measured relatively to the root of the website.</para>
									<para>If the key exists the uid of the level that key pointed to is inserted instead of {x}.</para>
									<para>Thus we can insert page_ids from previous levels.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>case</para>
								</entry>
								<entry>
									<para>upper</para>
								</entry>
								<entry>
									<para>"upper" / "lower"</para>
									<para>Case-conversion</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>space</para>
								</entry>
								<entry>
									<para>5 | 5</para>
								</entry>
								<entry>
									<para>"before | after"</para>
									<para>Used for content and sets space "before | after".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>date-conf</para>
								</entry>
								<entry>
									<para>d-m-y(dd-mm-yy format)</para>
								</entry>
								<entry>
									<para>See PHP function Date()!</para>
									<para/>
									<para>a - "am" or "pm"</para>
									<para>A - "AM" or "PM"</para>
									<para>d - day of the month, numeric, 2 digits (with leading zeros)</para>
									<para>D - day of the week, textual, 3 letters; e.g. "Fri"</para>
									<para>F - month, textual, long; e.g. "January"</para>
									<para>h - hour, numeric, 12 hour format</para>
									<para>H - hour, numeric, 24 hour format</para>
									<para>i - minutes, numeric</para>
									<para>j - day of the month, numeric, without leading zeros</para>
									<para>l (lowercase 'L') - day of the week, textual, long; i.e. "Friday"</para>
									<para>m - month, numeric</para>
									<para>M - month, textual, 3 letters; e.g. "Jan"</para>
									<para>s - seconds, numeric</para>
									<para>S - English ordinal suffix, textual, 2 characters; i.e. "th", "nd"</para>
									<para>U - seconds since the epoch</para>
									<para>Y - year, numeric, 4 digits</para>
									<para>w - day of the week, numeric, 0 represents Sunday</para>
									<para>y - year, numeric, 2 digits</para>
									<para>z - day of the year, numeric; e.g. "299"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>strftime-conf</para>
								</entry>
								<entry>
									<para>Date "DD-MM-YY" = </para>
									<para>%e:%m:%y</para>
									<para/>
									<para>Time "HH:MM:SS" = </para>
									<para>%H:%M:%S</para>
									<para/>
									<para>or just</para>
									<para>%T</para>
								</entry>
								<entry>
									<para>%a - abbreviated weekday name according to the current locale </para>
									<para>%A - full weekday name according to the current locale </para>
									<para>%b - abbreviated month name according to the current locale </para>
									<para>%B - full month name according to the current locale </para>
									<para>%c - preferred date and time representation for the current locale </para>
									<para>%C - century number (the year divided by 100 and truncated to an integer, range 00 to 99) </para>
									<para>%d - day of the month as a decimal number (range 00 to 31) </para>
									<para>%D - same as %m/%d/%y </para>
									<para>%e - day of the month as a decimal number, a single digit is preceded by a space (range ' 1' to '31') </para>
									<para>%h - same as %b </para>
									<para>%H - hour as a decimal number using a 24-hour clock (range 00 to 23) </para>
									<para>%I - hour as a decimal number using a 12-hour clock (range 01 to 12) </para>
									<para>%j - day of the year as a decimal number (range 001 to 366) </para>
									<para>%m - month as a decimal number (range 01 to 12) </para>
									<para>%M - minute as a decimal number </para>
									<para>%n - newline character </para>
									<para>%p - either `am' or `pm' according to the given time value, or the corresponding strings for the current locale </para>
									<para>%r - time in a.m. and p.m. notation </para>
									<para>%R - time in 24 hour notation </para>
									<para>%S - second as a decimal number </para>
									<para>%t - tab character </para>
									<para>%T - current time, equal to %H:%M:%S </para>
									<para>%u - weekday as a decimal number [1,7], with 1 representing Monday </para>
									<para>%U - week number of the current year as a decimal number, starting with the first Sunday as the first day of the first week </para>
									<para>%V - The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week. </para>
									<para>%W - week number of the current year as a decimal number, starting with the first Monday as the first day of the first week </para>
									<para>%w - day of the week as a decimal, Sunday being 0 </para>
									<para>%x - preferred date representation for the current locale without the time </para>
									<para>%X - preferred time representation for the current locale without the date </para>
									<para>%y - year as a decimal number without a century (range 00 to 99) </para>
									<para>%Y - year as a decimal number including the century </para>
									<para>%Z - time zone or name or abbreviation </para>
									<para>%% - a literal `%' character </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>UNIX-time</para>
								</entry>
								<entry>
									<para>Seconds to 07/04 2000 23:58:</para>
									<para>955144722</para>
								</entry>
								<entry>
									<para>Seconds since 1/1 1970...</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>path</para>
								</entry>
								<entry>
									<para>fileadmin/stuff/</para>
								</entry>
								<entry>
									<para>path relative to the directory from which we operate.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>&lt;tag&gt;-data</para>
								</entry>
								<entry>
									<para>&lt;frameset&gt;-data: row</para>
									<para>could be '150,*'</para>
								</entry>
								<entry>
									<para/>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>&lt;tag&gt;-params</para>
								</entry>
								<entry>
									<para>&lt;frameset&gt;-params</para>
									<para>could be 'border="0" framespacing="0"'</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>getText</para>
								</entry>
								<entry>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>= field : header</para>
									<para>get content from the $cObj-&gt;data-array[header]</para>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>= parameters : color</para>
									<para>get content from the $cObj-&gt;parameters-array[color]</para>
									<para/>
									<para>= register : color</para>
									<para>get content from the $GLOBALS['TSFE']-&gt;register[color]</para>
									<para/>
									<para>= leveltitle : 1</para>
									<para>get the title of the page on the first level of the rootline</para>
									<para>= leveltitle : -2 , slide</para>
									<para>get the title of the page on the level right below the current page AND if that is not present, walt to the bottom of the rootline until there's a title</para>
									<para>= leveluid : 0</para>
									<para>get the id of the root-page of the website (level zero)</para>
									<para/>
									<para>= levelfield : -1 , user_myExtField , slide</para>
									<para>get the value of the user defined field "user_myExtField" in the root line (requires additional configuration in $TYPO3_CONF_VARS to include field!)</para>
									<para/>
									<para>= global : HTTP_COOKIE_VARS | some_cookie</para>
									<para>get the env variable $HTTP_COOKIE_VARS[some_cookie]</para>
									<para/>
									<para>= date : d-m-y</para>
									<para>get the current time formatted dd-mm-yy</para>
									<para/>
									<para>= page : title</para>
									<para>get the current page-title</para>
									<para/>
									<para>= current : 1</para>
									<para>get the current value</para>
									<para/>
									<para>= level : 1</para>
									<para>get the rootline level of the current page</para>
									<para/>
									<para>= GP : stuff</para>
									<para>get input value from query string, (&amp;stuff=)</para>
									<para>= GP : stuff | key</para>
									<para>get input value from query string, (&amp;stuff[key]=)</para>
									<para/>
									<para>= getenv : HTTP_REFERER</para>
									<para>get the env var HTTP_REFERER</para>
									<para/>
									<para>= getIndpEnv : REMOTE_ADDR</para>
									<para>get the client IP</para>
									<para/>
									<para>= DB : tt_content:234:header</para>
									<para>get the value of the header of record with uid 234 from table tt_content</para>
									<para/>
									<para/>
									<para>= fullRootLine : -1, title</para>
									<para>get the title of the page right before the start of the current website</para>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>= LLL:EXT:css_styled_content/pi1/locallang.x:login.logout</para>
									<para>get localized label for logout button</para>
									<para/>
									<para>= path:EXT:ie7/js/ie7-standard.js</para>
									<para>get path to file relative to siteroot possibly placed in an extension</para>
									<para/>
									<para>= cObj : parentRecordNumber</para>
									<para>get the number of the current cObject record</para>
									<para/>
									<para/>
									<para/>
									<para>= debug : rootLine</para>
									<para>output the current root-line visually in HTML</para>
									<para/>
								</entry>
								<entry>
									<para>This returns a value from somewhere in a PHP-array, as defined by the type. The syntax is "type : pointer". The type is case-insensitive.</para>
									<para/>
									<para>field: [field name from the current $cObj-&gt;data-array in the cObj.]</para>
									<para>As default the $cObj-&gt;data-array is $GLOBALS['TSFE']-&gt;page (record of the current page!) </para>
									<para>In TMENU: $cObj-&gt;data is set to the page-record for each menu item.</para>
									<para>In CONTENT/RECORDS $cObj-&gt;data is set to the actual record</para>
									<para>In GIFBUILDER $cObj-&gt;data is set to the data GIFBUILDER is supplied with.</para>
									<para/>
									<para>parameters: [field name from the current $cObj-&gt;parameters-array in the cObj.]</para>
									<para>See -&gt;parseFunc!</para>
									<para/>
									<para>register: [field name from the $GLOBALS['TSFE']-&gt;register]</para>
									<para>See cObject "LOAD_REGISTER"</para>
									<para/>
									<para>leveltitle, leveluid, levelmedia: [levelTitle, uid or media in rootLine, 0- , negative = from behind, " , slide" parameter forces a walk to the bottom of the rootline until there's a "true" value to return. Useful with levelmedia.]</para>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>levelfield: Like "leveltitle" et al. but where the second parameter is the rootLine field you want to fetch. Syntax: [pointer, integer], [field name], ["slide"]</para>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>global: [GLOBAL-var, split with | if you want to get from an array! DEPRECATED, use GP, TSFE or getenv]</para>
									<para/>
									<para/>
									<para/>
									<para/>
									<para>date: [date-conf]</para>
									<para/>
									<para/>
									<para/>
									<para>page: [current page record]</para>
									<para/>
									<para/>
									<para>current: 1 (gets 'current' value)</para>
									<para/>
									<para/>
									<para>level: 1 (gets the rootline level of the current page)</para>
									<para/>
									<para/>
									<para>GP: Value from GET or POST method. Use this instead of global</para>
									<para>GPvar: usage of "GPvar" is deprecated. Use "GP" instead</para>
									<para/>
									<para/>
									<para/>
									<para>getenv: Value from environment variables</para>
									<para/>
									<para/>
									<para>getIndpEnv: Value from t3lib_div::getIndpEnv()</para>
									<para/>
									<para/>
									<para>DB: Value from database, syntax is [table name] : [uid] : [field]. Any record from a table in TCA can be selected here. Only marked-deleted records does not return a value here.</para>
									<para/>
									<para>fullRootLine: syntax is [pointer, integer], [field name], ["slide"]</para>
									<para>This property can be used to retrieve values from "above" the current page's root. Take the below page tree and assume that we are on the page "Here you are!". Using the "levelfield" property described above, it is possible to go up only to the page "Site root", because it is the root of a new (sub-)site. With "fullRootLine" it is possible to go all the way up to page tree root. The numbers between square brackets indicate to which page each value of pointer would point to:</para>
									<para/>
									<para>- Page tree root &#xA0; [-2]</para>
									<para>&#xA0; &#xA0;|- 1. page before &#xA0; [-1]</para>
									<para>&#xA0; &#xA0; &#xA0; |- Site root (root template here!) &#xA0; [0]</para>
									<para>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;|- Here you are! &#xA0;[1]</para>
									<para/>
									<para>A "slide" parameter can be added just as for the "levelfield" property above.</para>
									<para/>
									<para>LLL: Reference to a locallang (php or xml) label. Reference consists of [fileref]:[labelkey]</para>
									<para/>
									<para/>
									<para>path: path to a file, possibly placed in an extension, returns empty if the file doesn't exist.</para>
									<para/>
									<para>cObj: [internal variable from list: "parentRecordNumber"]: For CONTENT and RECORDS cObjects that are returned </para>
									<para>by a select query, this returns the row number (1,2,3,...) of the current cObject record.</para>
									<para/>
									<para>debug: Returns HTML formatted content of PHP variable defined by keyword. Available keys are "rootLine", "fullRootLine", "data"</para>
									<para/>
									<para/>
									<para>Getting array/object elements</para>
									<para>You can fetch the value of an array/object by splitting it with a pipe "|".Example:= TSFE:fe_user|user|username</para>
									<para/>
									<para>Getting more values</para>
									<para>By separating the value of getText with "//" (double slash) you let getText fetch the first value. If it appears empty ("" or zero) the next value is fetched and so on. Example:</para>
									<para>= field:header // field:title // field:uid</para>
									<para>This gets "title" if "header" is empty. If "title" is also empty it gets field "uid"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>dir</para>
								</entry>
								<entry>
									<para>returns a list of all pdf, gif and jpg-files from fileadmin/files/ sorted by their name reversely and with the full path (with "fileadmin/files/" prepended)</para>
									<para>fileadmin/files/ | pdf,gif,jpg | name | r | true</para>
								</entry>
								<entry>
									<para>[path relative to the web root of the site] | [list of valid extensions] | [sorting: name, size, ext, date] | &#xA0;[reverse: "r"] &#xA0;| &#xA0;[return full path: boolean</para>
									<para>Files matching is returned in a comma-separated string.</para>
									<para>Note:</para>
									<para>The value of config-option "lockFilePath" must equal the first part of the path. Thereby the path is locked to that folder.</para>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>function &#xA0;name</para>
								</entry>
								<entry>
									<para>Function:</para>
									<para>user_reverseString</para>
									<para>Method in class:</para>
									<para>user_stringReversing-&gt;reverseString</para>
								</entry>
								<entry>
									<para>Indicates a function or method in a class to call. See more information at the USER cObject.</para>
									<para>Depending on implementation the class or function name (but not the method name) should probably be prefixed with "user_". This can be changed in the $TYPO3_CONF_VARS config though. Also the function / method is normally called with 2 parameters, $conf (TS config) and $content (some content to be processed and returned)</para>
									<para>Also if you call a method in a class, it is checked (when using the USER/USER_INT objects) whether a class with the same name, but prefixed with "ux_" is present and if so, this class is instantiated instead. See "Inside TYPO3" document for more information on extending the classes in TYPO3!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(datatypes)]</para>
				<section>
					<title>Data types: Object types</title>
					<para>These are some "data-types" that might be mentioned and valid values are shown here below:</para>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Comment:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>"cObjects" are also called "Content Objects". See the section "Content Objects" later in this manual.</para>
										<para/>
										<para>Examples:</para>
										<para>HTML / TEXT / IMAGE .... </para>
									</entry>
								</row>
								<row>
									<entry>
										<para>frameObj</para>
									</entry>
									<entry>
										<para>FRAMESET / FRAME</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>menuObj</para>
									</entry>
									<entry>
										<para>See the section "Menu Objects" later in this manual.</para>
										<para/>
										<para>Examples:</para>
										<para>GMENU / TMENU / IMGMENU / JSMENU</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>GifBuilderObj</para>
									</entry>
									<entry>
										<para>See the section "GIFBUILDER" later in this manual.</para>
										<para/>
										<para>Examples:</para>
										<para>TEXT / SHADOW / OUTLINE / EMBOSS / BOX / IMAGE / EFFECT</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
			</section>
		</section>
		<section>
			<title>Objects and properties</title>
			<section>
				<title>Introduction</title>
				<section>
					<title>Reference to objects</title>
					<para>Whenever you see -&gt;[objectname] in the tables it means that the property is an object "objectname" with properties from object objectname. You don't need to define the objecttype. </para>
				</section>
				<section>
					<title>Calculating values (+calc)</title>
					<para>Sometimes a datatype is set to "something +calc". "+calc" indicates that the value is calculated with "+-/*". Be aware that the operators have no "weight". The calculation is just done from left to right.</para>
					<section>
						<title>Example:</title>
						<programlisting>45 + 34 * 2 = 158(which is the same as this in ordinary arithmetic: (45+34)*2=158)</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>"... /stdWrap"</title>
					<para>When a datatype is set to "type /stdWrap" it means that the value is parsed through the stdWrap function with the properties of the value as parameters.</para>
					<section>
						<title>Example:</title>
						<para>pixels /stdWrap:Here the value should be set to pixels and parsed through stdWrap.</para>
						<para>In a real application we could do like this:</para>
						<programlisting>.pixels.field = imagewidth</programlisting>
						<programlisting>.pixels.intval = 1</programlisting>
						<para/>
						<para>This example imports the value from the field "imagewidth" of the current $cObj-&gt;data-array. But we don't trust the result to be an integer so we parse it through the the intval()-function.</para>
					</section>
				</section>
				<section>
					<title>optionSplit</title>
					<para>optionSplit is a very tricky function. It's primarily used in the menu-objects where you define properties of a whole bunch of items at once. Here the value of properties would be parsed through this function an depending on your setup you could e.g. let the last menu-item appear with another color than the other.</para>
					<para>The syntax is like this:</para>
					<para>|*|- splits the value in parts first, middle, last.</para>
					<para>||- splits each of the first, middle, last in subparts</para>
					<orderedlist>
						<listitem>
							<para>The priority is last, first, middle.</para>
						</listitem>
						<listitem>
							<para>If the middle-value is empty (""), the last part of the first-value is repeated.</para>
						</listitem>
						<listitem>
							<para>If the first- or middle value is empty, the first part of the last-value is repeated before the last value</para>
						</listitem>
						<listitem>
							<para>The middle value is rotated.</para>
						</listitem>
					</orderedlist>
					<para/>
					<para>ex: first1 || first2 |*| middle1 || middle2 || middle3 |*| last1 || last 2</para>
					<para/>
					<section>
						<title>Examples:</title>
						<para>This is very complex and you might think that this has gone too far. But it's actually useful.</para>
						<para>Now consider a menu with five items:</para>
						<para>Introduction</para>
						<para>Who are we?</para>
						<para>Business</para>
						<para>Contact</para>
						<para>Links</para>
						<para/>
						<para>... and a configuration like this (taken from the example-code on the first pages):</para>
						<programlisting>temp.topmenu.1.NO {</programlisting>
						<programlisting>&#xA0; backColor = red</programlisting>
						<programlisting>&#xA0; ....</programlisting>
						<programlisting>}</programlisting>
						<para/>
						<para>If you look in this reference (see later) at the linkWrap-property of the GMENU-object, you'll discover that all properties of .NO are parsed through optionSplit. This means that before the individual menuitems are generated, the properties are split by this function. Now lets look at some examples:</para>
					</section>
					<section>
						<title>Example:</title>
						<para>All items take on the same value. Only the first-part is defined and thus it's repeated to all elements</para>
						<programlisting>TS:backColor = red</programlisting>
						<para/>
						<para>Introduction(red)</para>
						<para>Who are we?(red)</para>
						<para>Business(red)</para>
						<para>Contact(red)</para>
						<para>Links(red)</para>
						<para/>
					</section>
					<section>
						<title>Example:</title>
						<para>Here the first-part is split into subparts. The third subpart is repeated because the menu has five items.</para>
						<programlisting>TS:backColor = red || yellow || green</programlisting>
						<para/>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Business(green)first, subpart 3</para>
						<para>Contact(green)first, subpart 3 (repeated)</para>
						<para>Links(green)first, subpart 3 (repeated)</para>
						<para/>
					</section>
					<section>
						<title>Example:</title>
						<para>Now a middle-value is also defined ("white"). This means that after the first two menu-items the middle-value is used. </para>
						<programlisting>TS:backColor = red || yellow |*| white</programlisting>
						<para/>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Business(white)middle</para>
						<para>Contact(white)middle</para>
						<para>Links(white)middle</para>
					</section>
					<section>
						<title>Example:</title>
						<para>Now a last-value is also defined ("blue || olive"). This means that after the first two menu-items the middle-value is used. </para>
						<programlisting>TS:backColor = red || yellow |*| white |*| blue || olive</programlisting>
						<para/>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Business(white)middle</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
						<para>... and if we expand the menu a bit (middle-value is repeated!)</para>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Business(white)middle</para>
						<para>....(white)middle</para>
						<para>....(white)middle</para>
						<para>....(white)middle</para>
						<para>....(white)middle</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
						<para>... and if we contract the menu to only four items (the middle-value is discarded as it's priority is the least)</para>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
						<para>... and if we contract the menu to only 3 items (the last subpart of the first-value is discarded as it's priority is less than the last-value)</para>
						<para>Introduction(red)first, subpart 1</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
						<para>Now the last two examples showed that the last-value has the highest priority, then the first-value and then the middle-value. </para>
						<para/>
					</section>
					<section>
						<title>Example:</title>
						<para>The middle-value is left out now. Then subpart 2 of the first value is repeated. Please observe that no space must exist between the two |*||*|!</para>
						<programlisting>TS:backColor = red || yellow |*||*| blue || olive</programlisting>
						<para/>
						<para>Introduction(red)first, subpart 1</para>
						<para>Who are we?(yellow)first, subpart 2</para>
						<para>Business(yellow)first, subpart 2 (repeated)</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
					</section>
					<section>
						<title>Example:</title>
						<para>The middle-value and first-value is left out now. Then the subpart 1 of the last value is repeated. Please observe that no space must exist between the two |*||*|!</para>
						<programlisting>TS:backColor = |*||*| blue || olive</programlisting>
						<para/>
						<para>Introduction(blue)last, subpart 1 (repeated)</para>
						<para>Who are we?(blue)last, subpart 1 (repeated)</para>
						<para>Business(blue)last, subpart 1 (repeated)</para>
						<para>Contact(blue)last, subpart 1</para>
						<para>Links(olive)last, subpart 2</para>
						<para/>
					</section>
					<section>
						<title>Example:</title>
						<programlisting>TS:backColor = red |*| yellow || green |*| </programlisting>
						<para/>
						<para>Introduction(red)first</para>
						<para>Who are we?(yellow)middle, subpart 1</para>
						<para>Business(green)middle, subpart 2</para>
						<para>....(yellow)middle, subpart 1</para>
						<para>....(green)middle, subpart 2</para>
						<para>....(yellow)middle, subpart 1</para>
						<para>....(green)middle, subpart 2</para>
						<para>Contact(yellow)middle, subpart 1</para>
						<para>Links(green)middle, subpart 2</para>
					</section>
				</section>
			</section>
		</section>
		<section>
			<title>Conditions</title>
			<section>
				<title>Condition reference</title>
				<section>
					<title>General notes</title>
					<para>Values are normally trimmed before comparison, so blanks are not taken into account.</para>
					<para>You may combine several conditions with two operators: &amp;&amp; (and), || (or)</para>
					<para>Alternatively you may use "AND" and "OR" instead of "&amp;&amp;" and "||". The AND operator has always higher precedence over OR. If no operator has been specified, it will default to OR.</para>
					<para>Note that conditions cannot be used inside of curly brackets.</para>
					<para>For full explanations about conditions, please refer to "TypoScript Syntax and In-depth Study".</para>
					<section>
						<title>Examples:</title>
						<para>This condition will match if the visitor opens the website with Internet Explorer on Windows (but not on Mac)</para>
						<programlisting>[browser = msie] &amp;&amp; [system = win]</programlisting>
						<programlisting/>
						<para>This will match with either Opera or Firefox browsers</para>
						<programlisting>[browser = opera] || [browser = firefox]</programlisting>
						<programlisting/>
						<para>This will match with either Firefox or Internet Explorer. In case of Internet Explorer, the version must be above 6.</para>
						<programlisting>[browser = firefox] || [browser = msie] &amp;&amp; [version =&gt; 6]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>browser</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[browser = browser1,browser2,...]</programlisting>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>Browser:</para>
										</entry>
										<entry>
											<para>Identification:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>Amaya</para>
										</entry>
										<entry>
											<para>amaya</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>AOL</para>
										</entry>
										<entry>
											<para>aol</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Avant</para>
										</entry>
										<entry>
											<para>avant</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Camino</para>
										</entry>
										<entry>
											<para>camino</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Google Chrome</para>
										</entry>
										<entry>
											<para>chrome</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Mozilla Firefox</para>
										</entry>
										<entry>
											<para>firefox</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Flock</para>
										</entry>
										<entry>
											<para>flock</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Gecko</para>
										</entry>
										<entry>
											<para>gecko</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Konqueror</para>
										</entry>
										<entry>
											<para>konqueror</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Lynx</para>
										</entry>
										<entry>
											<para>lynx</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>NCSA Mosaic</para>
										</entry>
										<entry>
											<para>mosaic</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Microsoft Internet Explorer</para>
										</entry>
										<entry>
											<para>msie</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Navigator</para>
										</entry>
										<entry>
											<para>navigator</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Netscape Communicator</para>
										</entry>
										<entry>
											<para>netscape</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>OmniWeb</para>
										</entry>
										<entry>
											<para>omniweb</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Opera</para>
										</entry>
										<entry>
											<para>opera</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Safari</para>
										</entry>
										<entry>
											<para>safari</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>SeaMonkey</para>
										</entry>
										<entry>
											<para>seamonkey</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Webkit</para>
										</entry>
										<entry>
											<para>webkit</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>?? (if none of the above was found in the user agent)</para>
										</entry>
										<entry>
											<para>unknown</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
						<para>The condition works with the user agent string. The user agent is parsed with a regular expression, which searches the string for matches with the identifications named above. If there are multiple matches, the rightmost match is finally used, because it mostly is the most correct one.</para>
						<para>An example user agent could look like this:</para>
						<programlisting>Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15</programlisting>
						<programlisting/>
						<para>This string contains the identifications "Gecko" and "Firefox". The condition</para>
						<programlisting>[browser = firefox]</programlisting>
						<programlisting/>
						<para>evaluates to true.</para>
						<para>
							<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}1000020100000020000000200F1A6686.png" width=""/>Older TYPO3 versions
						</para>
						<para>Until TYPO3 4.2 the user agent was determined differently: Each value was compared with the ($browsername.$browserversion, e.g. "netscape4.72") using strstr(). So if the value was "netscape" or just "scape" or "net" all netscape browsers would match. If the value was "netscape4" all Netscape 4.xx browsers would match. If any value in the list matched the current browser, the condition returned true.</para>
						<para>TYPO3 version 4.2 or older does not detect all the browsers listed above.</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match with Chrome and Opera-browsers:</para>
						<programlisting>[browser = chrome, opera]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>version</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[version = value1, &gt;value2, =value3, &lt;value4, ...]</programlisting>
						<para>Values are floating-point numbers with "." as the decimal separator.</para>
						<para>The values may be preceded by three operators:</para>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>Operator:</para>
										</entry>
										<entry>
											<para>Function:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>&#xA0;[nothing]</para>
										</entry>
										<entry>
											<para>The value must be part of the beginning of the version as a string. This means that if the version is "4.72" and the value is "4" or "4.7" it matches. But "4.73" does not match.</para>
											<para>Example from syntax: "value1"</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>=</para>
										</entry>
										<entry>
											<para>The value must match exactly. Version "4.72" matches only with a value of "4.72"</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&gt;</para>
										</entry>
										<entry>
											<para>The version must be greater than the value</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&lt;</para>
										</entry>
										<entry>
											<para>The version must be less than the value</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
					<section>
						<title>Examples:</title>
						<para>This matches with exactly "4.03" browsers</para>
						<programlisting>[version= &#xA0;=4.03]</programlisting>
						<para>This matches with all 4+ browsers and Netscape 3 browsers</para>
						<programlisting>[version= &#xA0;&gt;4][browser= netscape3]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>system</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[system= system1,system2]</programlisting>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>System:</para>
										</entry>
										<entry>
											<para>Identification:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>Linux</para>
										</entry>
										<entry>
											<para>linux</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Android</para>
										</entry>
										<entry>
											<para>android</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>OpenBSD/NetBSD/FreeBSD</para>
										</entry>
										<entry>
											<para>unix_bsd</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>SGI / IRIX</para>
										</entry>
										<entry>
											<para>unix_sgi</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>SunOS</para>
										</entry>
										<entry>
											<para>unix_sun</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>HP-UX</para>
										</entry>
										<entry>
											<para>unix_hp</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Chrome OS</para>
										</entry>
										<entry>
											<para>chrome</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>iOS</para>
										</entry>
										<entry>
											<para>iOS</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Macintosh</para>
										</entry>
										<entry>
											<para>mac</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 7</para>
										</entry>
										<entry>
											<para>win7</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows Vista</para>
										</entry>
										<entry>
											<para>winVista</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows XP</para>
										</entry>
										<entry>
											<para>winXP</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 2000</para>
										</entry>
										<entry>
											<para>win2k</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows NT</para>
										</entry>
										<entry>
											<para>winNT</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 98</para>
										</entry>
										<entry>
											<para>win98</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 95</para>
										</entry>
										<entry>
											<para>win95</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 3.11</para>
										</entry>
										<entry>
											<para>win311</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Amiga</para>
										</entry>
										<entry>
											<para>amiga</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>Comparison with the operating system, which the website visitor uses. The system is extracted out of the useragent string.</para>
						<para>Values are strings and a match happens if one of these strings is the first part of the system-identification.</para>
						<para>For example if the value is "win9" this will match with "win95" and "win98" systems.</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match with windows and mac -systems only</para>
						<programlisting>[system= win,mac]</programlisting>
						<para/>
						<para>
							<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}1000020100000020000000200F1A6686.png" width=""/>Older TYPO3 versions and backwards compatibility
						</para>
						<para>TYPO3 version 4.4 or older does not detect all the systems listed above.</para>
						<para>For backwards compatibility, some systems are also matched by more generic strings.</para>
						<para>It is recommended to use the new identifiers documented above, but the following are valid, too:</para>
						<para/>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>System:</para>
										</entry>
										<entry>
											<para>Generic identification:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>Android</para>
										</entry>
										<entry>
											<para>linux</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Chrome OS</para>
										</entry>
										<entry>
											<para>linux</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>iOS</para>
										</entry>
										<entry>
											<para>mac</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 7</para>
										</entry>
										<entry>
											<para>winNT</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows Vista</para>
										</entry>
										<entry>
											<para>winNT</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows XP</para>
										</entry>
										<entry>
											<para>winNT</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Windows 2000</para>
										</entry>
										<entry>
											<para>winNT</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
				</section>
				<section>
					<title>device</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[device= device1, device2]</programlisting>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>Device:</para>
										</entry>
										<entry>
											<para>Identification:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>HandHeld</para>
										</entry>
										<entry>
											<para>pda</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>WAP phones</para>
										</entry>
										<entry>
											<para>wap</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Grabbers:</para>
										</entry>
										<entry>
											<para>grabber</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Indexing robots:</para>
										</entry>
										<entry>
											<para>robot</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>Values are strings and a match happens if one of these strings equals the type of device</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match WAP-phones and PDA's</para>
						<programlisting>[device = wap, pda]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>useragent </title>
					<section>
						<title>Syntax:</title>
						<programlisting>[useragent = agent]</programlisting>
						<para>This is a direct match on the useragent string from getenv("HTTP_USER_AGENT")</para>
						<para>You have the options of putting a "*" at the beginning and/or end of the value agent thereby matching with this wildcard!</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>If the HTTP_USER_AGENT is "Mozilla/4.0 (compatible; Lotus-Notes/5.0; Windows-NT)" this will match with it:</para>
						<programlisting>[useragent = Mozilla/4.0 (compatible; Lotus-Notes/5.0; Windows-NT)]</programlisting>
						<para/>
						<para>This will also match with it:</para>
						<programlisting>[useragent = *Lotus-Notes*]</programlisting>
						<para/>
						<para>... but this will also match with a useragent like this: "Lotus-Notes/4.5 ( Windows-NT )"</para>
						<para>A short list of user-agent strings and a proper match:</para>
						<informaltable frame="all">
							<tgroup cols="3">
								<thead>
									<row>
										<entry>
											<para>HTTP_USER_AGENT:</para>
										</entry>
										<entry>
											<para>Agent description:</para>
										</entry>
										<entry>
											<para>Matching condition:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>Nokia7110/1.0+(04.77)</para>
										</entry>
										<entry>
											<para>Nokia 7110 WAP phone</para>
										</entry>
										<entry>
											<para>[useragent= Nokia7110*]</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Lotus-Notes/4.5 ( Windows-NT )</para>
										</entry>
										<entry>
											<para>Lotus-Notes browser</para>
										</entry>
										<entry>
											<para>[useragent= Lotus-Notes*]</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Mozilla/3.0 (compatible; AvantGo 3.2)</para>
										</entry>
										<entry>
											<para>AvantGo browser</para>
										</entry>
										<entry>
											<para>[useragent= *AvantGo*]</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>Mozilla/3.0 (compatible; WebCapture 1.0; Auto; Windows)</para>
										</entry>
										<entry>
											<para>Adobe Acrobat 4.0</para>
										</entry>
										<entry>
											<para>[useragent= *WebCapture*]</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
						<para>These are some of the known WAP agents:</para>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>HTTP_USER_AGENT:</para>
										</entry>
										<entry>
											<para>HTTP_USER_AGENT (continued):</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>ALAV UP/4.0.7</para>
											<para>Alcatel-BE3/1.0 UP/4.0.6c</para>
											<para>AUR PALM WAPPER</para>
											<para>Device V1.12</para>
											<para>EricssonR320/R1A</para>
											<para>fetchpage.cgi/0.53</para>
											<para>Java1.1.8</para>
											<para>Java1.2.2</para>
											<para>m-crawler/1.0 WAP</para>
											<para>Materna-WAPPreview/1.1.3</para>
											<para>MC218 2.0 WAP1.1</para>
											<para>Mitsu/1.1.A</para>
											<para>MOT-CB/0.0.19 UP/4.0.5j</para>
											<para>MOT-CB/0.0.21 UP/4.0.5m</para>
											<para>Nokia-WAP-Toolkit/1.2</para>
											<para>Nokia-WAP-Toolkit/1.3beta</para>
											<para>Nokia7110/1.0 ()</para>
											<para>Nokia7110/1.0 (04.67)</para>
											<para>Nokia7110/1.0 (04.67)</para>
											<para>Nokia7110/1.0 (04.69)</para>
											<para>Nokia7110/1.0 (04.70)</para>
											<para>Nokia7110/1.0 (04.71)</para>
											<para>Nokia7110/1.0 (04.73)</para>
											<para>Nokia7110/1.0 (04.74)</para>
											<para>Nokia7110/1.0 (04.76)</para>
											<para>Nokia7110/1.0 (04.77)</para>
											<para>Nokia7110/1.0 (04.80)</para>
											<para>Nokia7110/1.0 (30.05)</para>
											<para>Nokia7110/1.0</para>
										</entry>
										<entry>
											<para>PLM's WapBrowser</para>
											<para>QWAPPER/1.0</para>
											<para>R380 2.0 WAP1.1</para>
											<para>SIE-IC35/1.0</para>
											<para>SIE-P35/1.0 UP/4.1.2a</para>
											<para>SIE-P35/1.0 UP/4.1.2a</para>
											<para>UP.Browser/3.01-IG01</para>
											<para>UP.Browser/3.01-QC31</para>
											<para>UP.Browser/3.02-MC01</para>
											<para>UP.Browser/3.02-SY01</para>
											<para>UP.Browser/3.1-UPG1</para>
											<para>UP.Browser/4.1.2a-XXXX</para>
											<para>UPG1 UP/4.0.7</para>
											<para>Wapalizer/1.0</para>
											<para>Wapalizer/1.1</para>
											<para>WapIDE-SDK/2.0; (R320s (Arial))</para>
											<para>WAPJAG Virtual WAP</para>
											<para>WAPJAG Virtual WAP</para>
											<para>WAPman Version 1.1 beta:Build W2000020401</para>
											<para>WAPman Version 1.1</para>
											<para>Waptor 1.0</para>
											<para>WapView 0.00</para>
											<para>WapView 0.20371</para>
											<para>WapView 0.28</para>
											<para>WapView 0.37</para>
											<para>WapView 0.46</para>
											<para>WapView 0.47</para>
											<para>WinWAP 2.2 WML 1.1</para>
											<para>wmlb</para>
											<para>YourWap/0.91</para>
											<para>YourWap/1.16</para>
											<para>Zetor</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
				</section>
				<section>
					<title>language</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[language = lang1, lang2, ...]</programlisting>
						<para>The values must be a straight match with the value of getenv("HTTP_ACCEPT_LANGUAGE") from PHP. Alternatively, if the value is wrapped in "*" (eg. "*en-us*") then it will split all languages found in the HTTP_ACCEPT_LANGUAGE string and try to match the value with any of those parts of the string. Such a string normally looks like "de,en-us;q=0.7,en;q=0.3" and "*en-us*" would match with this string.</para>
					</section>
				</section>
				<section>
					<title>IP</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[IP = ipaddress1, ipaddress2, ...]</programlisting>
						<para>The values are compared with the getenv("REMOTE_ADDR") from PHP.</para>
						<para>You may include "*" instead of one of the parts in values. You may also list the first one, two or three parts and only they will be tested.</para>
					</section>
					<section>
						<title/>
					</section>
					<section>
						<title>Examples:</title>
						<para>These examples will match any IP-address starting with "123":</para>
						<programlisting>[IP = 123.*.*.*]</programlisting>
						<para>or</para>
						<programlisting>[IP = 123]</programlisting>
						<para>These examples will match any IP-address ending with "123" or being "192.168.1.34":</para>
						<programlisting>[IP = *.*.*.123][IP = 192.168.1.34]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>hostname</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[hostname = hostname1, hostname2, ...]</programlisting>
						<para>The values are compared to the fully qualified hostname of getenv("REMOTE_ADDR") retrieved by PHP.</para>
						<para>Value is comma-list of domain names to match with. *-wildcard allowed but cannot be part of a string, so it must match the full host name (eg. myhost.*.com =&gt; correct, myhost.*domain.com =&gt; wrong)</para>
						<para/>
					</section>
				</section>
				<section>
					<title>hour</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[hour = hour1, &gt; hour2, &lt; hour3, ...]</programlisting>
						<para>Note: The first "=" sign directly after the word "hour" is always needed and is no operator. After that follow the operator and then the hour. </para>
						<para>Possible values are 0 to 23 (24-hours-format). The values in floating point are compared with the current hour of the server time. </para>
						<para>As you see in the section "Syntax" above, you can separate multiple conditions in one with a comma. The comma will then connect them with a logical disjunction (OR), that means the whole condition will be true, when one or more of its operands are true. </para>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>Operator:</para>
										</entry>
										<entry>
											<para>Function:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>[none]</para>
										</entry>
										<entry>
											<para>Requires an exact match with the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&gt;</para>
										</entry>
										<entry>
											<para>The hour must be greater than the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&lt;</para>
										</entry>
										<entry>
											<para>The hour must be less than the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&lt;=</para>
										</entry>
										<entry>
											<para>The hour must be less than or equal to the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&gt;=</para>
										</entry>
										<entry>
											<para>The hour must be greater than or equal to the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>!=</para>
										</entry>
										<entry>
											<para>The hour must be not equal to the value.</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match, if it is between 9 and 10 o'clock (according to the server time):</para>
						<programlisting>[hour = 9]</programlisting>
						<para>This will match, if it is before 7 o'clock:</para>
						<programlisting>[hour = &lt; 7]</programlisting>
						<para>This will match, if it is before 15 o'clock:</para>
						<programlisting>[hour = &lt;= 14]</programlisting>
						<para>The following examples will demonstrate the usage of the comma inside the condition:</para>
						<para>This will match, if it is between 8 and 9 o'clock (the hour equals 8) or after 16 o'clock (the hour is bigger than or equal to 16):</para>
						<programlisting>[hour = 8, &gt;= 16]</programlisting>
						<para>This will match between 16 and 8 o'clock (remember that the comma acts as an OR):</para>
						<programlisting>[hour = &gt; 15, &lt; 8]</programlisting>
						<para>In contrast a condition matching for 8 until 16 o'clock would be:</para>
						<programlisting>[hour = &gt; 7] &amp;&amp; [hour = &lt; 16]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>minute</title>
					<para>See "Hour" above. Uses the same syntax!</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[minute = ...]</programlisting>
						<para>Minute of hour, possible values are 0-59.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>month</title>
					<para>See "Hour" above. Uses the same syntax!</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[month = ...]</programlisting>
						<para>Month, from January being 1 until December being 12.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>year</title>
					<para>See "Hour" above. Uses the same syntax! For further information look at the date() function in the PHP manual, format string Y.</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[year = ...]</programlisting>
						<para>Year, as a 4-digit number.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>dayofweek</title>
					<para>See "Hour" above. Uses the same syntax!</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[dayofweek = ...]</programlisting>
						<para>Day of week, starting with Sunday being 0 until Saturday being 6.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>dayofmonth</title>
					<para>See "Hour" above. Uses the same syntax!</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[dayofmonth = ...]</programlisting>
						<para>Day of month, possible values are 1-31.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>dayofyear</title>
					<para>See "Hour" above. Uses the same syntax! For further information look at the date() function in the PHP manual, format string z.</para>
					<section>
						<title>Syntax:</title>
						<programlisting>[dayofyear = ...]</programlisting>
						<para>Day of year, 0-364 (or 365 in leap years). That this condition begins with 0 for the first day of the year means that e.g. [dayofyear = 7] will be true on the 6th of January.</para>
						<para>Apart from that this condition uses the same way of comparison as hour.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>usergroup</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[usergroup = group1-uid, group2-uid, ...]</programlisting>
						<para>The comparison can only return true if the grouplist is not empty (global var "gr_list").</para>
						<para>The values must either exists in the grouplist OR the value must be a "*".</para>
					</section>
					<section>
						<title>Example:</title>
						<para>This matches all logins:</para>
						<programlisting>[usergroup = *]</programlisting>
						<para/>
						<para>This matches logins from users members of groups with uid's 1 and/or 2:</para>
						<programlisting>[usergroup = 1,2]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>loginUser</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[loginUser = fe_users-uid, fe_users-uid, ...]</programlisting>
						<para>Matches on the uid of a logged in frontend user. Works like 'usergroup' above including the * wildcard to select ANY user. </para>
					</section>
					<section>
						<title>Example:</title>
						<para>This matches any login (use this instead of "[usergroup = *]" to match when a user is logged in!):</para>
						<programlisting>[loginUser = *]</programlisting>
						<para/>
						<para>Additionally it is possible to check if no FE user is logged in.</para>
					</section>
					<section>
						<title>Example:</title>
						<para>This matches when no user is logged in:</para>
						<para>[loginUser = ]</para>
					</section>
				</section>
				<section>
					<title>page</title>
					<section>
						<title>Syntax:</title>
					</section>
				</section>
				<section>
					<title>[page|field = value]</title>
				</section>
				<section>
					<title>This condition checks values of the current page record. While you can achieve the same with TSFE:[field] conditions in the frontend, this condition is usable in both frontend and backend.</title>
					<section>
						<title>Example:</title>
					</section>
				</section>
				<section>
					<title>This condition matches, if the layout field is set to 1:</title>
				</section>
				<section>
					<title>[page|layout = 1]</title>
				</section>
				<section>
					<title/>
				</section>
				<section>
					<title>treeLevel</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[treeLevel = levelnumber, levelnumber, ...]</programlisting>
						<para>This checks if the last element of the rootLine is at a level corresponding to one of the figures in "treeLevel". Level = 0 is the "root" of a website. Level=1 is the first menu level.</para>
					</section>
					<section>
						<title>Example:</title>
						<para>This changes something with the template, if the page viewed is on level either level 0 (basic) or on level 2</para>
						<programlisting>[treeLevel = 0,2]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>PIDinRootline</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[PIDinRootline = pages-uid, pages-uid, ...]</programlisting>
						<para>This checks if one of the figures in "treeLevel" is a PID (pages-uid) in the rootline.</para>
					</section>
					<section>
						<title>Example:</title>
						<para>This changes something with the template, if the page viewed is or is a subpage to page 34 or page 36</para>
						<programlisting>[PIDinRootline = 34,36]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>PIDupinRootline</title>
					<section>
						<title>Syntax:</title>
						<para>[PIDupinRootline = pages-uid, pages-uid, ...]</para>
						<para>Do the same as PIDinRootline, except the current page-uid is excluded from check.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>compatVersion</title>
					<section>
						<title>Syntax:</title>
						<para>[compatVersion = x.y.z]</para>
						<para>Require a minimum compatibility version. This version is not necessary equal with the TYPO3 version, it is a configurable value that can be changed in the Upgrade Wizard of the Install Tool.</para>
						<para>"compatVersion" is especially useful if you want to provide new default settings but keep the backwards compatibility for old versions of TYPO3.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>globalVar</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[globalVar = var1 = value1, var2 &gt; value2, var3 &lt; value3, var4 &lt;= value4, var5 &gt;= value5, var6 != value6, ...]</programlisting>
						<para>The values in floating point are compared to the global variables "var1", "var2" ... from above. </para>
						<para>You can use multiple conditions in one by separating them with a comma. The comma then acts as a 
							<emphasis role="bold">logical disjunction, that means the whole condition evaluates to true,</emphasis> whenever one or more of its operands are true. 
						</para>
						<informaltable frame="all">
							<tgroup cols="2">
								<thead>
									<row>
										<entry>
											<para>Operator:</para>
										</entry>
										<entry>
											<para>Function:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>=</para>
										</entry>
										<entry>
											<para>Requires an exact match.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&gt;</para>
										</entry>
										<entry>
											<para>The var must be greater than the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&lt;</para>
										</entry>
										<entry>
											<para>The var must be less than the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&lt;=</para>
										</entry>
										<entry>
											<para>The var must be less than or equal to the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>&gt;=</para>
										</entry>
										<entry>
											<para>The var mast be greater than or equal to the value.</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>!=</para>
										</entry>
										<entry>
											<para>The var must be not equal to the value.</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match with a URL like "...&amp;print=1":</para>
						<programlisting>[globalVar = GP:print &gt; 0]</programlisting>
						<programlisting/>
						<para>This will match, if the page-id is higher than or equal to 10:</para>
						<programlisting>[globalVar = TSFE:id &gt;= 10] </programlisting>
						<programlisting/>
						<para>This will match, if the page-id is not equal to 316:</para>
						<programlisting>[globalVar = TSFE:id != 316] </programlisting>
						<programlisting/>
						<para>This will match the non-existing GET/POST variable "style":</para>
						<programlisting>[globalVar = GP:style = ]</programlisting>
						<programlisting/>
						<para>This will match, if the GET/POST variable "L" equals 8 or the GET/POST variable "M" equals 2 or both:</para>
						<programlisting>[globalVar = GP:L = 8, GP:M = 2]</programlisting>
						<programlisting/>
						<para>This will match with the pages having the layout field set to "Layout 1":</para>
						<programlisting>[globalVar = TSFE:page|layout = 1]</programlisting>
						<programlisting/>
						<para>If the constant {$constant_to_turnSomethingOn} is "1" then this matches:</para>
						<programlisting>[globalVar = LIT:1 = {$constant_to_turnSomethingOn}]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>globalString</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[globalString = &#xA0; var1=value, &#xA0;var2= *value2, var3= *value3*, ...]</programlisting>
						<para>This is a direct match on global strings.</para>
						<para>You have the options of putting a "*" as a wildcard or using a PCRE style regular expression (must be wrapped in "/") to the value.</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>If the HTTP_HOST is "www.typo3.com" this will match with:</para>
						<programlisting>[globalString = IENV:HTTP_HOST = www.typo3.com]</programlisting>
						<programlisting/>
						<para>This will also match with it:</para>
						<programlisting>[globalString = IENV:HTTP_HOST = *typo3.com]</programlisting>
						<programlisting/>
						<para>... but this will also match with an HTTP_HOST like this: "demo.typo3.com"</para>
						<para>You can use values from global arrays and objects by dividing the var-name with a "|" (vertical line). </para>
					</section>
					<section>
						<title>Examples:</title>
						<para>The global var $HTTP_POST_VARS['key']['levels'] would be retrieved by "HTTP_POST_VARS|key|levels"</para>
						<para>Also note that it's recommended to program your scripts in compliance with the php.ini-optimized settings. Please see that file (from your distribution) for details.</para>
						<para>Caring about this means that you would get values like HTTP_HOST by getenv() and you would retrieve GET/POST values with t3lib_div::_GP(). Finally a lot of values from the TSFE object are useful. In order to get those values for comparison with "globalVar" and "globalString" conditions, you prefix that variable's name with either "IENV:"/"ENV:" , "GP:", "TSFE:" or "LIT:" respectively. Still the "|" divider may be used to separate keys in arrays and/or objects. "LIT" means "literal" and the string after ":" is trimmed and returned as the value (without being divided by "|" or anything)</para>
						<para>Notice: Using the "IENV:" prefix is highly recommended to get server/environment variables which are system-independent. Basically this will get the value using t3lib_div::getIndpEnv(). With "ENV:" you get the raw output from getenv() which is NOT always the same on all systems!</para>
					</section>
					<section>
						<title>Examples:</title>
						<para>This will match with a remote-addr beginning with "192.168."</para>
						<programlisting>[globalString = IENV:REMOTE_ADDR = 192.168.*]</programlisting>
						<para/>
						<para>This will match with the user whose username is "test":</para>
						<programlisting>[globalString = TSFE:fe_user|user|username = test]</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>userFunc</title>
					<section>
						<title>Syntax:</title>
						<programlisting>[userFunc = user_match(checkLocalIP)]</programlisting>
						<para>This call the function "user_match" with the first parameter "checkLocalIP". You write that function. You decide what it checks. Function result is evaluated as true/false.</para>
					</section>
					<section>
						<title/>
					</section>
					<section>
						<title>Example:</title>
						<para>Put this function in your localconf.php file:</para>
						<para/>
						<programlisting>function user_match($cmd) {</programlisting>
						<programlisting>switch($cmd) {</programlisting>
						<programlisting>case 'checkLocalIP':</programlisting>
						<programlisting>if (strstr(getenv('REMOTE_ADDR'), '192.168')) {</programlisting>
						<programlisting>return TRUE;</programlisting>
						<programlisting>}</programlisting>
						<programlisting>break;</programlisting>
						<programlisting>case 'checkSomethingElse':</programlisting>
						<programlisting>// ....</programlisting>
						<programlisting>break;</programlisting>
						<programlisting>}</programlisting>
						<programlisting>}</programlisting>
						<para/>
						<para>This condition will return true if the remote address contains "192.168" - which is what your function finds out.</para>
						<programlisting>[userFunc = user_match(checkLocalIP)]</programlisting>
						<para/>
					</section>
				</section>
			</section>
		</section>
		<section>
			<title>Functions</title>
			<section>
				<title>stdWrap</title>
				<para>This function is often added as a property to values in TypoScript. </para>
				<para>Example with the property "value" of the content-object, "HTML":</para>
				<programlisting>10 = HTML</programlisting>
				<programlisting>10.value = some text</programlisting>
				<programlisting>10.value.case = upper</programlisting>
				<para>Here the content of the object "10" is uppercased before it's returned.</para>
				<para>stdWrap properties are executed in the order they appear in the table below. If you want to study this further please refer to typo3/sysext/cms/tslib/class.tslib_content.php, where you will find the function stdWrap() and the array $stdWrapOrder, which represents the exact order of execution.</para>
				<section>
					<title>Content-supplying properties of stdWrap</title>
					<para>The properties in this table are parsed in the listed order. The properties "data", "field", "current", "cObject" (in that order!) are special as they are used to import content from variables or arrays. The above example could be rewritten to this:</para>
					<programlisting>10 = HTML</programlisting>
					<programlisting>10.value = some text</programlisting>
					<programlisting>10.value.case = upper</programlisting>
					<programlisting>10.value.field = header</programlisting>
					<programlisting/>
					<para>Now the line "10.value = some text" is obsolete, because the whole value is "imported" from the field called "header" from the $cObj-&gt;data-array.</para>
					<informaltable frame="all">
						<tgroup cols="3.890243902439024">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Get data:</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>setContentToCurrent</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Sets the current value to the incoming content of the function.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>setCurrent</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Sets the "current"-value. This is normally set from some outside routine, so be careful with this. But it might be handy to do this</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>lang</para>
									</entry>
									<entry>
										<para>Array of language keys</para>
									</entry>
									<entry>
										<para>This is used to define optional language specific values. </para>
										<para>If the global language key set by the -&gt;config property .language is found in this array, then this value is used instead of the default input value to stdWrap.</para>
										<para/>
										<para>Example:</para>
										<para>config.language = de</para>
										<para>page.10 = TEXT</para>
										<para>page.10.value = I am a Berliner!</para>
										<para>page.10.lang.de = Ich bin ein Berliner!</para>
										<para/>
										<para>Output will be "Ich bin..." instead of "I am..."</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>data</para>
									</entry>
									<entry>
										<para>getText</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>field</para>
									</entry>
									<entry>
										<para>Field name</para>
									</entry>
									<entry>
										<para>Sets the content to the value $cObj-&gt;data[field]</para>
										<para/>
										<para>Example: Set content to the value of field "title": ".field = title"</para>
										<para>$cObj-&gt;data changes. See the description for the data type "getText"/field!</para>
										<para/>
										<para>Note: You can also divide field names by "//". Say, you set "nav_title // title" as the value, then the content from the field nav_title will be returned unless it is a blank string, in which case the title-field's value is returned.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>current</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Sets the content to the "current"-value (see -&gt;split)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>Loads content from a content-object</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>numRows</para>
									</entry>
									<entry>
										<para>-&gt;numRows</para>
									</entry>
									<entry>
										<para>Returns the number of rows resulting from the select</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>filelist</para>
									</entry>
									<entry>
										<para>dir /stdWrap</para>
									</entry>
									<entry>
										<para>Reads a directory and returns a list of files.</para>
										<para>The value is exploded by "|" into parameters:</para>
										<para>1: The path</para>
										<para>2: comma-list of allowed extensions (no spaces between); if empty all extensions goes.</para>
										<para>3: sorting: name, size, ext, date, mdate (modification date)</para>
										<para>4: reverse: Set to "r" if you want a reversed sorting</para>
										<para>5: fullpath_flag: If set, the filelist is returned with complete paths, and not just the filename</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>preUserFunc</para>
									</entry>
									<entry>
										<para>Function name</para>
									</entry>
									<entry>
										<para>Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter.</para>
										<para>See .postUserFunc</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Override / Conditions:</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>override</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>if "override" returns something else than "" or zero (trimmed), the content is loaded with this! </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>preIfEmptyListNum</para>
									</entry>
									<entry>
										<para>(as "listNum" below)</para>
									</entry>
									<entry>
										<para>(as "listNum" below)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>ifEmpty</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>if the content is empty (trimmed) at this point, the content is loaded with "ifEmpty". Zeros are treated as empty values!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>ifBlank</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Same as "ifEmpty" but the check is done using strlen().</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>listNum</para>
									</entry>
									<entry>
										<para>int</para>
										<para>+calc </para>
										<para>+"last"</para>
									</entry>
									<entry>
										<para>Explodes the content with "," (comma) and the content is set to the item[value]. </para>
										<para/>
										<para>Special keyword: "last" is set to the last element of the array!</para>
										<para/>
										<para>.splitChar (string):</para>
										<para>Defines the string used to explode the value. If splitChar is an integer, the character with that number is used (eg. "10" to split lines...).</para>
										<para>Default: "," (comma)</para>
										<para>.stdWrap (stdWrap properties):</para>
										<para>stdWrap properties of the listNum...</para>
										<para/>
										<para>Examples:</para>
										<para>We have a value of "item 1, item 2, item 3, item 4":</para>
										<para>This would return "item 3":</para>
										<para>.listNum = last - 1</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>trim</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>PHP-function trim(); Removes whitespace around value</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Recursive call to stdWrap function</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>required</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>This flag requires the content to be set to some value after any content-import and treatment that might have happened now (data, field, current, listNum, trim). Zero is NOT regarded as empty! Use "if" instead!</para>
										<para>If the content i empty, "" is returned immediately.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>if</para>
									</entry>
									<entry>
										<para>-&gt;if</para>
									</entry>
									<entry>
										<para>If the if-object returns false, stdWrap returns "" immediately</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>fieldRequired</para>
									</entry>
									<entry>
										<para>Field name</para>
									</entry>
									<entry>
										<para>value in this field MUST be set</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Parse data:</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>csConv</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Convert the charset of the string from the charset given as value to the current rendering charset of the frontend (renderCharset).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>parseFunc</para>
									</entry>
									<entry>
										<para>object path reference / -&gt;parseFunc</para>
									</entry>
									<entry>
										<para>Processing instructions for the content. </para>
										<para>Notice: If you enter a string as value this will be taken as a reference to an object path globally in the TypoScript object tree. This will be the basis configuration for parseFunc merged with any properties you add here. It works exactly like references does for content elements.</para>
										<para/>
										<para>Example:</para>
										<para>parseFunc = &lt; lib.parseFunc_RTE</para>
										<para>parseFunc.tags.myTag = TEXT</para>
										<para>parseFunc.tags.myTag.value = This will be inserted when &amp;lt;myTag&amp;gt; is found!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>HTMLparser</para>
									</entry>
									<entry>
										<para>boolean / -&gt;HTMLparser</para>
									</entry>
									<entry>
										<para>This object allows you to parse the HTML-content and make all kinds of advanced filterings on the content.</para>
										<para>Value must be set and properties are those of -&gt;HTMLparser.</para>
										<para>(See "Core API" for -&gt;HTMLparser options)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>split</para>
									</entry>
									<entry>
										<para>-&gt;split</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>prioriCalc</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Calculation of the value using operators -+*/%^ plus respects priority to + and - operators and parenthesis levels ().</para>
										<para>. (period) is decimal delimiter.</para>
										<para>Returns a doublevalue.</para>
										<para>If .prioriCalc is set to "intval" an integer is returned.</para>
										<para>There is no error checking and division by zero or other invalid values may generate strange results. Also you use a proper syntax because future modifications to the function used may allow for more operators and features. </para>
										<para/>
										<para>Examples:</para>
										<para>100%7 = 2</para>
										<para>-5*-4 = 20</para>
										<para>+6^2 = 36</para>
										<para>6 ^(1+1) = 36</para>
										<para>-5*-4+6^2-100%7 = 54 </para>
										<para>-5 * (-4+6) ^ 2 - 100%7 = 98</para>
										<para>-5 * ((-4+6) ^ 2) - 100%7 = -22</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>char</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Content is set to the chr(value).</para>
										<para>PHP: $content = chr(intval($conf['char']);</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>intval</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>PHP function intval(); Returns an integer.</para>
										<para>PHP: $content = intval($content);</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>numberFormat</para>
									</entry>
									<entry>
										<para>-&gt;numberFormat</para>
									</entry>
									<entry>
										<para>Format a float value to any number format you need (e.g. useful for prices).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>date</para>
									</entry>
									<entry>
										<para>date-conf</para>
									</entry>
									<entry>
										<para>The content should be data-type "UNIX-time". Returns the content formatted as a date.</para>
										<para>PHP: $content = date($conf['date'], $content);</para>
										<para/>
										<para>Example where a timestamp is imported:</para>
										<para>.value.field = tstamp</para>
										<para>.value.date = </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>strftime</para>
									</entry>
									<entry>
										<para>strftime-conf</para>
									</entry>
									<entry>
										<para>Exactly like "date" above. See the PHP-manual (strftime) for the codes, or datatype "strftime-conf".</para>
										<para>This formatting is useful if the locale is set in advance in the CONFIG-object. See this.</para>
										<para/>
										<para>Properties:</para>
										<para>.charset: Can be set to the charset of the output string if you need to convert it to renderCharset. Default is to take the intelligently guessed charset from t3lib_cs.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>age</para>
									</entry>
									<entry>
										<para>boolean or string</para>
									</entry>
									<entry>
										<para>If enabled with a "1" (number, integer) the content is seen as a date (UNIX-time) and the difference from present time and the content-time is returned as one of these eight variations:</para>
										<para>"xx min" or "xx hrs" or "xx days" or "xx yrs" or "xx min" or "xx hour" or "xx day" or "year"</para>
										<para>The limits between which layout is used are 60 minutes, 24 hours and 365 days.</para>
										<para/>
										<para>If you set this property with a non-integer, it is used to format the eight units. The first four values are the plural values and the last four are singular. This is the default string:</para>
										<para>" min| hrs| days| yrs| min| hour| day| year"</para>
										<para/>
										<para>Set another string if you want to change the units. You may include the "-signs. They are removed anyway, but they make sure that a space which you might want between the number and the unit stays.</para>
										<para/>
										<para>Example:</para>
										<para>lib.ageFormat = TEXT</para>
										<para>lib.ageFormat.data = page:tstamp</para>
										<para>lib.ageFormat.age = " Minuten | Stunden | Tage | Jahre | Minute | Stunde | Tag | Jahr"</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>case</para>
									</entry>
									<entry>
										<para>case</para>
									</entry>
									<entry>
										<para>Converts case</para>
										<para/>
										<para>Uses "renderCharset" for the operation.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>bytes</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Will format the input (an integer) as bytes: bytes, kb, mb</para>
										<para/>
										<para>If you add a value for the property "labels" you can alter the default suffixes. Labels for bytes, kilo, mega and giga are separated by vertical bar (|) and possibly encapsulated in "". Eg: " | K| M| G" (which is the default value)</para>
										<para>Thus:</para>
										<para/>
										<para>bytes.labels = " | K| M| G"</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>substring</para>
									</entry>
									<entry>
										<para>[p1], &#xA0;[p2]</para>
									</entry>
									<entry>
										<para>Returns the substring with [p1] and [p2] sent as the 2nd and 3rd parameter to the PHP substring function.</para>
										<para/>
										<para>Uses "renderCharset" for the operation.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>removeBadHTML</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Removes "bad" HTML code based on a pattern that filters away HTML that is considered dangerous for XSS bugs.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>cropHTML</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>Crops the content to a certain length. In contrast to stdWrap.crop it respects HTML tags. It does not crop inside tags and closes open tags. Entities (like "&gt;") are counted as one char. See stdWrap.crop below for a syntax description and examples.</para>
										<para/>
										<para>Note that stdWrap.crop should not be used if stdWrap.cropHTML is already used.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stripHtml</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Strips all html-tags.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>crop</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>Crops the content to a certain length.</para>
										<para>Syntax: +/- (chars) = from left / from right | [string] | [boolean: keep whole words]</para>
										<para/>
										<para>Examples:</para>
										<para>20 | ... &#xA0; &#xA0;=&gt; max 20 characters. If more, the value will be truncated to first 20 chars and prepended with "..."</para>
										<para>-20 | ... =&gt; max 20 characters. If more, the value will be truncated to last 20 chars and appended with "..."</para>
										<para>20 | ... | 1 =&gt; max 20 characters. If more, the value will be truncated to last 20 chars and appended with "...". If the division is in the middle of a word, the remains of that word is removed.</para>
										<para/>
										<para>Uses "renderCharset" for the operation.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>rawUrlEncode</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Passes the content through rawurlencode()-PHP-function.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>htmlSpecialChars</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Passes the content through htmlspecialchars()-PHP-function.</para>
										<para>Additional property ".preserveEntities" will preserve entities so only non-entity chars are affected.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>doubleBrTag</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>All double-line-breaks are substituted with this value.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>br</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>PHP function nl2br(); converts line breaks to &lt;br /&gt;-tags.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>brTag</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>All ASCII-codes of "10" (CR) are substituted with value.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>encapsLines</para>
									</entry>
									<entry>
										<para>-&gt;encapsLines</para>
									</entry>
									<entry>
										<para>Lets you split the content by chr(10) and process each line independently. Used to format content made with the RTE.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>keywords</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Splits the content by characters "," ";" and chr(10) (return), trims each value and returns a comma-separated list of the values.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>innerWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the content.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>innerWrap2</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Same as .innerWrap (but watch the order in which they are executed).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>fontTag</para>
									</entry>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>addParams</para>
									</entry>
									<entry>
										<para>-&gt;addParams</para>
									</entry>
									<entry>
										<para>Lets you add tag-parameters to the content if the content is a tag!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>textStyle</para>
									</entry>
									<entry>
										<para>-&gt;textStyle</para>
									</entry>
									<entry>
										<para>Wraps content in font-tags</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>tableStyle</para>
									</entry>
									<entry>
										<para>-&gt;tableStyle</para>
									</entry>
									<entry>
										<para>Wraps content with table-tags</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>filelink</para>
									</entry>
									<entry>
										<para>-&gt;filelink</para>
									</entry>
									<entry>
										<para>Used to make lists of links to files.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>preCObject</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject prepended the content </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>postCObject</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject appended the content</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrapAlign</para>
									</entry>
									<entry>
										<para>align /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps content with &lt;div style=text-align:[value];"&gt; | &lt;/div&gt; if align is set</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>typolink</para>
									</entry>
									<entry>
										<para>-&gt;typolink</para>
									</entry>
									<entry>
										<para>Wraps the content with a link-tag</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>TCAselectItem</para>
									</entry>
									<entry>
										<para>Array of properties</para>
									</entry>
									<entry>
										<para>Resolves a comma-separated list of values into the TCA item representation.</para>
										<para/>
										<para>.table (string): The Table to look up</para>
										<para>.field (string): The field to resolve</para>
										<para>.delimiter (string): Delimiter for concatenating multiple elements.</para>
										<para/>
										<para>Notice: Currently this works only with TCA fields of type "select" which are not database relations.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>spaceBefore</para>
									</entry>
									<entry>
										<para>int /stdWrap</para>
									</entry>
									<entry>
										<para>Pixels space before. Done with a clear-gif; &lt;img ...&gt;&lt;BR&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>spaceAfter</para>
									</entry>
									<entry>
										<para>int /stdWrap</para>
									</entry>
									<entry>
										<para>Pixels space after. Done with a clear-gif; &lt;img ...&gt;&lt;BR&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>space</para>
									</entry>
									<entry>
										<para>space /stdWrap</para>
									</entry>
									<entry>
										<para>[spaceBefore] &#xA0; | &#xA0; [spaceAfter]</para>
										<para/>
										<para>Additional property:</para>
										<para>.useDiv = 1</para>
										<para>If set, a clear gif is not used but rather a &lt;div&gt; tag with a style-attribute setting the height. (Affects spaceBefore and spaceAfter as well).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>wrap /+.splitChar</para>
									</entry>
									<entry>
										<para>.splitChar defines an alternative splitting character (default is "|" - the vertical line)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>noTrimWrap</para>
									</entry>
									<entry>
										<para>"special" wrap</para>
									</entry>
									<entry>
										<para>This wraps the content with the values val1 and val2 in the example below - including surrounding whitespace! - without trimming the values. Note that this kind of wrap requires a "|" character to begin and end the wrap.</para>
										<para/>
										<para>Example:</para>
										<para>| val1 | val2 |</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap2</para>
									</entry>
									<entry>
										<para>wrap /+.splitChar</para>
									</entry>
									<entry>
										<para>same as .wrap (but watch the order in which they are executed)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>dataWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>The content is parsed for sections of {...} and the content of {...} is of the type getText and substituted with the result of getText.</para>
										<para/>
										<para>Example:</para>
										<para>This will produce a tag around the content with an attribute that contains the number of the current page:</para>
										<para>&lt;div id="{tsfe : id}"&gt; | &lt;/div&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>prepend</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject prepended to content (before)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>append</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject appended to content (after)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap3</para>
									</entry>
									<entry>
										<para>wrap /+.splitChar</para>
									</entry>
									<entry>
										<para>same as .wrap (but watch the order in which they are executed)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>outerWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the complete content</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>insertData</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, then the content string is parsed like .dataWrap above.</para>
										<para/>
										<para>Example:</para>
										<para>Displays the page title:</para>
										<para>10 = TEXT</para>
										<para>10.value = This is the page title: {page:title}</para>
										<para>10.insertData = 1</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>offsetWrap</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>This wraps the input in a table with columns to the left and top that offsets the content by the values of x,y. Based on the cObject OTABLE.</para>
										<para/>
										<para>.tableParams / .tdParams /stdWrap</para>
										<para>- used to manipulate tableParams/tdParams (default width=99%) of the offset. Default: See OTABLE.</para>
										<para/>
										<para>.stdWrap</para>
										<para>- stdWrap properties wrapping the offsetWrap'ed output</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>postUserFunc</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter. Please see the description of the cObject USER for in-depth information.</para>
										<para/>
										<para>Example:</para>
										<para>You can paste this example directly into a new template record.</para>
										<para/>
										<para>page = PAGE</para>
										<para>page.typeNum=0</para>
										<para>includeLibs.something = media/scripts/example_callfunction.php</para>
										<para/>
										<para>page.10 = TEXT</para>
										<para>page.10 {</para>
										<para>&#xA0; value = Hello World</para>
										<para>&#xA0; postUserFunc = user_reverseString</para>
										<para>&#xA0; postUserFunc.uppercase = 1</para>
										<para>}</para>
										<para/>
										<para>page.20 = TEXT</para>
										<para>page.20 {</para>
										<para>&#xA0; value = Hello World</para>
										<para>&#xA0; postUserFunc = user_various-&gt;reverseString</para>
										<para>&#xA0; postUserFunc.uppercase = 1</para>
										<para>&#xA0; postUserFunc.typolink = 11</para>
										<para>}</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>postUserFuncInt</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter. The result will be rendered non-cached, outside the main page-rendering. Please see the description of the cObject USER_INT and PHP_SCRIPT_INT for in-depth information.</para>
										<para>Supplied by Jens Ellerbrock</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>prefixComment</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Prefixes content with an HTML comment with the second part of input string (divided by "|") where first part is an integer telling how many trailing tabs to put before the comment on a new line.</para>
										<para>The content is parsed through insertData.</para>
										<para/>
										<para>Example:</para>
										<para>prefixComment = 2 | CONTENT ELEMENT, uid:{field:uid}/{field:CType}</para>
										<para/>
										<para>Will indent the comment with 1 tab (and the next line with 2+1 tabs)</para>
										<para>(Added in TYPO3 &gt;3.6.0RC1)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>editIcons</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>If not empty, then insert an icon linking to the typo3/alt_doc.php with some parameters to build and backend user edit form for certain fields.</para>
										<para>The value of this property is a list of fields from a table to edit. It's assumed that the current record of the cObj is the record to be edited.</para>
										<para>Syntax: optional tablename : comma list of field names[list of pallette-field names separated by | ]</para>
										<para/>
										<para>.beforeLastTag (1,0,-1): If set (1), the icon will be inserted before the last HTML tag in the content. If -1 the icon will be prepended to the content. If zero (0) the icon is appended in the end of the content.</para>
										<para/>
										<para>.styleAttribute (string): Adds a style-attribute to the icon image with this value. For instance you can set "position:absolute" if you want a non-destructive insertion of the icon. Notice: For general styling all edit icons has the class "frontEndEditIcons" which can be addressed from the stylesheet of the site.</para>
										<para/>
										<para>.iconTitle (string): The title attribute of the image tag.</para>
										<para/>
										<para>.iconImg (HTML): Alternative HTML code instead of the default icon shown. Can be used to set another icon for editing (for instance a red dot or otherwise... :-)</para>
										<para/>
										<para>Example:</para>
										<para>This will insert an edit icon which links to a form where the header and bodytext fields are displayed and made available for editing (provided the user has access!).</para>
										<para>editIcons = tt_content : header, bodytext</para>
										<para/>
										<para>Or this line that puts the header_align and date field into a "palette" which means they are displayed on a single line below the header field. This saves some space.</para>
										<para>editIcons = header[header_align|date], bodytext</para>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>editPanel</para>
									</entry>
									<entry>
										<para>boolean / editPanel</para>
									</entry>
									<entry>
										<para>See cObject EDITPANEL.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>debug</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Prints content with HTMLSpecialChars() and &lt;PRE&gt;&lt;/PRE&gt;: Useful for debugging which value stdWrap actually ends up with, if you're constructing a website with TypoScript. </para>
										<para>Should be used under construction only.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>debugFunc</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Prints the content directly to browser with the debug() function.</para>
										<para>Should be used under construction only.</para>
										<para>Set to value "2" the content will be printed in a table - looks nicer.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>debugData</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Prints the current data-array, $cObj-&gt;data, directly to browser. This is where ".field" gets data from.</para>
										<para>Should be used under construction only. </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;stdWrap]</para>
				</section>
			</section>
			<section>
				<title/>
			</section>
			<section>
				<title>imgResource</title>
				<para>imgResource contains the properties that are used with the data type imgResource.</para>
				<section>
					<title>Example:</title>
					<para>This scales the image toplogo.gif to the width of 200 pixels.</para>
					<programlisting>file = toplogo.gif</programlisting>
					<programlisting>file.width = 200</programlisting>
					<para/>
					<informaltable frame="all">
						<tgroup cols="3.85">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>ext</para>
									</entry>
									<entry>
										<para>imageExtension /stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>web</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>width</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>If both the width and the height are set and one of the numbers is appended by an "m", the proportions will be preserved and thus width/height are treated as maximum dimensions for the image. The image will be scaled to fit into width/height rectangle.</para>
										<para/>
										<para>If both the width and the height are set and at least one of the numbers is appended by a "c", crop-scaling will be enabled. This means that the proportions will be preserved and the image will be scaled to fit around a rectangle with width/height dimensions. Then, a centered portion from inside of the image (size defined by width/height) will be cut out.</para>
										<para>The "c" can have a percentage value (-100 ... +100) after it, which defines how much the cropping will be moved off the center to the border.</para>
										<para/>
										<para>Notice that you can only use "m" or "c" at the same time!</para>
										<para/>
										<para>Examples:</para>
										<para>This crops 120x80px from the center of the scaled image:</para>
										<para>.width = 120c.height = 80c</para>
										<para/>
										<para>This crops 100x100px; from landscape-images at the left and portrait-images centered:</para>
										<para>.width = 100c-100.height = 100c</para>
										<para/>
										<para>This crops 100x100px; from landscape-images a bit right of the center and portrait-images a bit upper than centered:</para>
										<para>.width = 100c+30</para>
										<para>.height = 100c-25</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>height</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>see ".width"</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>params</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>ImageMagick command-line:</para>
										<para>fx. "-rotate 90" or "-negate"</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>sample</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, -sample is used to scale images instead of -geometry. Sample does not use antialiasing and is therefore much faster.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>noScale</para>
									</entry>
									<entry>
										<para>boolean /stdWrap</para>
									</entry>
									<entry>
										<para>If set, the image itself will never be scaled. Only width and height are calculated according to the other properties, so that the image is displayed resizedly, but the original file is used. Can be used for creating PDFs or printing of pages, where the original file could provide much better quality than a rescaled one.</para>
										<para/>
										<para>Example:</para>
										<para>// test.jpg could e.g. have 1600 x 1200 pixels</para>
										<para>file = test.jpg</para>
										<para>file.width = 240m</para>
										<para>file.height = 240m</para>
										<para>file.noScale = 1</para>
										<para>This example results in an image tag like the following. Note that src="test.jpg" is the original file:</para>
										<para>&lt;img src="test.jpg" width="240" height="180" /&gt;</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>alternativeTempPath</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Enter an alternative path to use for temp images. Must be found in the list in $TYPO3_CONF_VARS['FE']['allowedTempPaths'].</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>frame</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Chooses which frame in an gif-animation or pdf-file. </para>
										<para>"" = first frame (zero)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>import</para>
									</entry>
									<entry>
										<para>path /stdWrap</para>
									</entry>
									<entry>
										<para>value should be set to the path of the file</para>
										<para>with stdWrap you get the filename from the data-array</para>
										<para/>
										<para>Example:</para>
										<para>This returns the first image in the field "image" from the data-array:</para>
										<para>.import = uploads/pics/</para>
										<para>.import.field = image</para>
										<para>.import.listNum = 0</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>maxW</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>Max width</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>maxH</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>Max height</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>minW</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>Min width (overrules maxW/maxH)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>minH</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>Min height (overrules maxW/maxH)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stripProfile</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, IM-command will use a stripProfile-command which shrinks the generated thumbnails. See Install Tool for options and details. </para>
										<para>If im_useStripProfileByDefault is set in the install tool, you can deactivate it by setting stripProfile=0.</para>
										<para/>
										<para>Example:</para>
										<para>10 = IMAGE</para>
										<para>10.file = fileadmin/images/image1.jpg</para>
										<para>10.file.stripProfile = 1</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Masking:</para>
										<para>(Black hides, white shows)</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>m.mask</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>The mask by which the image is masked onto "m.bgImg". Both "m.mask" and "m.bgImg" is scaled to fit the size of the imgResource image!</para>
										<para>NOTE: Both "m.mask" and "m.bgImg" must be valid images.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>m.bgImg</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>NOTE: Both "m.mask" and "m.bgImg" must be valid images.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>m.bottomImg</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>An image masked by "m.bottomImg_mask" onto "m.bgImg" before the imgResources is masked by "m.mask". </para>
										<para>Both "m.bottomImg" and "m.bottomImg_mask" is scaled to fit the size of the imgResource image!</para>
										<para>This is most often used to create an underlay for the imgResource.</para>
										<para>NOTE: Both "m.bottomImg" and "m.bottomImg_mask" must be valid images.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>m.bottomImg_mask</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>(optional)</para>
										<para>NOTE: Both "m.bottomImg" and "m.bottomImg_mask" must be valid images.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;imgResource]</para>
				</section>
			</section>
			<section>
				<title>imageLinkWrap</title>
				<para>This object wraps the input (an image) with a link ready for calling up the eID "tx_cms_showpic" script with parameters that define such things as the size of the image, the background color of the new window and so on.</para>
				<para>An md5-hash of the parameters is generated. The hash is also generated in the "tx_cms_showpic" script and the hashes MUST match in order for the image to be shown. This is a safety feature in order to prevent users from changing the parameters in the URL themselves.</para>
				<para>Since TYPO3 4.5 it is also possible to display the image in a lightbox instead of using showpic.php. See the property "linkParams" below for a short instruction.</para>
				<para/>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>Override the path of the image which is displayed</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>width</para>
								</entry>
								<entry>
									<para>int (1-1000) /stdWrap</para>
								</entry>
								<entry>
									<para>If you add "m" to either the width or height, the image will be held in proportions and width/height works as max-dimensions</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>height</para>
								</entry>
								<entry>
									<para>int (1-1000) /stdWrap</para>
								</entry>
								<entry>
									<para>see ".width"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>effects</para>
								</entry>
								<entry>
									<para>see GIFBUILDER / effects. (from stdgraphics-library) </para>
									<para>/stdWrap</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>gamma=1.3 | sharpen=80 | solarize=70</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sample</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, -sample is used to scale images instead of -geometry. Sample does not use antialiasing and is therefore much faster.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>alternativeTempPath</para>
								</entry>
								<entry>
									<para>path /stdWrap</para>
								</entry>
								<entry>
									<para>Enter an alternative path to use for temp images. Must be found in the list in $TYPO3_CONF_VARS['FE']['allowedTempPaths'].</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>title</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>page title of the new window (HTML)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bodyTag</para>
								</entry>
								<entry>
									<para>&lt;tag&gt; /stdWrap</para>
								</entry>
								<entry>
									<para>Body tag of the new window</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wrap of the image, which is output between the body-tags</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-data:target /stdWrap</para>
								</entry>
								<entry>
									<para>NOTE: Only if ".JSwindow" is set</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set to "1", the image will be opened in a new window which is fitted to the dimensions of the image!</para>
									<para>You can also use stdWrap here.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow.expand</para>
								</entry>
								<entry>
									<para>x,y /stdWrap</para>
								</entry>
								<entry>
									<para>x and y is added to the window dimensions.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow.newWindow</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Each picture will open in a new window!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow.altUrl</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>If this returns anything, the URL shown in the JS-window is NOT tx_cms_showpic but the url given here!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow.altUrl_noDefaultParams</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this is set, the image parameters are not appended to the altUrl</para>
									<para>automatically. This is useful if you want to create them with a user function</para>
									<para>instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>typolink</para>
								</entry>
								<entry>
									<para>-&gt;typolink</para>
								</entry>
								<entry>
									<para>NOTE: This overrides the imageLinkWrap if it returns anything!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>directImageLink</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If true, a link to the generated image file will be returned directly (which means that showpic.php will not be used).</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkParams</para>
								</entry>
								<entry>
									<para>-&gt;typolink</para>
								</entry>
								<entry>
									<para>Allows manipulation of the generated typolink, if JSwindow is not used.</para>
									<para/>
									<para>Example:</para>
									<para>JSwindow = 0</para>
									<para>directImageLink = 1</para>
									<para>linkParams.ATagParams.dataWrap = class="{$styles.content.imgtext.linkWrap.lightboxCssClass}" rel="{$styles.content.imgtext.linkWrap.lightboxRelAttribute}"</para>
									<para/>
									<para>With these options it is easy to use a lightbox of your choice to display resizable images in the frontend: You only need to integrate the lightbox by including its JS and CSS files and to activate it for certain links (e.g. for links with the class "lightbox").</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Enable stdWrap for the image</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>enable</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>The image is linked ONLY if this is true!!</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;imageLinkWrap]</para>
				<section>
					<title>Example:</title>
					<programlisting>1.imageLinkWrap = 1</programlisting>
					<programlisting>1.imageLinkWrap {</programlisting>
					<programlisting>enable = 1</programlisting>
					<programlisting>bodyTag = &lt;BODY bgColor=black&gt;</programlisting>
					<programlisting>wrap = &lt;A href="javascript:close();"&gt; | &lt;/A&gt;</programlisting>
					<programlisting>width = 800m</programlisting>
					<programlisting>height = 600</programlisting>
					<programlisting/>
					<programlisting>JSwindow = 1</programlisting>
					<programlisting>JSwindow.newWindow = 1</programlisting>
					<programlisting>JSwindow.expand = 17,20</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>numRows</title>
				<para>This object returns the number of rows.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>table</para>
								</entry>
								<entry>
									<para>Table name</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>select</para>
								</entry>
								<entry>
									<para>-&gt;select</para>
								</entry>
								<entry>
									<para>Select query for the operation.</para>
									<para/>
									<para>The property "selectFields" is overridden internally with "count(*)".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;numRows]</para>
			</section>
			<section>
				<title>select</title>
				<para>This object generates an SQL-select statement needed to select records from the database.</para>
				<para>Some records are hidden or timed by start and end-times. This is automatically added to the SQL-select by looking in the $TCA (enablefields).</para>
				<para>Also, if the "pidInList" feature is used, any page in the pid-list that is not visible for the user of the website IS REMOVED from the pidlist. Thereby no records from hidden, timed or access-protected pages are selected! Nor records from recyclers.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>uidInList</para>
								</entry>
								<entry>
									<para>list of page_id</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>pidInList</para>
								</entry>
								<entry>
									<para>list of page_id /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>this</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>recursive</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Recursive levels for the pidInList</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>orderBy</para>
								</entry>
								<entry>
									<para>SQL-orderBy</para>
									<para>/stdWrap</para>
								</entry>
								<entry>
									<para>Without "order by"! Eg. "sorting, title"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>groupBy</para>
								</entry>
								<entry>
									<para>SQL-groupBy</para>
									<para>/stdWrap</para>
								</entry>
								<entry>
									<para>Without "group by"! Eg. "CType"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>max</para>
								</entry>
								<entry>
									<para>int </para>
									<para>+calc</para>
									<para>+"total"</para>
								</entry>
								<entry>
									<para>Max records</para>
									<para/>
									<para>Special keyword: "total" is substituted with count(*)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>begin</para>
								</entry>
								<entry>
									<para>int </para>
									<para>+calc </para>
									<para>+"total"</para>
								</entry>
								<entry>
									<para>Begin with record number value</para>
									<para/>
									<para>Special keyword: "total" is substituted with count(*)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>where</para>
								</entry>
								<entry>
									<para>SQL-where</para>
								</entry>
								<entry>
									<para>Without "where"!, Eg. " (title LIKE '%SOMETHING%' AND NOT doktype) "</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>andWhere</para>
								</entry>
								<entry>
									<para>SQL-where /stdWrap</para>
								</entry>
								<entry>
									<para>Without "AND"!, Eg. "NOT doktype".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>languageField</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If set, this points to the field in the record which holds a reference to a record in sys_language table. And if set, the records returned by the select-function will be selected only if the value of this field matches the $GLOBALS['TSFE']-&gt;sys_language_uid (which is set by the config.sys_language_uid option)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>selectFields</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>List of fields to select, or "count(*)".</para>
									<para>If the records need to be localized, please include the relevant localization-fields (uid,pid,languageField,transOrigPointerField). Otherwise the TYPO3 internal localization will not succeed.</para>
								</entry>
								<entry>
									<para>*</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>join</para>
									<para>leftjoin</para>
									<para>rightjoin</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Enter tablename for JOIN , LEFT OUTER JOIN and RIGHT OUTER JOIN respectively.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>markers</para>
								</entry>
								<entry>
									<para>array of markers</para>
								</entry>
								<entry>
									<para>The markers defined in this section can be used, wrapped in the usual ###markername### way, in any other property of select. Each value is properly escaped and quoted to prevent SQL injection problems. This provides a way to safely use external data (e.g. database fields, GET/POST parameters) in a query.</para>
									<para/>
									<para>&lt;markername&gt;.value (value)</para>
									<para>Sets the value directly.</para>
									<para/>
									<para>&lt;markername&gt;.commaSeparatedList (bool)</para>
									<para>If set, the value is interpreted as a comma-separated list of values. Each value in the list is individually escaped and quoted.</para>
									<para/>
									<para>(stdWrap properties ...)</para>
									<para>All stdWrap properties can be used for each markername.</para>
									<para/>
									<para>Example:</para>
									<para>page.60 = CONTENT</para>
									<para>page.60 {</para>
									<para>&#xA0; table = tt_content</para>
									<para>&#xA0; select {</para>
									<para>&#xA0; &#xA0; pidInList = 73</para>
									<para>&#xA0; &#xA0; where = header != ###whatever###</para>
									<para>&#xA0; &#xA0; orderBy = ###sortfield###</para>
									<para>&#xA0; &#xA0; markers {</para>
									<para>&#xA0; &#xA0; &#xA0; whatever.data = GP:first</para>
									<para>&#xA0; &#xA0; &#xA0; sortfield.value = sor</para>
									<para>&#xA0; &#xA0; &#xA0; sortfield.wrap = |ting</para>
									<para>&#xA0; &#xA0; }</para>
									<para>&#xA0; }</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;select]</para>
			</section>
			<section>
				<title>split</title>
				<para>This object is used to split the input by a character and then parse the result onto some functions.</para>
				<para>For each iteration the split index starting with 0 (zero) is stored in the register key SPLIT_COUNT.</para>
				<section>
					<title>Example:</title>
					<para>This is an example of TypoScript-code that imports the content of field "bodytext" from the $cObj-&gt;data-array (ln 2). The content is split by the linebreak-character (ln 4). The items should all be treated with a stdWrap (ln 5) which imports the value of the item (ln 6). This value is wrapped in a tablerow where the first column is a bullet-gif (ln 7). Finally the whole thing is wrapped in the proper table-tags (ln 9)</para>
					<programlisting>1 &#xA0;20 = TEXT</programlisting>
					<programlisting>2 &#xA0;20.field = bodytext</programlisting>
					<programlisting>3 &#xA0;20.split {</programlisting>
					<programlisting>4 &#xA0; &#xA0;token.char = 10</programlisting>
					<programlisting>5 &#xA0; &#xA0;cObjNum = 1</programlisting>
					<programlisting>6 &#xA0; &#xA0;1.current = 1</programlisting>
					<programlisting>7 &#xA0; &#xA0;1.wrap = &lt;TR&gt;&lt;TD valign="top"&gt;&lt;IMG src="dot.gif"&gt;&lt;/TD&gt;&lt;TD valign="top"&gt; | &lt;/TD&gt;&lt;/TR&gt;</programlisting>
					<programlisting>8 &#xA0;}</programlisting>
					<programlisting>9 &#xA0;20.wrap = &lt;TABLE border="0" cellpadding="0" cellspacing="3" width="368"&gt; | &lt;/TABLE&gt;&lt;BR&gt;</programlisting>
					<para/>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>token</para>
									</entry>
									<entry>
										<para>str /stdWrap</para>
									</entry>
									<entry>
										<para>string or character (token) used to split the value</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>max</para>
									</entry>
									<entry>
										<para>int /stdWrap</para>
									</entry>
									<entry>
										<para>max number of splits</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>min</para>
									</entry>
									<entry>
										<para>int /stdWrap</para>
									</entry>
									<entry>
										<para>min number of splits.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>returnKey</para>
									</entry>
									<entry>
										<para>int /stdWrap</para>
									</entry>
									<entry>
										<para>Instead of parsing the split result, just return this element of the index immediately.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>cObjNum</para>
									</entry>
									<entry>
										<para>cObjNum</para>
										<para>+optionSplit</para>
										<para>/stdWrap</para>
									</entry>
									<entry>
										<para>This is a pointer the array of this object ("1,2,3,4"), that should treat the items, resulting from the split.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>1,2,3,4</para>
									</entry>
									<entry>
										<para>-&gt;CARRAY /stdWrap</para>
									</entry>
									<entry>
										<para>The object that should treat the value. </para>
										<para>NOTE: The "current"-value is set to the value of current item, when the objects are called. See "stdWrap" / current.</para>
										<para/>
										<para>Example (stdWrap used):</para>
										<para>1.current = 1</para>
										<para>1.wrap = &lt;B&gt; | &lt;/B&gt;</para>
										<para/>
										<para>Example (CARRAY used):</para>
										<para>1 {</para>
										<para>&#xA0; 10 = TEXT</para>
										<para>&#xA0; 10.current = 1</para>
										<para>&#xA0; 10.wrap = &lt;B&gt; | &lt;/B&gt;</para>
										<para>&#xA0; 20 = CLEARGIF</para>
										<para>&#xA0; 20.height = 20</para>
										<para>}</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>wrap </para>
										<para>+optionSplit</para>
										<para>/stdWrap</para>
									</entry>
									<entry>
										<para>Defines a wrap for each item.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;split]</para>
				</section>
			</section>
			<section>
				<title>if</title>
				<para>This function returns true if ALL of the present conditions are met (they are AND'ed). If a single condition is false, the value returned is false. </para>
				<para>The returned value may still be negated by the ".negate"-property.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>isTrue</para>
								</entry>
								<entry>
									<para>str /stdWrap</para>
								</entry>
								<entry>
									<para>If the content is "true".... (not empty string and not zero)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>isFalse</para>
								</entry>
								<entry>
									<para>str /stdWrap</para>
								</entry>
								<entry>
									<para>If the content is "false"... (empty or zero)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>isPositive</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
									<para>+ calc</para>
								</entry>
								<entry>
									<para>returns false if content is not positive</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>isGreaterThan</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>returns false if content is not greater than ".value"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>isLessThan</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>returns false if content is not less than ".value"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>equals</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>returns false if content does not equal ".value"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>isInList</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>returns false if content is not in the comma-separated list ".value".</para>
									<para>The list in ".value" may not have spaces between elements!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>value</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>"value" (the comparison value mentioned above)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>negate</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>This negates the result just before it exits. So if anything above returns true the overall returns ends up returning false!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>directReturn</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this property exists the true/false of this value is returned. Could be used to set true/false by TypoScript constant</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;if]</para>
				<section>
					<title>Explanation</title>
					<para>The "if"-function is a very odd way of returning true or false! Beware! </para>
					<para>"if" is normally used to decide whether to render an object or return a value (see the cObjects and stdWrap)</para>
					<para>Here is how it works:</para>
					<para>The function returns true or false. Whether it returns true or false depends on the properties of this function. Say if you set "isTrue = 1" then result is true. If you set "isTrue.field = header" the function returns true if the field "header" in $cObj-&gt;data is set! </para>
					<para>If you want to compare values, you must load a base-value in the ".value"-property. Example:</para>
					<programlisting>.value = 10</programlisting>
					<programlisting>.isGreaterThan = 11</programlisting>
					<para/>
					<para>This would return true because the value of ".isGreaterThan" is greater than 10, which is the base-value.</para>
					<para>More complex is this:</para>
					<programlisting>.value = 10</programlisting>
					<programlisting>.isGreaterThan = 11</programlisting>
					<programlisting>.isTrue.field = header</programlisting>
					<programlisting>.negate = 1</programlisting>
					<para/>
					<para>There are two conditions - isGreaterThan and isTrue. If they are both true, the total is true (AND) BUT(!) the result if the function in total is false because the ".negate"-flag inverts the result!</para>
					<section>
						<title>Example:</title>
						<para>This is a GIFBUILDER object that will write "NEW" on a menu-item if the field "newUntil" has a date less than the current date!</para>
						<programlisting>...</programlisting>
						<programlisting>&#xA0; 30 = TEXT</programlisting>
						<programlisting>&#xA0; 30.text = NEW!</programlisting>
						<programlisting>&#xA0; 30.offset = 10,10</programlisting>
						<programlisting>&#xA0; 30.if {</programlisting>
						<programlisting>&#xA0; &#xA0; value.data = date: U</programlisting>
						<programlisting>&#xA0; &#xA0; isLessThan.field = newUntil</programlisting>
						<programlisting>&#xA0; &#xA0; negate = 1</programlisting>
						<programlisting>&#xA0; }</programlisting>
						<programlisting>&#x2026;</programlisting>
					</section>
				</section>
			</section>
			<section>
				<title>typolink</title>
				<para>Wraps the incoming value with link.</para>
				<para>If this is used from parseFunc the $cObj-&gt;parameters-array is loaded with the link-parameters (lowercased)!</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>extTarget</para>
								</entry>
								<entry>
									<para>target /stdWrap</para>
								</entry>
								<entry>
									<para>Target used for external links</para>
								</entry>
								<entry>
									<para>_top</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fileTarget</para>
								</entry>
								<entry>
									<para>target /stdWrap</para>
								</entry>
								<entry>
									<para>Target used for file links</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target /stdWrap</para>
								</entry>
								<entry>
									<para>Target used for internal links</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>no_cache</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Adds a "&amp;no_cache=1"-parameter to the link</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>useCacheHash</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the additionalParams list is exploded and calculated into a hash string appended to the url, like "&amp;cHash=ae83fd7s87". When the caching mechanism sees this value, it calculates the same value on the server based on incoming values in HTTP_GET_VARS, excluding id,type,no_cache,ftu,cHash,MP values. If the incoming cHash value matches the calculated value, the page may be cached based on this.</para>
									<para>The $TYPO3_CONF_VARS['SYS']['encryptionKey'] is included in the hash in order to make it unique for the server and non-predictable.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>additionalParams</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This is parameters that are added to the end of the url. This must be code ready to insert after the last parameter. </para>
									<para/>
									<para>Example:</para>
									<para>'&amp;print=1'</para>
									<para>'&amp;sword_list[]=word1&amp;sword_list[]=word2'</para>
									<para/>
									<para>Applications:</para>
									<para>This is very useful &#x2013; for example &#x2013; when linking to pages from a search result. The search words are stored in the register-key SWORD_PARAMS and can be insert directly like this:</para>
									<para>.additionalParams.data = register:SWORD_PARAMS</para>
									<para/>
									<para>NOTE: This is only active for internal links!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>addQueryString</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Add the QUERY_STRING to the start of the link. Notice that this does not check for any duplicate parameters! This is not a problem (only the last parameter of the same name will be applied), but enable "config.uniqueLinkVars" if you still don't like it.</para>
									<para/>
									<para>.method: If set to to GET or POST then then the parsed query arguments (GET or POST data) will be used. This settings are useful if you use URL processing extensions like Real URL, which translate part of the path into query arguments.</para>
									<para>It's also possible to get both, POST and GET data, on setting this to</para>
									<para>"POST,GET" or "GET,POST". The last method in this sequence takes</para>
									<para>precedence and overwrites the parts that are also present for the first</para>
									<para>method.</para>
									<para/>
									<para>.exclude: List of query arguments to exclude from the link (eg L or cHash).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>jumpurl</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Decides if the link should call the script with the jumpurl parameter in order to register any clicks in the statistics. </para>
									<para>This works the same way as "filelink.jumpurl" does &#x2013; for more details see the description there.</para>
									<para/>
									<para>Example:</para>
									<para/>
									<para>lib.parseFunc_RTE.tags.link {</para>
									<para>&#xA0; typolink.jumpurl = 1</para>
									<para>&#xA0; typolink.jumpurl.secure = 1</para>
									<para>&#xA0; typolink.jumpurl.secure.mimeTypes = pdf=application/pdf, doc=application/msword, png=image/png, gif=image/gif, jpg=image/jpg</para>
									<para>}</para>
									<para>These settings in the TS template will make any link to an internal file inserted in the RTE be rendered as a secure file download.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the links.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagBeforeWrap</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the link is first wrapped with ".wrap" and then the &lt;A&gt;-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>parameter</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This is the main data that is used for creating the link. It can be the id of a page, the URL of some external page, an e-mail address or a reference to a file on the server. On top of this there can be additional information for specifying a target, a class and a title. Below are a few examples followed by full explanations.</para>
									<para/>
									<para>Examples:</para>
									<para/>
									<para>parameter = 51</para>
									<para>Most simple. Will create a link page 51.</para>
									<para/>
									<para>parameter = 51 _blank specialLink "Very important information"</para>
									<para>A full example. A link to page 51 that will open in a new window. The link will a class attribute with value "specialLink" and a title attribute reading "Very important information". So the result will be the following:</para>
									<para/>
									<para>&lt;a href="?id=51" target="_blank" class="specialLink" title="Very important information"&gt;</para>
									<programlisting/>
									<para>parameter = http://typo3.org/ - specialLink</para>
									<para>An external link with a class attribute. Note the dash (-) that replaces the second value (the target). This makes it possible to define a class (third value) without having to define a class.</para>
									<para/>
									<para>parameter = info@typo3.org - - "Send a mail to main TYPO3 contact"</para>
									<para>Create a mailto link with a title attribute (but no target and no class)</para>
									<para/>
									<para>As you can see from the examples, each significant part of the parameter string is separated by a space. Values that can themselves contain spaces must be enclosed in double quotes. Each of these values are described in more detail below.</para>
									<para/>
									<para>Destination</para>
									<para>The first value is the destination of the link. If there's a @ it will be considered to be a mail address and a mailto link will be created. If the value contains a dot (.) before the first slash (/) or a double slash (//) or if a scheme (like http) is found inside it, the link will be considered to be an external one. If there's a slash but not a dot before it, it is considered to be a path to a file and link is made to it (even if it doesn't exist as it must consider that it might be a speaking URL). In all other cases it is assumed that the value is either a page id and a page alias and a link is made to that page, if it exists.</para>
									<para/>
									<para>In the case of a link to a page, the value can be more complex than just a number or an alias. There can be three "sub-values" separated by commas. Here's an example:</para>
									<para/>
									<para>typolink.parameter = 51,100,&amp;test=1 - - "RSS Feed"</para>
									<para/>
									<para>The first value is the page id, the second is the type, the third will override the "additionalParams" property. It's also possible to specify a section that will override the section property. If the section mark is an integer, it will be considered as a pointer to a tt_content record. If not, it's used as is. If there's only a section mark, the link is made to the current page. </para>
									<para/>
									<para>Examples:</para>
									<para/>
									<para>typolink.parameter = 51#345</para>
									<para>Create a link to page 51 with an anchor to tt_content element number 345</para>
									<para/>
									<para>typolink.parameter = #top</para>
									<para>Create a link to the current page with an anchor called "top".</para>
									<para/>
									<para>It's also possible to direct the typolink to use a custom function (a "link handler") to build the link. This is described in more details below this table.</para>
									<para/>
									<para>Target or popup settings</para>
									<para>Targets are normally defined the properties described above (extTarget, fileTarget and target) but it is possible to override them by explicitly defining a target in the parameter property. It's possible to use a dash (-) to skip this value when one wants to define a third or fourth value, but no target (see examples above).</para>
									<para>Instead of a target, this second value can be used to define the parameters of a JavaScript popup window into which the link will be opened (using window.open). The height and width of the window can be defined, as well as additional parameters to be passed to the JavaScript function. Also see property "Jswindow".</para>
									<para/>
									<para>Examples:</para>
									<para/>
									<para>typolink.parameter = 51 400x300</para>
									<para>Open page 51 in a popup window measuring 400 by 300 pixels</para>
									<para/>
									<para>typolink.parameter = 51 400x300:resizable=0,location=1</para>
									<para>Same as above, but window will not be resizable and will show the location bar</para>
									<para/>
									<para>Class</para>
									<para>The third value can be used to define a class name for the link tag. This class is inserted in the tag before any other value from the "ATagParams" property. Beware of conflicting class attributes. It's possible to use a dash (-) to skip this value when one wants to define a fourth value, but no class (see examples above).</para>
									<para/>
									<para>Title</para>
									<para>The standard way of defining the title attribute of the link would be to use the "title" property or even the "ATagParams" property. However it can also be set in this fourth value, in which case it will override the other settings. Note that the title should be wrapped in double quotes (") if it contains blanks.</para>
									<para/>
									<para/>
									<para>Note: When used from parseFunc, the value should not be defined explicitly, but imported using:</para>
									<para/>
									<para>typolink.parameter.data = parameters : allParams</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceAbsoluteUrl</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Forces links to internal pages to be absolute, thus having a proper URL scheme and domain prepended.</para>
									<para/>
									<para>Additional property:</para>
									<para>.scheme: Defines the URL scheme to be used (https or http). http is the default value.</para>
									<para/>
									<para/>
									<para>Example:</para>
									<para>typolink {</para>
									<para>&#xA0; parameter = 13</para>
									<para>&#xA0; forceAbsoluteUrl = 1</para>
									<para>&#xA0; forceAbsoluteUrl.scheme = https</para>
									<para>}</para>
									<para/>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>title</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the title parameter of the A-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSwindow_params</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Preset values for opening the window. This example lists almost all possible attributes:</para>
									<para>status=1,menubar=1,scrollbars=1,resizable=1,location=1,directories=1,toolbar=1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>returnLast</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If set to "url" then it will return the URL of the link ($this-&gt;lastTypoLinkUrl)</para>
									<para>If set to "target" it will return the target of the link.</para>
									<para>So, in these two cases you will not get the value wrapped but the url or target value returned!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>section</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>If this value is present, it's prepended with a "#" and placed after any internal url to another page in TYPO3.</para>
									<para>This is used create a link, which jumps from one page directly the section on another page.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Additional parameters</para>
									<para/>
									<para>Example:</para>
									<para>class="board"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkAccessRestrictedPages</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, typolinks pointing to access restricted pages will still link to the page even though the page cannot be accessed.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>userFunc</para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>This passes the link-data compiled by the typolink function to a user-defined function for final manipulation.</para>
									<para>The $content variable passed to the user-function (first parameter) is an array with the keys "TYPE", "TAG", "url", "targetParams" and "aTagParams". </para>
									<para>TYPE is an indication of link-kind: mailto, url, file, page</para>
									<para>TAG is the full &lt;A&gt;-tag as generated and ready from the typolink function.</para>
									<para>The latter three is combined into the 'TAG' value after this formula:</para>
									<para/>
									<para>&lt;a href="' . $finalTagParts['url'] . '"' .</para>
									<para>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;$finalTagParts['targetParams'] .</para>
									<para>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;$finalTagParts['aTagParams'] . '&gt;</para>
									<para/>
									<para>The userfunction must return an &lt;A&gt;-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;typolink]</para>
				<section>
					<title>Using link handlers</title>
					<para>A feature (added in TYPO3 4.1) allows you to register a link handler for a keyword you define. For example, you can link to a page with id 34 with "&lt;link 34&gt;" in a typical bodytext field which converts &lt;link&gt; tags with "-&gt;typolink". But what if you have an extension, "pressrelease", and wanted to link to a press release item displayed by a plugin on some page you don't remember? With this feature it's possible to create the logic for this in that extension.</para>
					<para>So, in a link field (the "parameter" value for -&gt;typolink) you could enter "pressrelease:123":</para>
					<para/>
					<para>
						<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}10000000000002070000003239905F2B.png" width=""/>
					</para>
					<para>Some TypoScript will usually transfer this value to the "parameter" attribute of the -&gt;typolink call. When "pressrelease:123" enters -&gt;typolink as the "parameter" it will be checked if "pressrelease" is a keyword with which a link handler is associated and if so, that handler is allowed to create the link.</para>
					<para>Registering the handler for keyword "pressrelease" is done like this:</para>
					<programlisting>$TYPO3_CONF_VARS['SC_OPTIONS']['tslib/class.tslib_content.php']['typolinkLinkHandler']['pressrelease'] = 'EXT:pressrelease/class.linkHandler.php:&amp;tx_linkHandler';</programlisting>
					<para/>
					<para>The class file "pressrelease/class.linkHandler.php" contains the class "tx_linkHandler" which could look like this:</para>
					<para/>
					<programlisting>class tx_linkHandler {</programlisting>
					<programlisting>function main($linktxt, $conf, $linkHandlerKeyword, $linkHandlerValue, $link_param, &amp;$pObj) {</programlisting>
					<programlisting>$lconf = array();</programlisting>
					<programlisting>$lconf['useCacheHash'] = 1;</programlisting>
					<programlisting>$lconf['parameter'] = 34;</programlisting>
					<programlisting>$lconf['additionalParams'] = '&amp;tx_pressrelease[showUid]='.rawurlencode($linkHandlerValue);</programlisting>
					<programlisting/>
					<programlisting>return $pObj-&gt;typoLink($linktxt, $lconf);</programlisting>
					<programlisting>}</programlisting>
					<programlisting>}</programlisting>
					<para/>
					<para>In this function, the value part after the keyword is set as the value of a GET parameter, "&amp;tx_pressrelease[showUid]" and the "parameter" value of a new -&gt;typolink call is set to "34" which assumes that on page ID 34 a plugin is put that will display pressrelease 123 when called with &amp;tx_pressrelease[showUid]=123. In addition you can see the "userCacheHash" attribute for the typolink function used in order to produce a cached display. </para>
					<para>The link that results from this operation will look like this:</para>
					<programlisting>&lt;a href="index.php?id=34&amp;amp;tx_pressrelease[showUid]=123%3A456&amp;amp;cHash=c0551fead6" &gt;</programlisting>
					<para/>
					<para>The link would be encoded with RealURL and respect config.linkVars as long as -&gt;typolink is used to generate the final URL.</para>
				</section>
			</section>
			<section>
				<title>textStyle</title>
				<para>This is used to style text with a bunch of standard options + some site-specific.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>align.field</para>
								</entry>
								<entry>
									<para>align</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>face.field</para>
									<para/>
									<para/>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
									<para/>
									<para>[1] = "Times New Roman";</para>
									<para>[2] = "Verdana,Arial,Helvetica,Sans serif";</para>
									<para>[3] = "Arial,Helvetica,Sans serif";</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>face.default</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>[default] = User defined</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>size.field</para>
									<para/>
									<para/>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
									<para/>
									<para>[1] = 1;</para>
									<para>[2] = 2;</para>
									<para>[3] = 3;</para>
									<para>[10] = "+1";</para>
									<para>[11] = "-1";</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>size.default</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>[default] = User defined</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>color.field</para>
									<para/>
									<para/>
									<para/>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
									<para/>
									<para>See "content.php" for the colors available</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>color.default</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>[default] = User defined</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>color.1</para>
									<para>color.2</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>[1],[2] = User defined</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>properties.field</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
									<para/>
									<para>The property values goes like this:</para>
									<para>bit 0: &lt;B&gt;</para>
									<para>bit 1: &lt;I&gt;</para>
									<para>bit 2: &lt;U&gt;</para>
									<para>bit 3: (uppercase)</para>
									<para/>
									<para>Thus a value of 5 would result in bold and underlined text</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>properties.default</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>[default] = User defined (This value will be used whenever ".field" is false!)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>altWrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>If this value is set, the wrapping with a font-tag based on font,size and color is NOT done. Rather the element is wrapped with this value.</para>
									<para>Use it to assign a stylesheet by setting this value to eg.</para>
									<para/>
									<para>&lt;div class="text"&gt; | &lt;/div&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;textStyle]</para>
			</section>
			<section>
				<title>encapsLines</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>encapsTagList</para>
								</entry>
								<entry>
									<para>list of strings</para>
								</entry>
								<entry>
									<para>List of tags which qualify as encapsulating tags. Must be lowercase.</para>
									<para/>
									<para>Example:</para>
									<para>encapsTagList = div, p</para>
									<para/>
									<para>This setting will recognize the red line below as encapsulated lines:</para>
									<para/>
									<para>First line of text</para>
									<para>Some &lt;div&gt;text&lt;/div&gt;</para>
									<para>&lt;p&gt;Some text&lt;/p&gt;</para>
									<para>&lt;div&gt;Some text&lt;/div&gt;</para>
									<para>&lt;B&gt;Some text&lt;/B&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>remapTag.[tagname]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Enter a new tag name here if you wish the tagname of any encapsulation to be unified to a single tag name.</para>
									<para/>
									<para>For instance, setting this value to "remapTags.P=DIV" would convert:</para>
									<para/>
									<para>&lt;p&gt;Some text&lt;/p&gt;</para>
									<para>&lt;div&gt;Some text&lt;/div&gt;</para>
									<para/>
									<para>to </para>
									<para/>
									<para>&lt;div&gt;Some text&lt;/div&gt;</para>
									<para>&lt;div&gt;Some text&lt;/div&gt;</para>
									<para/>
									<para>([tagname] is in uppercase.)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>addAttributes.[tagname]</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>Attributes to set in the encapsulation tag.</para>
									<para/>
									<para>Example:</para>
									<para>addAttributes.P {</para>
									<para>&#xA0; style=padding-bottom:0px; margin-top:1px; margin-bottom:1px;</para>
									<para>&#xA0; align=center</para>
									<para>}</para>
									<para/>
									<para>([tagname] is in uppercase.)</para>
									<para/>
									<para>.setOnly = </para>
									<para>exists : This will set the value ONLY if the property does not already exist</para>
									<para>blank : This will set the value ONLY if the property does not already exist OR is blank ("")</para>
									<para/>
									<para>Default is to always override/set the attributes value.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>removeWrapping</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then all existing wrapping will be removed.</para>
									<para/>
									<para>This:</para>
									<para/>
									<para>First line of text</para>
									<para>Some &lt;div&gt;text&lt;/div&gt;</para>
									<para>&lt;p&gt;Some text&lt;/p&gt;</para>
									<para>&lt;div&gt;Some text&lt;/div&gt;</para>
									<para>&lt;B&gt;Some text&lt;/B&gt;</para>
									<para/>
									<para>becomes this:</para>
									<para/>
									<para>First line of text</para>
									<para>Some &lt;div&gt;text&lt;/div&gt;</para>
									<para>Some text</para>
									<para>Some text</para>
									<para>&lt;B&gt;Some text&lt;/B&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrapNonWrappedLines</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>Wrapping for non-encapsulated lines</para>
									<para/>
									<para>Example:</para>
									<para>.wrapNonWrappedLines = &lt;P&gt;|&lt;/P&gt;</para>
									<para/>
									<para>This:</para>
									<para/>
									<para>First line of text</para>
									<para>&lt;p&gt;Some text&lt;/p&gt;</para>
									<para/>
									<para>becomes this:</para>
									<para/>
									<para>&lt;P&gt;First line of text&lt;/P&gt;</para>
									<para>&lt;p&gt;Some text&lt;/p&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>innerStdWrap_all</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the content inside all lines, whether they are encapsulated or not.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>encapsLinesStdWrap.[tagname]</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the content inside all encapsulated lines.</para>
									<para>([tagname] is in uppercase.)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>defaultAlign</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>If set, this value is set as the default "align" value of the wrapping tags, both from .encapsTagList, .bypassEncapsTagList and .nonWrappedTag</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>nonWrappedTag</para>
								</entry>
								<entry>
									<para>tagname</para>
								</entry>
								<entry>
									<para>For all non-wrapped lines, you can set here which tag it should be wrapped in. Example would be "P". This is an alternative to .wrapNonWrappedLines and has the advantage that it's attributes are set by .addAttributes as well as defaultAlign. Thus you can easier match the wrapping tags used for non-wrapped and wrapped lines.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;encapsLines]</para>
				<section>
					<title>Example:</title>
					<programlisting>encapsLines {</programlisting>
					<programlisting>&#xA0; encapsTagList = div,p</programlisting>
					<programlisting>&#xA0; remapTag.DIV = P</programlisting>
					<programlisting>&#xA0; wrapNonWrappedLines = &lt;P&gt;|&lt;/P&gt;</programlisting>
					<programlisting>&#xA0; innerStdWrap_all.ifEmpty = &amp;nbsp;</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<para>This example shows how to handle content rendered by TYPO3 and stylesheets where the &lt;P&gt; tag is used to encapsulate each line.</para>
					<para>Say, you have made this content with the Rich Text Editor:</para>
					<programlisting>This is line # 1 </programlisting>
					<programlisting/>
					<programlisting>[Above is an empty line!] </programlisting>
					<programlisting>&lt;DIV align=right&gt;This line is right-aligned&lt;/DIV&gt;</programlisting>
					<programlisting/>
					<para>After being processed by encapsLines with the above configuration, the content looks like this:</para>
					<programlisting>&lt;P&gt;This is line # 1 &lt;/P&gt;</programlisting>
					<programlisting>&lt;P&gt;&amp;nbsp;&lt;/P&gt;</programlisting>
					<programlisting>&lt;P&gt;[Above is an empty line!] &lt;/P&gt;</programlisting>
					<programlisting>&lt;P align="right"&gt;This line is right-aligned&lt;/P&gt; </programlisting>
					<programlisting/>
					<para>Each line is nicely wrapped with &lt;P&gt; tags. The line from the database which was already wrapped (but in &lt;DIV&gt;-tags) has been converted to &lt;P&gt;, but keeps it's alignment. Overall, notice that the Rich Text Editor ONLY stored the line which was in fact right-aligned - every other line from the RTE was stored without any wrapping tags, so that the content in the database remains as human readable as possible.</para>
				</section>
				<section>
					<title>Example:</title>
					<programlisting># Make sure nonTypoTagStdWrap operates on content outside &lt;typolist&gt; and &lt;typohead&gt; only:</programlisting>
					<programlisting>tt_content.text.20.parseFunc.tags.typolist.breakoutTypoTagContent = 1</programlisting>
					<programlisting>tt_content.text.20.parseFunc.tags.typohead.breakoutTypoTagContent = 1</programlisting>
					<programlisting># ... and no &lt;BR&gt; before typohead.</programlisting>
					<programlisting>tt_content.text.20.parseFunc.tags.typohead.stdWrap.wrap &gt;</programlisting>
					<programlisting># Setting up nonTypoTagStdWrap to wrap the text with P-tags</programlisting>
					<programlisting>tt_content.text.20.parseFunc.nonTypoTagStdWrap &gt;</programlisting>
					<programlisting>tt_content.text.20.parseFunc.nonTypoTagStdWrap.encapsLines {</programlisting>
					<programlisting>&#xA0; encapsTagList = div,p</programlisting>
					<programlisting>&#xA0; remapTag.DIV = P</programlisting>
					<programlisting>&#xA0; wrapNonWrappedLines = &lt;P style="margin:0 0 0;"&gt;|&lt;/P&gt;</programlisting>
					<programlisting/>
					<programlisting>&#xA0; # Forcing these attributes onto the encapsulation-tags if any</programlisting>
					<programlisting>&#xA0; addAttributes.P {</programlisting>
					<programlisting>&#xA0; &#xA0; style=margin:0 0 0;</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; innerStdWrap_all.ifEmpty = &amp;nbsp;</programlisting>
					<programlisting>&#xA0; innerStdWrap_all.textStyle &lt; tt_content.text.20.textStyle</programlisting>
					<programlisting>}</programlisting>
					<programlisting># finally removing the old textstyle formatting on the whole bodytext part.</programlisting>
					<programlisting>tt_content.text.20.textStyle &gt;</programlisting>
					<programlisting># ... and &lt;BR&gt;-tag after the content is not needed either...</programlisting>
					<programlisting>tt_content.text.20.wrap &gt;</programlisting>
					<para/>
					<para>This is an example of how to wrap traditional tt_content bodytext with &lt;P&gt; tags, setting the line-distances to regular space like that generated by a &lt;BR&gt; tag, but staying compatible with the RTE features such as assigning classes and alignment to paragraphs.</para>
				</section>
			</section>
			<section>
				<title>tableStyle</title>
				<para>This is used to style a table-tag. The input is wrapped by this table-tag</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>align</para>
								</entry>
								<entry>
									<para>align /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>border</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cellspacing</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cellpadding</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>color.field</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Set to field name from the $cObj-&gt;data-array</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>color.default</para>
									<para>color.1</para>
									<para>color.2</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>[default],[1],[2] = User defined</para>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>&lt;TABLE&gt;-params</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;tableStyle]</para>
				<section>
					<title>Example:</title>
					<programlisting>styles.content.tableStyle {</programlisting>
					<programlisting>&#xA0; align.field = text_align</programlisting>
					<programlisting>&#xA0; border.field = table_border</programlisting>
					<programlisting>&#xA0; cellspacing.field = table_cellspacing</programlisting>
					<programlisting>&#xA0; cellpadding = 1</programlisting>
					<programlisting/>
					<programlisting>&#xA0; color.field = table_bgColor</programlisting>
					<programlisting>&#xA0; color.default = {$styles.content.tableStyle.color}</programlisting>
					<programlisting>&#xA0; color.1 = {$styles.content.tableStyle.color1}</programlisting>
					<programlisting>&#xA0; color.2 = {$styles.content.tableStyle.color2}</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>addParams</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>_offset</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Use this to define which tag you want to manipulate.</para>
									<para>1 is the first tag in the input, 2 is the second, -1 is the last, -2 is the second last</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>(array of strings)</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This defines the content of each added property to the tag.</para>
									<para>If there is a tag-property with this name already (case-sensitive!) that property will be overridden! </para>
									<para>If the returned value is a blank string (but not zero!) then the existing (if any) property will not be overridden.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;addParams]</para>
				<section>
					<title>Example:</title>
					<programlisting>page.13 = HTML</programlisting>
					<programlisting>page.13.value = &lt;tr&gt;&lt;td valign=top&gt;</programlisting>
					<programlisting>page.13.value.addParams.bgcolor = {$menuCol.bgColor}</programlisting>
					<programlisting>page.13.value.addParams._offset = -1 </programlisting>
					<programlisting/>
					<para>Result example:</para>
					<programlisting>&lt;tr&gt;&lt;td valign="top" bgcolor="white"&gt;</programlisting>
					<programlisting/>
					<para>(This example adds the 'bgColor' property to the value of the HTML cObject, if the content is not "". (zero counts as a value here!))</para>
				</section>
			</section>
			<section>
				<title>filelink</title>
				<para>Input is a filename in the path "path".</para>
				<para>icon, size and file are rendered in the listed order.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>path</para>
								</entry>
								<entry>
									<para>path /stdWrap</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>"uploads/media/"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>icon</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Set if icon should be shown</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>icon_image_ext_list</para>
								</entry>
								<entry>
									<para>list of image extensions /stdWrap</para>
								</entry>
								<entry>
									<para>This is the extensions that should render as thumbnails instead of icons.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>iconCObject</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>Enter a cObject to use alternatively for the icons, e.g. IMAGE type.</para>
									<para>If this is set, it'll substitute the use of the thumbs-script for display of thumbnails.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>icon_link</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If the icon should be linked also</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>labelStdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap options for the label (by default the label is the filename) before being wrapped with the A-tags.</para>
									<para>Use this to eg. import another label from a database field or such.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the links.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagBeforeWrap</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the link is first wrapped with ".wrap" and then the &lt;A&gt;-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap of the label (by default the label is the filename) after having been wrapped with A-tag!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>size</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Set if size should be shown</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>jumpurl</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Decides if the link should call the script with the jumpurl parameter in order to register any clicks in the stat.</para>
									<para>This has the advantage that any clicks on the file will register in the stat.</para>
									<para>The disadvantage is, that users cant right-click and select "Save Target As" in the browser.</para>
									<para/>
									<para>Extra properties:</para>
									<para>&#xA0; .secure = [boolean]</para>
									<para>If set, then the file pointed to by jumpurl is NOT redirected to, but rather it's read from the file and returned with a correct header. This option adds a hash and locationData to the URL and there MUST be access to the record in order to download the file. If the file position on the server is furthermore secured by a .htaccess file preventing ANY access, you've got secure download here!</para>
									<para/>
									<para>&#xA0; .secure.mimeTypes = list of mimetypes</para>
									<para>Syntax: [ext] = [mimetype]</para>
									<para/>
									<para>&#xA0; .parameter = [string/stdWrap]</para>
									<para>By default the jumpurl link will use the current pid and typeNum. </para>
									<para>If you need alternative values (e.g. for logging) you can specify them here.</para>
									<para>For options see typolink.parameter.</para>
									<para/>
									<para>Example:</para>
									<para>jumpurl.secure = 1</para>
									<para>jumpurl.secure.mimeTypes = pdf=application/pdf, doc=application/msword</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Additional parameters</para>
									<para/>
									<para>Example:</para>
									<para>class="board"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>removePrependedNumbers</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>if set, any 2-digit prepended numbers ("eg _23") in the filename is removed.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>altText</para>
									<para>titleText</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>For icons (image made with "iconCObject" must have their own properties)</para>
									<para>If no alttext is specified, it will use an empty alttext</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>emptyTitleHandling</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Value can be "keepEmpty" to preserve an empty title attribute, or "useAlt" to use the alt attribute instead.</para>
								</entry>
								<entry>
									<para>useAlt</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>longdescURL</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>For icons (image made with "iconCObject" must have their own properties)</para>
									<para/>
									<para>"longdesc" attribute (URL pointing to document with extensive details about image).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;filelink]</para>
				<section>
					<title>Example:</title>
					<programlisting>&#xA0; &#xA0; 1.filelink {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; path = uploads/media/</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; icon = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; icon.wrap = &lt;td&gt; | &lt;/td&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; size = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; size.wrap = &lt;td&gt; | &lt;/td&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; file.fontTag = {$styles.content.uploads.wrap}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; file.wrap = &lt;td&gt; | &lt;/td&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; jumpurl = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; target = _blank</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; stdWrap = &lt;tr&gt; | &lt;/tr&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<para/>
				</section>
			</section>
			<section>
				<title>numberFormat</title>
				<para>With this property you can format a float value and display it as you want, for example as a price. It is a wrapper for the number_format() function of PHP.</para>
				<para>You can define how many decimals you want and which separators you want for decimals and thousands.</para>
				<para>Since the properties are finally used by the PHP function number_format(), you need to make sure that they are valid parameters for that function. Consult the PHP manual, if unsure.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>decimals</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Number of decimals the formatted number will have. Defaults to 0, so that your input will in that case be rounded up or down to the next integer.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>dec_point</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Character that divides the decimals from the rest of the number. Defaults to ".".</para>
								</entry>
								<entry>
									<para>.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>thousands_sep</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Character that divides the thousands of the number. Defaults to ","; set an empty value to have no thousands separator.</para>
								</entry>
								<entry>
									<para>,</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;numberFormat]</para>
				<section>
					<title>Examples:</title>
					<programlisting>lib.myPrice = TEXT</programlisting>
					<programlisting>lib.myPrice {</programlisting>
					<programlisting>&#xA0; value = 0.8</programlisting>
					<programlisting>&#xA0; numberFormat {</programlisting>
					<programlisting>&#xA0; &#xA0; decimals = 2</programlisting>
					<programlisting>&#xA0; &#xA0; dec_point.cObject = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; dec_point.cObject {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; value = .</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; lang.de = ,</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; noTrimWrap = || &amp;euro;|</programlisting>
					<programlisting>}</programlisting>
					<programlisting># Will basically result in "0.80 &#x20AC;", but for German in "0,80 &#x20AC;".</programlisting>
					<programlisting/>
					<programlisting>lib.carViews = CONTENT</programlisting>
					<programlisting>lib.carViews {</programlisting>
					<programlisting>&#xA0; table = tx_mycarext_car</programlisting>
					<programlisting>&#xA0; select.pidInList = 42</programlisting>
					<programlisting>&#xA0; renderObj = TEXT</programlisting>
					<programlisting>&#xA0; renderObj {</programlisting>
					<programlisting>&#xA0; &#xA0; field = views</programlisting>
					<programlisting>&#xA0; &#xA0; # By default use 3 decimals or</programlisting>
					<programlisting>&#xA0; &#xA0; # use the number given by the Get/Post variable precisionLevel, if set.</programlisting>
					<programlisting>&#xA0; &#xA0; numberFormat.decimals = 3</programlisting>
					<programlisting>&#xA0; &#xA0; numberFormat.decimals.override.data = GP:precisionLevel</programlisting>
					<programlisting>&#xA0; &#xA0; numberFormat.dec_point = ,</programlisting>
					<programlisting>&#xA0; &#xA0; numberFormat.thousands_sep = .</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>}</programlisting>
					<programlisting># Could result in something like "9.586,007".</programlisting>
				</section>
			</section>
			<section>
				<title>parseFunc</title>
				<para>This object is used to parse some content for stuff like special typo tags, the "makeLinks"-things and so on...</para>
				<section>
					<title>Example:</title>
					<para>This example takes the content of the field "bodytext" and parses it through the makelinks-functions and substitutes all &lt;LINK&gt; and &lt;TYPOLIST&gt;-tags with something else. </para>
					<programlisting>tt_content.text.default {</programlisting>
					<programlisting>&#xA0; 20 = TEXT</programlisting>
					<programlisting>&#xA0; 20.field = bodytext</programlisting>
					<programlisting>&#xA0; 20.wrap = | &lt;BR&gt;</programlisting>
					<programlisting>&#xA0; 20.brTag = &lt;br&gt;</programlisting>
					<programlisting>&#xA0; 20.parseFunc {</programlisting>
					<programlisting>&#xA0; &#xA0; makelinks = 1</programlisting>
					<programlisting>&#xA0; &#xA0; makelinks.http.keep = path</programlisting>
					<programlisting>&#xA0; &#xA0; makelinks.http.extTarget = _blank</programlisting>
					<programlisting>&#xA0; &#xA0; makelinks.mailto.keep = path</programlisting>
					<programlisting>&#xA0; &#xA0; tags {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; link = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; link {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.extTarget = _blank</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.target={$cLinkTagTarget} </programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.wrap = &lt;B&gt;&lt;FONT color=red&gt;|&lt;/FONT&gt;&lt;/B&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.parameter.data = parameters : allParams</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; }</programlisting>
					<programlisting/>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist &lt; tt_content.bullets.default.20</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.trim = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.field &gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>externalBlocks </para>
									</entry>
									<entry>
										<para>list of tagnames/+properties</para>
									</entry>
									<entry>
										<para>This allows you to pre-split the content passed to parseFunc so that only content outside the blocks with the given tags is parsed.</para>
										<para>Extra properties:</para>
										<para>.[tagname] {</para>
										<para>&#xA0; callRecursive = [boolean]; If set, the content of the block is directed into parseFunc again. Otherwise the content is just passed through with no other processing than stdWrap (see below)</para>
										<para>&#xA0; callRecursive.dontWrapSelf = [boolean]; If set, the tags of the block is not wrapped around the content returned from parseFunc.</para>
										<para>&#xA0; callRecursive.alternativeWrap = Alternative wrapping instead of the original tags.</para>
										<para>&#xA0; callRecursive.tagStdWrap = -&gt;stdWrap processing of the block-tags.</para>
										<para>&#xA0; stdWrap = -&gt;stdWrap processing of the whole block (regardless of whether callRecursive was set.)</para>
										<para>&#xA0; stripNLprev = [boolean]; Strips off last linebreak of the previous outside block</para>
										<para>&#xA0; stripNLnext = [boolean]; Strips off first linebreak of the next outside block</para>
										<para>&#xA0; stripNL = [boolean]: Does both of the above.</para>
										<para/>
										<para>&#xA0; &#xA0;HTMLtableCells = [boolean]; If set, then the content is expected to be a table and every table-cell is traversed.</para>
										<para>&#xA0; &#xA0;# Below, default is all cells and 1,2,3... overrides for specific cols.</para>
										<para>&#xA0; &#xA0;HTMLtableCells.[default/1/2/3/...] {</para>
										<para>&#xA0; &#xA0; &#xA0;callRecursive = [boolean]; The content is parsed through current parseFunc</para>
										<para>&#xA0; &#xA0; &#xA0; stdWrap = -&gt;stdWrap processing of the content in the cell</para>
										<para>&#xA0; &#xA0; &#xA0; tagStdWrap = -&gt; The &lt;TD&gt; tag is processed by -&gt;stdWrap</para>
										<para>&#xA0; &#xA0;}</para>
										<para>&#xA0; &#xA0;HTMLtableCells.addChr10BetweenParagraphs = [boolean]; If set, then all &lt;/P&gt;&lt;P&gt; appearances will have a chr(10) inserted between them</para>
										<para>}</para>
										<para/>
										<para>Example:</para>
										<para>This example is used to split regular bodytext content so that tables and blockquotes in the bodytext are processed correctly. The blockquotes are passed into parseFunc again (recursively) and further their top/bottom margins are set to 0 (so no apparent line breaks are seen)</para>
										<para>The tables are also displayed with a number of properties of the cells overridden.</para>
										<para>tt_content.text.20.parseFunc.externalBlocks {</para>
										<para>&#xA0; blockquote.callRecursive=1</para>
										<para>&#xA0; blockquote.callRecursive.tagStdWrap.HTMLparser = 1</para>
										<para>&#xA0; blockquote.callRecursive.tagStdWrap.HTMLparser {</para>
										<para>&#xA0; &#xA0; tags.blockquote.fixAttrib.style.list = margin-bottom:0;margin-top:0;</para>
										<para>&#xA0; &#xA0; tags.blockquote.fixAttrib.style.always=1</para>
										<para>&#xA0; }</para>
										<para>&#xA0; blockquote.stripNLprev=1</para>
										<para>&#xA0; blockquote.stripNLnext=1</para>
										<para/>
										<para>&#xA0; table.stripNL=1</para>
										<para>&#xA0; table.stdWrap.HTMLparser = 1</para>
										<para>&#xA0; table.stdWrap.HTMLparser {</para>
										<para>&#xA0; &#xA0; tags.table.overrideAttribs = border=0 cellpadding=2 cellspacing=1 style="margin-top: 10px; margin-bottom: 10px;"</para>
										<para>&#xA0; &#xA0; tags.tr.allowedAttribs=0</para>
										<para>&#xA0; &#xA0; tags.td.overrideAttribs = valign="top" bgcolor="#eeeeee" style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 10px;"</para>
										<para>&#xA0; }</para>
										<para>}</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>constants</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>The top-level defined constants will be substituted in the text. The constant-name is wrapped in "###".</para>
										<para/>
										<para>Example:</para>
										<para>constants.EMAIL = 
											<olink targetdocent="mailto:email@email.com">email@email.com</olink>
										</para>
										<para/>
										<para>(NOTE: This is top-level TypoScript!)</para>
										<para>All cases of the string ###EMAIL### will be substituted in the text. The constants are defined as a top-level object. </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>short</para>
									</entry>
									<entry>
										<para>array of strings</para>
									</entry>
									<entry>
										<para>Like constants above, but local.</para>
										<para/>
										<para>Example:</para>
										<para>This substitutes all occurrences of "T3" with "TYPO3 CMS" and "T3web" with a link to typo3.com.</para>
										<para>short {</para>
										<para>&#xA0; T3 = TYPO3 CMS</para>
										<para>&#xA0; T3web = &lt;a href="http://typo3.com"&gt;typo3&lt;/a&gt;</para>
										<para>}</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>plainTextStdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>This is stdWrap properties for all non-tag content. </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>userFunc</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>This passes the non-tag content to a function of your own choice. Similar to e.g. .postUserFunc in stdWrap.</para>
										<para>Remember the function name must possibly be prepended "user_"</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>nonTypoTagStdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Like .plainTextStdWrap. Difference: </para>
										<para>.plainTextStdWrap works an ALL non-tag pieces in the text. .nonTypoTagStdWrap is post processing of all text (including tags) between special TypoTags (unless .breakoutTypoTagContent is not set for the TypoTag)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>nonTypoTagUserFunc</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Like .userFunc. Differences is (like nonTypoTagStdWrap) that this is post processing of all content pieces around TypoTags while .userFunc processes all non-tag content. (Notice: .breakoutTypoTagContent must be set for the TypoTag if it's excluded from nonTypoTagContent)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>sword</para>
									</entry>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>Marks up any words from the GET-method send array sword_list[] in the text. The word MUST be at least two characters long!</para>
										<para>NOTE: works only with $GLOBALS['TSFE']-&gt;no_cache==1</para>
									</entry>
									<entry>
										<para>&lt;font color="red"&gt;|&lt;/font&gt;</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>makelinks</para>
									</entry>
									<entry>
										<para>boolean / -&gt;makelinks</para>
									</entry>
									<entry>
										<para>Convert webadresses prefixed with "http://" and mail-adresses prefixed with "mailto:" to links.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>tags</para>
									</entry>
									<entry>
										<para>-&gt;tags</para>
									</entry>
									<entry>
										<para>Here you can define custom tags that will parse the content to something.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>allowTags</para>
									</entry>
									<entry>
										<para>list of strings</para>
									</entry>
									<entry>
										<para>List of tags, which are allowed to exist in code! </para>
										<para>Highest priority: If a tag is found in allowTags, denyTags is ignored!!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>denyTags</para>
									</entry>
									<entry>
										<para>list of strings</para>
									</entry>
									<entry>
										<para>List of tags, which may NOT exist in code! (use "*" for all.)</para>
										<para>Lowest priority: If a tag is NOT found in allowTags, denyTags is checked. If denyTags is not "*" and the tag is not found in the list, the tag may exist!</para>
										<para/>
										<para>Example:</para>
										<para>This allows &lt;B&gt;, &lt;I&gt;, &lt;A&gt; and &lt;IMG&gt; -tags to exist</para>
										<para>.allowTags = b,i,a,img</para>
										<para>.denyTags = *</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>if</para>
									</entry>
									<entry>
										<para>-&gt;if</para>
									</entry>
									<entry>
										<para>if "if" returns false the input value is not parsed, but returned directly.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;parseFunc]</para>
				</section>
			</section>
			<section>
				<title>makelinks</title>
				<para>makelinks substitutes all appearances of </para>
				<para>http://www.webaddress.rld </para>
				<para>mailto:name@email.rld </para>
				<para>... to a real linktag.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>http.extTarget</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>The target of the link</para>
								</entry>
								<entry>
									<para>_top</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>http.wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>wrap around the link</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>http.ATagBeforeWrap</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the link is first wrapped with http.wrap and then the &lt;A&gt;-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>http.keep</para>
								</entry>
								<entry>
									<para>list: "scheme","path","query"</para>
								</entry>
								<entry>
									<para>As default the link-text will be the full domain-name of the link. </para>
									<para/>
									<para>Examples:</para>
									<para>http://www.webaddress.rld/test/doc.php?id=3 </para>
									<para>"": www.webaddress.rld</para>
									<para>"scheme": http://www.webaddress.rld</para>
									<para>"scheme,path": http://www.webaddress.rld/test/doc.php</para>
									<para>"scheme,path,query": http://www.webaddress.rld/test/doc.php?id=3</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>http.ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Additional parameters</para>
									<para/>
									<para>Example:</para>
									<para>class="board"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>mailto.wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>wrap around the link</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>mailto.ATagBeforeWrap</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the link is first wrapped with mailto.wrap and then the &lt;A&gt;-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>mailto.ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Additional parameters</para>
									<para/>
									<para>Example:</para>
									<para>class="board"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;makelinks]</para>
			</section>
			<section>
				<title/>
			</section>
			<section>
				<title>tags</title>
				<para>Used to create custom tags and define how they should be parsed. This is used in conjunction with parseFunc.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>Array...</para>
								</entry>
								<entry>
									<para>cObject +stripNL</para>
									<para>+ breakoutTypoTagContent</para>
								</entry>
								<entry>
									<para>Every entry in the Array... corresponds to a tag, that will be parsed. The elements MUST be in lowercase. </para>
									<para>Every entry must be set to a content-object.</para>
									<para>"current" is set to the content of the tag, eg &lt;TAG&gt;content&lt;/TAG&gt;: here "current" is set to "content".</para>
									<para>Parameters:</para>
									<para>Parameters of the tag is set in $cObj-&gt;parameters (key is lowercased):</para>
									<para>&lt;TAG COLOR="red"&gt;content&lt;/TAG&gt;</para>
									<para>=&gt; $cObj-&gt;parameters[color] = red </para>
									<para>Special added properties to the content-object:</para>
									<para>$cObj-&gt;parameters[allParams]: this is automatically set to the whole parameter-string of the tag, eg ' color="red"'</para>
									<para>[cObject].stripNL: is a boolean option, which tells parseFunc that NewLines before and after content of the tag should be stripped.</para>
									<para>[cObject].breakoutTypoTagContent: is a boolean option, which tells parseFunc that this block of content is breaking up the nonTypoTag content and that the content after this must be re-wrapped.</para>
									<para/>
									<para>Examples:</para>
									<para>tags.bold = TEXT</para>
									<para>tags.bold {</para>
									<para>&#xA0; current = 1</para>
									<para>&#xA0; wrap = &lt;B&gt; | &lt;/B&gt;</para>
									<para>}</para>
									<para>tags.bold.stripNL = 1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;tags]</para>
				<section>
					<title>Example:</title>
					<para>This example creates 4 custom tags. The &lt;LINK&gt;-, &lt;TYPOLIST&gt;-, &lt;GRAFIX&gt;- and &lt;PIC&gt;-tags</para>
					<para>&lt;LINK&gt; is made into a typolink and provides an easy way of creating links in text</para>
					<para>&lt;TYPOLIST&gt; is used to create bullet-lists</para>
					<para>&lt;GRAFIX&gt; will create a gif-file 90x10 pixels where the text is the content of the tag.</para>
					<para>&lt;PIC&gt; lets us place an image in the text. The content of the tag should be the image-reference in "fileadmin/"</para>
					<para/>
					<programlisting>&#xA0; &#xA0; tags {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; link = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; link {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.extTarget = _blank</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.target={$cLinkTagTarget} </programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.wrap = &lt;B&gt;&lt;FONT color=red&gt;|&lt;/FONT&gt;&lt;/B&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; typolink.parameter.data = parameters : allParams</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; }</programlisting>
					<programlisting/>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist &lt; tt_content.bullets.default.20</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.trim = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.field &gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; typolist.current = 1</programlisting>
					<programlisting/>
					<programlisting>&#xA0; &#xA0; &#xA0; grafix = IMAGE </programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; grafix {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; file = GIFBUILDER</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; file {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; XY = 90,10</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 100 = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 100.text.current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 100.offset = 5,10</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 100.nicetext = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; pic = IMAGE</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; pic.file.import = fileadmin/</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; pic.file.import.current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
				</section>
			</section>
			<section>
				<title>HTMLparser</title>
				<informaltable frame="all">
					<tgroup cols="3">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>allowTags</para>
								</entry>
								<entry>
									<para>list of tags</para>
								</entry>
								<entry>
									<para>Default allowed tags</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>tags.[tagname]</para>
								</entry>
								<entry>
									<para>boolean/-&gt;HTMLparser_tags</para>
								</entry>
								<entry>
									<para>Either set this property to 0 or 1 to allow or deny the tag. If you enter -&gt;HTMLparser_tags properties, those will automatically overrule this option, thus it's not needed then.</para>
									<para>[tagname] in lowercase.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>localNesting</para>
								</entry>
								<entry>
									<para>list of tags, must be among preserved tags</para>
								</entry>
								<entry>
									<para>List of tags (among the already set tags), which will be forced to have the nesting-flag set to true</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>globalNesting</para>
								</entry>
								<entry>
									<para>(ibid)</para>
								</entry>
								<entry>
									<para>List of tags (among the already set tags), which will be forced to have the nesting-flag set to "global"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>rmTagIfNoAttrib</para>
								</entry>
								<entry>
									<para>(ibid)</para>
								</entry>
								<entry>
									<para>List of tags (among the already set tags), which will be forced to have the rmTagIfNoAttrib set to true</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>noAttrib</para>
								</entry>
								<entry>
									<para>(ibid)</para>
								</entry>
								<entry>
									<para>List of tags (among the already set tags), which will be forced to have the allowedAttribs value set to zero (which means, all attributes will be removed.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>removeTags</para>
								</entry>
								<entry>
									<para>(ibid)</para>
								</entry>
								<entry>
									<para>List of tags (among the already set tags), which will be configured so they are surely removed.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>keepNonMatchedTags</para>
								</entry>
								<entry>
									<para>boolean / "protect"</para>
								</entry>
								<entry>
									<para>If set (true=1), then all tags are kept regardless of tags present as keys in $tags-array. </para>
									<para>If "protect", then the preserved tags have their &lt;&gt; converted to &amp;lt; and &amp;gt;</para>
									<para>Default is to REMOVE all tags, which are not specifically assigned to be allowed! So you might probably want to set this value!</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>htmlSpecialChars</para>
								</entry>
								<entry>
									<para>-1 / 0 / 1 / 2</para>
								</entry>
								<entry>
									<para>This regards all content which is NOT tags: </para>
									<para>"0" means "disabled" - nothing is done</para>
									<para>"1" means the content outside tags is htmlspecialchar()'ed (PHP-function which converts &amp;"&lt;&gt; to &amp;...;)</para>
									<para>"2" is the same as "1" but entities like "&amp;amp;" or "&amp;#234" are untouched.</para>
									<para>"-1" does the opposite of "1" - converts &amp;lt; to &lt;, &amp;gt; to &gt;, &amp;quot; to " etc.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>xhtml_cleaning</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Cleans up the content for XHTML compliance. Still slightly experimental and supports only some clean up operations (like conversion tags and attributes to lower case).</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[page:-&gt;HTMLparser; tsref:-&gt;HTMLparser]</para>
			</section>
			<section>
				<title>HTMLparser_tags</title>
				<informaltable frame="all">
					<tgroup cols="3">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>overrideAttribs</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If set, this string is preset as the attributes of the tag. </para>
								</entry>
							</row>
							<row>
								<entry>
									<para>allowedAttribs</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>'0' (zero) = no attributes allowed, '[commalist of attributes]' = only allowed attributes. If blank/not set, all attributes are allowed.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].set</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Force the attribute value to this value.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].unset</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>&#xA0;If set, the attribute is unset.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].default</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If no attribute exists by this name, this value is set as default value (if this value is not blank)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].always</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the attribute is always processed. Normally an attribute is processed only if it exists</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].trim</para>
									<para>fixAttrib.[attribute].intval</para>
									<para>fixAttrib.[attribute].upper</para>
									<para>fixAttrib.[attribute].lower</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If any of these keys are set, the value is passed through the respective PHP-functions.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].range</para>
								</entry>
								<entry>
									<para>[low],[high]</para>
								</entry>
								<entry>
									<para>Setting integer range. </para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].list</para>
								</entry>
								<entry>
									<para>list of values, trimmed</para>
								</entry>
								<entry>
									<para>Attribute value must be in this list. If not, the value is set to the first element.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].removeIfFalse</para>
								</entry>
								<entry>
									<para>boolean/"blank" string</para>
								</entry>
								<entry>
									<para>If set, then the attribute is removed if it is "false". If this value is set to "blank" then the value must be a blank string (that means a "zero" value will not be removed)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].removeIfEquals</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If the attribute value matches the value set here, then it is removed.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].casesensitiveComp</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the comparison in .removeIfEquals and .list will be case-sensitive. At this point, it's insensitive.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].prefixLocalAnchors</para>
								</entry>
								<entry>
									<para>integer</para>
								</entry>
								<entry>
									<para>If the first char is a "#" character (anchor of fx. &lt;a&gt; tags) this will prefix either a relative or absolute path.</para>
									<para>If the value is "1" you will get the absolute path (t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'))</para>
									<para>If the value is "2" you will get the relative path (stripping of t3lib_div::getIndpEnv('TYPO3_SITE_URL'))</para>
									<para/>
									<para>Example:</para>
									<para/>
									<para>...fixAttrib.href.prefixLocalAnchors = 1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].prefixRelPathWith</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If the value of the attribute seems to be a relative URL (no scheme like "http" and no "/" as first char) then that value of this property will be prefixed the attribute.</para>
									<para/>
									<para>Example:</para>
									<para/>
									<para>...fixAttrib.src.prefixRelPathWith = http://192.168.230.3/typo3/32/dummy/</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fixAttrib.[attribute].userFunc</para>
								</entry>
								<entry>
									<para>function reference</para>
								</entry>
								<entry>
									<para>User function for processing of the attribute.</para>
									<para/>
									<para>Example:</para>
									<para/>
									<para>...fixAttrib.href.userFunc = tx_realurl-&gt;test_urlProc</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>protect</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the tag &lt;&gt; is converted to &amp;lt; and &amp;gt;</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>remap</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If set, the tagname is remapped to this tagname</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>rmTagIfNoAttrib</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the tag is removed if no attributes happend to be there.</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>nesting</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>If set true, then this tag must have starting and ending tags in the correct order. Any tags not in this order will be discarded. Thus '&lt;/B&gt;&lt;B&gt;&lt;I&gt;&lt;/B&gt;&lt;/I&gt;&lt;/B&gt;' will be converted to '&lt;B&gt;&lt;I&gt;&lt;/B&gt;&lt;/I&gt;'. </para>
									<para>Is the value "global" then true nesting in relation to other tags marked for "global" nesting control is preserved. This means that if &lt;B&gt; and &lt;I&gt; are set for global nesting then this string '&lt;/B&gt;&lt;B&gt;&lt;I&gt;&lt;/B&gt;&lt;/I&gt;&lt;/B&gt;' is converted to '&lt;B&gt;&lt;/B&gt;'</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[page:-&gt;HTMLparser_tags; tsref:-&gt;HTMLparser_tags]</para>
			</section>
		</section>
		<section>
			<title>Setup</title>
			<section>
				<title>Top-level objects</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>types</para>
								</entry>
								<entry>
									<para>readonly</para>
								</entry>
								<entry>
									<para>Types (internal)</para>
									<para>type=99 reserved for plaintext display </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>resources</para>
								</entry>
								<entry>
									<para>readonly</para>
								</entry>
								<entry>
									<para>Resources in list (internal)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sitetitle</para>
								</entry>
								<entry>
									<para>readonly</para>
								</entry>
								<entry>
									<para>SiteTitle (internal)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>config</para>
								</entry>
								<entry>
									<para>-&gt;CONFIG</para>
								</entry>
								<entry>
									<para>Global configuration. </para>
									<para>These values are stored with cached pages which means they are also accessible when retrieving a cached page.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>constants</para>
								</entry>
								<entry>
									<para>-&gt;CONSTANTS</para>
								</entry>
								<entry>
									<para>Site-specific constants, eg. a general email-adresse. These constants may be substituted in the text throughout the pages. The substitution is done by parseFunc. (Option: constants=1)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>FEData</para>
								</entry>
								<entry>
									<para>-&gt;FE_DATA</para>
								</entry>
								<entry>
									<para>Here you can configure how data submitted from the front-end should be processed, which script and so on.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibs</para>
								</entry>
								<entry>
									<para>Array of strings</para>
								</entry>
								<entry>
									<para>With this you can include php-files with function libraries for use in your includescript in TYPO3. </para>
									<para>Please see the PAGE-object, which has the same property.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>Other reserved TLO's:</para>
									<para/>
									<para>plugin</para>
									<para>tt_*</para>
									<para>temp</para>
									<para>styles</para>
									<para>lib</para>
									<para>_GIFBUILDER</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>These top-level object names are reserved. That means you can risk static_templates to use them:</para>
									<para>"plugin" is used for rendering of special content like boards, e-commerce solutions, guestbooks and so on. Normally set from static_templates. Please see separate description below!</para>
									<para>"tt_*", eg tt_content (from "content (default)") is used to render content from tables.</para>
									<para>"temp" and "styles" are used for conde-libraries you can copy during parse-time, but they are not saved with the template in cache. "temp" / "styles" are unset before the template is cached! Therefore use these names to store temporary data.</para>
									<para>"lib" can be used for a "library" of code, you can reference in TypoScript (unlike "styles" which is unset)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>...</para>
								</entry>
								<entry>
									<para>-&gt;PAGE</para>
								</entry>
								<entry>
									<para>Start a new page. </para>
									<para/>
									<para>Example:</para>
									<para>page = PAGE</para>
									<para>page.typeNum = 1</para>
									<para/>
									<para>Guidelines:</para>
									<para>Good, general PAGE object names to use are such as:</para>
									<para>page for the main page with content</para>
									<para>frameset, frameset2 for framesets.</para>
									<para>top, left, menu, right, bottom, border for top and menu frames etc.</para>
									<para>These are just recommendations. Especially the name 'page' for the content bearing page is very common.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>...</para>
								</entry>
								<entry>
									<para>(whatever)</para>
								</entry>
								<entry>
									<para>If a top-level object is not a PAGE-object it could be used as a temporary repository for setup. In this case you should use the "temp" or "styles" objects.</para>
									<para>"tt_..." is normally used to define the setup of content-records. Eg. "tt_content" would be used for the tt_content-table as default. See the "CONTENT"-cObject</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(TLO)]</para>
			</section>
			<section>
				<title>The "plugin" TLO</title>
				<para>This is used for extensions in TYPO3 set up as frontend plugins. Typically you can set configuration properties of the plugin here. Say you have an extension with the key "myext" and it has a frontend plugin named "tx_myext_pi1" then you would find the TypoScript configuration at the position "plugin.tx_myext_pi1" in the object tree!</para>
				<para>Most plugins are USER or USER_INT objects which means that they have at least 1 or 2 reserved properties. Furthermore this table outlines some other default properties. Generally system properties are prefixed with an underscore:</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>userFunc</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Property setting up the USER / USER_INT object of the plugin</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibs</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Property setting up the USER / USER_INT object of the plugin</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>_CSS_DEFAULT_STYLE</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Use this to have some default CSS styles inserted in the header section of the document. Most likely this will provide a default acceptable display from the plugin, but should ideally be cleared and moved to an external stylesheet.</para>
									<para>This value is for all plugins read by the pagegen script when making the header of the document.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>_DEFAULT_PI_VARS.[piVar-key]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Allows you to set default values of the piVars array which most plugins are using (and should use) for data exchange with themselves. </para>
									<para>This works only if the plugin calls $this-&gt;pi_setPiVarDefaults().</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>_LOCAL_LANG.[lang-key].[label-key]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Can be used to override the default locallang labels for the plugin.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:plugin]</para>
			</section>
			<section>
				<title/>
			</section>
			<section>
				<title>"CONFIG"</title>
				<para>In typo3/sysext/cms/tslib/ this is known as $GLOBALS['TSFE']-&gt;config['config'], thus the property "debug" below is accessible as $GLOBALS['TSFE']-&gt;config['config']['debug'].</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>defaultGetVars</para>
								</entry>
								<entry>
									<para>array</para>
								</entry>
								<entry>
									<para>Allows to set default values for GET parameters. Default value is taken only if the GET parameter isn't defined. Array notation is done with dots, e.g.:</para>
									<para>test[var1] will be written as text.var1</para>
									<para/>
									<para>Example:</para>
									<para>config.defaultgetVars {</para>
									<para>&#xA0; &#xA0; test.var1.var2.p3 = 15</para>
									<para>&#xA0; &#xA0; L = 3</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkVars</para>
								</entry>
								<entry>
									<para>list</para>
								</entry>
								<entry>
									<para>HTTP_GET_VARS, which should be passed on with links in TYPO3. This is compiled into a string stored in $GLOBALS['TSFE']-&gt;linkVars</para>
									<para/>
									<para>The values are rawurlencoded in PHP.</para>
									<para/>
									<para>You can specify a range of valid values by appending a () after each value. If this range does not match, the variable won't be appended to links. This is very important to prevent that the cache system gets flooded with forged values.</para>
									<para/>
									<para>The range may contain one of these values:</para>
									<orderedlist>
										<listitem>
											<para>[a]-[b] - A range of allowed integer values</para>
										</listitem>
										<listitem>
											<para>int - Only integer values are allowed</para>
										</listitem>
										<listitem>
											<para>[a]|[b]|[c] - A list of allowed strings (whitespaces will be removed)</para>
										</listitem>
										<listitem>
											<para>/[regex]/ - Match against a regular expression (PCRE style)</para>
										</listitem>
									</orderedlist>
									<para/>
									<para>Example:</para>
									<para>config.linkVars = L, print</para>
									<para>This will add "&amp;L=[L-value]&amp;print=[print-value]" to all links in TYPO3.</para>
									<para/>
									<para>config.linkVars = L(1-3), print</para>
									<para>Same as above, but "&amp;L=[L-value]" will only be added if the current value is 1, 2 or 3.</para>
									<para/>
									<para>Note: Do not include the "type" parameter in the linkVars list, as this can result in unexpected behavior.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>uniqueLinkVars</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>It might happen that TYPO3 generates links with the same parameter twice or more. This is no problem because only the last parameter is used, thus the problem is just a cosmetic one.</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>MP_defaults</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Allows you to set a list of page id numbers which will always have a certain "&amp;MP=..." parameter added.</para>
									<para/>
									<para>Syntax:</para>
									<para>[id],[id],... : [MP-var] | [id],[id],... : [MP-var] | ... </para>
									<para/>
									<para>Example:</para>
									<para>config.MP_defaults = 36,37,48 : 2-207</para>
									<para/>
									<para>This will by default add "&amp;MP=2-207" to all links pointing to pages 36,37 and 48</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>MP_mapRootPoints</para>
								</entry>
								<entry>
									<para>list of PIDs/string</para>
								</entry>
								<entry>
									<para>Defines a list of ID numbers from which the MP-vars are automatically calculated for the branch.</para>
									<para>The result is used just like MP_defaults are used to find MP-vars if none has been specified prior to the call to t3lib_tstemplate::linkData().</para>
									<para>You can specify "root" as a special keyword in the list of IDs and that will create a map-tree for the whole site (but this may be VERY processing intensive if there are many pages!).</para>
									<para>The order of IDs specified may have a significance; Any ID in a branch which is processed already (by a previous ID root point) will not be processed again.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>MP_disableTypolinkClosestMPvalue</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the typolink function will not try to find the closest MP value for the id.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>renderCharset</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Charset used for rendering internally of the page content. It is highly recommended that this value is the same as the charset of the content coming from the main data source (eg. the database). Thus you don't need to do any other conversion.</para>
									<para>All strings from locallang files and locale strings are (and should be) converted to "renderCharset" during rendering. </para>
									<para/>
									<para>If you need another output charset than the render charset, see "metaCharset" below. </para>
									<para/>
									<para>If you set $TYPO3_CONF_VARS['BE']['forceCharset'] that value is used by default for "renderCharset". It is highly recommended to use $TYPO3_CONF_VARS['BE']['forceCharset'] for multilingual websites in TYPO3. If you set that you don't have to worry about renderCharset and metaCharset - the same charset is used in the whole system.</para>
								</entry>
								<entry>
									<para>$TYPO3_CONF_VARS['BE']['forceCharset'] if found, otherwise</para>
									<para>"iso-8859-1"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>metaCharset</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Charset used for the output document. For example in the meta tag:</para>
									<para>&lt;meta http-equiv="Content-Type" content="text/html; charset=...&gt;</para>
									<para/>
									<para>Is used for a) HTML meta-tag, b) HTTP header (unless disabled with .disableCharsetHeader) and c) xhtml prologues (if available)</para>
									<para/>
									<para>If renderCharset and metaCharset are different the output content is automatically converted to metaCharset before output and likewise are values posted back to the page converted from metaCharset to renderCharset for internal processing. This conversion takes time of course so there is another good reason to use the same charset for both.</para>
								</entry>
								<entry>
									<para>value of ".renderCharset"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>disableCharsetHeader</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>By default a header "content-type:text/html; charset..." is sent. This option will disable that.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sendCacheHeaders</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, TYPO3 will output cache-control headers to the client based mainly on whether the page was cached internally. This feature allows client browsers and/or reverse proxies to take load off TYPO3 websites.</para>
									<para/>
									<para>The conditions for allowing client caching are:</para>
									<orderedlist>
										<listitem>
											<para>page was cached</para>
										</listitem>
										<listitem>
											<para>No *_INT or *_EXT objects were on the page (eg. USER_INT)</para>
										</listitem>
										<listitem>
											<para>No frontend user is logged in</para>
										</listitem>
										<listitem>
											<para>No backend user is logged in</para>
										</listitem>
									</orderedlist>
									<para/>
									<para>If these conditions are met, the headers sent are:</para>
									<orderedlist>
										<listitem>
											<para>Last-Modified [SYS_LASTCHANGED of page id]</para>
										</listitem>
										<listitem>
											<para>Expires [expire time of page cache]</para>
										</listitem>
										<listitem>
											<para>Etag [md5 of content]</para>
										</listitem>
										<listitem>
											<para>Cache-Control: max-age: [seconds til expiretime]</para>
										</listitem>
										<listitem>
											<para>Pragma: public</para>
										</listitem>
									</orderedlist>
									<para/>
									<para>In case caching is not allowed, these headers are sent to avoid client caching:</para>
									<orderedlist>
										<listitem>
											<para>Cache-Control: private</para>
										</listitem>
									</orderedlist>
									<para/>
									<para>Notice that enabling the browser caches means you have to consider how log files are written. Because when a page is cached on the client it will not invoke a request to the webserver, thus not writing the request to the log. There should be ways to circumvent these problems but they are outside the domain of TYPO3 in any case.</para>
									<para/>
									<para>Tip: Enabling cache-control headers might confuse editors seeing old content served from the browser cache. "Shift-Reload" will bypass both browser- and reverse-proxy caches and even make TYPO3 regenerate the page. Teach them that trick!</para>
									<para/>
									<para>Thanks to Ole Tange, www.forbrug.dk for co-authoring this feature.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sendCacheHeaders_onlyWhenLoginDeniedInBranch</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this is set, then cache-control headers allowing client caching is sent only if user-logins are disabled for the branch. This feature makes it easier to manage client caching on sites where you have a mixture of static pages and dynamic sections with user logins. </para>
									<para/>
									<para>The background problem is this: In TYPO3 the same URL can show different content depending on whether a user is logged in or not. If a user is logged in, cache-headers will never allow client caching. But if the same URL was visited without a login prior to the login (allowing caching) the user will still see the page from cache when logged in (and so thinks he is not logged in anyway)! The only general way to prevent this is to have a different URL for pages when users are logged in (which the extension "realurl" can accomplish).</para>
									<para/>
									<para>Another way to solve the problem is using this option in combination with disabling and enabling logins in various sections of the site. In the page records ("Advanced" page types) you can disable frontend user logins for branches of the page tree. Since many sites only needs the login in a certain branch of the page tree, disabling it in all other branches makes it much easier to use cache-headers in combination with logins; Cache-headers should simply be sent when logins are not allowed and never be send when logins are allowed! Then there will never be problems with logins and same-URLs.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>additionalHeaders</para>
								</entry>
								<entry>
									<para>strings divided by "|"</para>
								</entry>
								<entry>
									<para>This property can be used to define additional HTTP headers. Separate each header with a vertical line "|".</para>
									<para/>
									<para>Examples:</para>
									<para>Content-type: text/vnd.wap.wml</para>
									<para>(this will send a content-header for a WAP-site)</para>
									<para/>
									<para>Content-type: image/gif | Expires: Mon, 25 Jul 2011 05:00:00 GMT</para>
									<para>(this will send a content-header for a GIF-file and an Expires header)</para>
									<para/>
									<para>Location: www.typo3.com</para>
									<para>(This redirects the page to 
										<ulink url="http://www.typo3.com/">www.typo3.com</ulink>)
									</para>
									<para/>
									<para>By default TYPO3 sends a "Content-Type" header with the defined encoding, unless this is disabled using config.disableCharsetHeader (see above). It then sends cache headers, if configured (see above). Then come the additional headers, plus finally a "Content-Length" header, if enabled (see below).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>enableContentLengthHeader</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, a header "content-length: [bytes of content]" is sent.</para>
									<para/>
									<para>If a PHP_SCRIPT_EXT object is detected on the page or if the Backend user is logged in, this is disabled. The reason is that the content length header cannot include the lenght of these objects and the content-length will cut of the lenght of the document in some browsers.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>doctype</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If set, then a document type declaration (and an XML prologue) will be generated. The value can either be a complete doctype or one of the following keywords:</para>
									<para/>
									<para>"xhtml_trans" for the XHTML 1.0 Transitional doctype.</para>
									<para>"xhtml_frames" for the XHTML 1.0 Frameset doctype.</para>
									<para>"xhtml_strict" for the XHTML 1.0 Strict doctype.</para>
									<para>"xhtml_basic" for the XHTML basic doctype.</para>
									<para>"xhtml_11" for the XHTML 1.1 doctype.</para>
									<para>"xhtml+rdfa_10" for the XHTML+RDFa 1.0 doctype.</para>
									<para>"xhtml_2" for the XHTML 2 doctype.</para>
									<para>"html5" for the HTML5 doctype.</para>
									<para>"none" for NO doctype at all.</para>
									<para/>
									<para>Note: In TYPO3 4.4 the keyword for HTML5 is "html_5". This spelling is deprecated since TYPO3 4.5.</para>
									<para/>
									<para>Note that the keywords also change the way TYPO3 generates some of the XHTML tags to ensure valid XML. If you set doctype to a string, then you must also set config.xhtmlDoctype (see below).</para>
									<para/>
									<para>See "config.htmlTag_setParams" and "config.htmlTag_langKey" for more details on the effect on the html tag.</para>
									<para/>
									<para>Default is the HTML 4 Transitional doctype:</para>
									<para/>
									<para>&lt;!DOCTYPE html</para>
									<para>&#xA0; &#xA0; &#xA0; &#xA0; PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>doctypeSwitch</para>
								</entry>
								<entry>
									<para>boolean / string</para>
								</entry>
								<entry>
									<para>If set, the order of &lt;?xml...&gt; and &lt;!DOCTYPE...&gt; will be reversed. This is needed for MSIE to be standards compliant with XHTML.</para>
									<para/>
									<para>Background:</para>
									<para>By default TYPO3 outputs the XML/DOCTYPE in compliance with the standards of XHTML. However a browser like MSIE will still run in "quirks-mode" unless the &lt;?xml&gt; and &lt;DOCTYPE&gt; tags are ordered opposite. But this breaks CSS validation... </para>
									<para>With this option designers can decide for themselves what they want then.</para>
									<para/>
									<para>If you want to check the compatibility-mode of your webbrowser you can do so with a simple JavaScript that can be inserted on a TYPO3 page like this:</para>
									<para/>
									<para>page.headerData.1 = TEXT</para>
									<para>page.headerData.1.value = &lt;script&gt;alert(document.compatMode);&lt;/script&gt;</para>
									<para/>
									<para>If your browser has detected the DOCTYPE correctly it will report "CSS1Compat"</para>
									<para>If you are not running in compliance mode you will get some other message. MSIE will report "BackCompat" for instance - this means it runs in quirks-mode, supporting all the old "browser-bugs".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>xhtmlDoctype</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Sets the document type for the XHTML version of the generated page.</para>
									<para/>
									<para>If config.doctype is set to a string then config.xhtmlDoctype must be set to one of these keywords:</para>
									<para/>
									<para>"xhtml_trans" for XHTML 1.0 Transitional doctype.</para>
									<para>"xhtml_frames" for XHTML 1.0 Frameset doctype.</para>
									<para>"xhtml_strict" for XHTML 1.0 Strict doctype.</para>
									<para>"xhtml_basic" for XHTML basic doctype.</para>
									<para>"xhtml_11" for XHTML 1.1 doctype.</para>
									<para>"xhtml_2" for XHTML 2 doctype.</para>
									<para/>
									<para/>
									<para>This is an example to use MathML 2.0 in an XHTML 1.1 document:</para>
									<para/>
									<para>config.doctype (</para>
									<para>&lt;!DOCTYPE html</para>
									<para>PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"</para>
									<para>"http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"&gt;</para>
									<para>)</para>
									<para>config.xhtmlDoctype = xhtml_11</para>
									<para/>
									<para>Default:</para>
									<para>same as config.doctype if set to a keyword</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>xmlprologue</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If empty (not set) then the default XML 1.0 prologue is set, when the doctype is set to a known keyword (eg xhtml_11):</para>
									<para/>
									<para>&lt;?xml version="1.0" encoding="[config.renderCharset]"&gt;</para>
									<para/>
									<para>If set to one of the know keywords then a standard prologue will be set:</para>
									<para>"xml_10" XML 1.0 prologue (see above)</para>
									<para>"xml_11" XML 1.1 prologue</para>
									<para/>
									<para>If "none" then the default XML prologue is not set.</para>
									<para>Any other string is used as the XML prologue itself.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>htmlTag_setParams</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Sets the attributes for the &lt;html&gt; tag on the page. If you set "config.doctype" to a keyword enabling XHTML then some attributes are already set. This property allows you to override any preset attributes with your own content if needed.</para>
									<para/>
									<para>Special: If you set it to "none" then no attributes will be set at any event.</para>
									<para/>
									<para>Example:</para>
									<para>config.htmlTag_setParams = xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>namespaces</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>This property enables you to add xml namespaces (xmlns) to the &lt;html&gt; tag. This is especially useful if you want to add RDFa or microformats to your html.</para>
									<para/>
									<para>Example:</para>
									<para>config.namespaces.dc = http://purl.org/dc/elements/1.1/</para>
									<para>config.namespaces.foaf = http://xmlns.com/foaf/0.1/</para>
									<para/>
									<para>This configuration will result in an &lt;html&gt; tag like</para>
									<para/>
									<para>&lt;html xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:foaf="http://xmlns.com/foaf/0.1/"&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>htmlTag_langKey</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Allows you to set the language value for the attributes "xml:lang" and "lang" in the &lt;html&gt; tag (when using "config.doctype = xhtml*").</para>
									<para/>
									<para>The values must follow the format specified in 
										<ulink url="http://www.ietf.org/rfc/rfc3066.txt">IETF RFC 3066</ulink>
									</para>
									<para/>
									<para>Example:</para>
									<para>config.htmlTag_langKey = en-US</para>
								</entry>
								<entry>
									<para>en</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>htmlTag_dir</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Sets text direction for whole document (useful for display of Arabic, Hebrew pages).</para>
									<para/>
									<para>Basically the value becomes the attribute value of "dir" for the &lt;html&gt; tag.</para>
									<para/>
									<para>Values:</para>
									<para>rtl = Right-To-Left (for Arabic / Hebrew)</para>
									<para>ltr = Left-To-Right (Default for other languages)</para>
									<para/>
									<para>Example:</para>
									<para>config.htmlTag_dir = rtl</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>disableImgBorderAttr</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Returns the 'border' attribute for an &lt;img&gt; tag only if the doctype is not xhtml_strict, xhtml_11 or xhtml_2 or if the config parameter 'disableImgBorderAttr' is not set</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params</para>
								</entry>
								<entry>
									<para>Additional parameters to all links in TYPO3 (excluding menu-links)</para>
									<para/>
									<para>Example:</para>
									<para>To blur links, insert: </para>
									<para>onFocus="blurLink(this)"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>setJS_openPic</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the openPic JavaScript function is forced to be included</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>setJS_mouseOver</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the over() and out() JavaScript functions are forced to be included</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>removeDefaultJS</para>
								</entry>
								<entry>
									<para>boolean / string</para>
								</entry>
								<entry>
									<para>If set, the default JavaScript in the header will be removed.</para>
									<para>The default JavaScript is the blurLink function and browser detection variables.</para>
									<para/>
									<para>Special case: if the value is "external" then the default JavaScript is written to a temporary file and included from that file. See "inlineStyle2TempFile" below.</para>
									<para/>
									<para>Depends on the compatibility mode (see Tools&gt;Install&gt;Update wizard):</para>
									<para>compatibility mode &lt; 4.0: &#xA0; 0</para>
									<para>compatibility mode &gt;= 4.0: &#xA0; 1</para>
									<para/>
									<para>Examples:</para>
									<para>config.removeDefaultJS = external</para>
									<para>config.removeDefaultJS = 1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>minifyJS</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, inline or externalized (see removeDefaultJS above) JavaScript will be minified. Minification will remove all excess space and will cause faster page loading. Together with removeDefaultJS = external it will significantly lower web site traffic.</para>
									<para/>
									<para>The default value depends on the compatibility mode (see Tools&gt;Install&gt;Update wizard):</para>
									<para>compatibility mode &lt; 4.0: &#xA0; 0</para>
									<para>compatibility mode &gt;= 4.0: &#xA0; 1</para>
									<para/>
									<para>Example:</para>
									<para>config.minifyJS = 1</para>
									<para/>
									<para>Note: JavaScript in external files in the FE will only be minified, if a compression handler is registered using $GLOBALS['TYPO3_CONF_VARS']['FE']['jsCompressHandler']. </para>
									<para/>
									<para>Example:</para>
									<para>$GLOBALS['TYPO3_CONF_VARS']['FE']['jsCompressHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_jsCompressHandler.php:tx_myext_jsCompressHandler-&gt;minifyJs';</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>minifyCSS</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Setting this option will activate CSS minification.</para>
									<para/>
									<para>Example:</para>
									<para>config.minifyCSS = 1</para>
									<para/>
									<para>Note: CSS in external files in the FE will only be minified, if a compression handler is registered using $GLOBALS['TYPO3_CONF_VARS']['FE']['cssCompressHandler']. </para>
									<para/>
									<para>Example:</para>
									<para>$GLOBALS['TYPO3_CONF_VARS']['FE']['cssCompressHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_cssCompressHandler.php:tx_myext_cssCompressHandler-&gt;minifyCss';</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>concatenateJsAndCss</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Setting config.concatenateJsAndCss bundles JS and CSS files in the FE.</para>
									<para/>
									<para>Example:</para>
									<para>config.concatenateJsAndCss = 1</para>
									<para/>
									<para>Note: There are no default concatenation handlers, which could do the concatenation. A custom concatenation handler must be provided and registered using $GLOBALS['TYPO3_CONF_VARS']['FE']['concatenateHandler']. </para>
									<para/>
									<para>Example:</para>
									<para>$GLOBALS['TYPO3_CONF_VARS']['FE']['concatenateHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_concatenateHandler.php:tx_myext_concatenateHandler-&gt;concatenateFiles';</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>inlineStyle2TempFile</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the inline styles TYPO3 controls in the core are written to a file, typo3temp/stylesheet_[hashstring].css, and the header will only contain the link to the stylesheet.</para>
									<para>The file hash is based solely on the content of the styles.</para>
									<para/>
									<para>Depends on the compatibility mode (see Tools&gt;Install&gt;Update wizard):</para>
									<para>compatibility mode &lt; 4.0: &#xA0; 0</para>
									<para>compatibility mode &gt;= 4.0: &#xA0; 1</para>
									<para/>
									<para>Example:</para>
									<para>config.inlineStyle2TempFile = 1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>meaningfulTempFilePrefix</para>
								</entry>
								<entry>
									<para>integer</para>
								</entry>
								<entry>
									<para>If &gt; 0 TYPO3 will try to create a meaningful prefix of the given length for the temporary image files.</para>
									<para>This works with GIFBUILDER files (using content from the GIFBUILDER TEXT objects as a base for the prefix), menus (using the title of the menu item) and scaled images (using the original filename base).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ftu</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the "&amp;ftu=...." GET-fallback identification is inserted.</para>
									<para>"&amp;ftu=[hash]" is always inserted in the links on the first page a user hits. If it turns out in the next hit that the user has cookies enabled, this variable is not set anymore as the cookies does the job. If no cookies is accepted the "ftu" remains set for all links on the site and thereby we can still track the user.</para>
									<para/>
									<para>You should not set this feature if grabber-spiders like Teleport are going to grab your site!</para>
									<para>You should not set this feature if you want search-engines to index your site (in conjunction with the simulateStaticDocuments feature!)</para>
									<para/>
									<para>You can also ignore this feature if you're certain, website users will use cookies.</para>
									<para>&#xA0;"ftu" means fe_typo_user ("fe" is "frontend").</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>mainScript</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This lets you specify an alternative "mainScript" which is the document that TYPO3 expects to be the default doc. This is used in form-tags and other places where TYPO3 needs to refer directly to the main-script of the application</para>
								</entry>
								<entry>
									<para>index.php</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>pageGenScript</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Alternative page generation script for applications using index_ts.php for initialization, caching, stating and so on. This script is included in the global scope of index_ts.php-script and thus you may include libraries here. Always use include_once for libraries.</para>
									<para>Remember not to output anything from such an included script. All content must be set into $TSFE-&gt;content. Take a look at typo3/sysext/cms/tslib/pagegen.php</para>
									<para/>
									<para>NOTE: This option is ignored if </para>
									<para/>
									<para>$TYPO3_CONF_VARS['FE']['noPHPscriptInclude'] = 1;</para>
									<para/>
									<para>is set in localconf.php.</para>
								</entry>
								<entry>
									<para>typo3/sysext/cms/tslib/pagegen.php</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>debug</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set any debug-information in the TypoScript code is output. Currently this applies only to the menu-objects</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>message_page_is_being_generated</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Alternative HTML message that appears if a page is being generated.</para>
									<para>Normally when a page is being generated a temporary copy is stored in the cache-table with an expire-time of 30 seconds.</para>
									<para/>
									<para>It is possible to use some keywords that are replaced with the corresponding values. Possible keywords are: ###TITLE###, ###REQUEST_URI###</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>message_preview</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Alternative message in HTML that appears when the preview function is active!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>message_preview_workspace</para>
								</entry>
								<entry>
									<para>string </para>
								</entry>
								<entry>
									<para>Alternative message in HTML that appears when the preview function is active in a draft workspace. You can use sprintf() placeholders for Workspace title (first) and number (second).</para>
									<para/>
									<para>Examples:</para>
									<para>config.message_preview_workspace = &lt;div class="previewbox"&gt;Displaying workspace named "%s" (number %s)!&lt;/div&gt;</para>
									<para>config.message_preview_workspace = &lt;div class="previewbox"&gt;Displaying workspace number %2$s named "%1$s"!&lt;/div&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>disablePreviewNotification</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Disables the "preview" notification box completely.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>locale_all</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>PHP: setlocale("LC_ALL", [value]);</para>
									<para>value-examples: deutsch, de_DE, danish, portuguese, spanish, french, norwegian, italian. See www.php.net for other value. Also on linux, look at /usr/share/locale/</para>
									<para/>
									<para>TSFE-&gt;localeCharset is intelligently set to the assumed charset of the locale strings. This is used in stdWrap.strftime to convert locale strings to the renderCharset of the frontend.</para>
									<para/>
									<para>Example:</para>
									<para>This will render dates in danish made with stdWrap/strftime:</para>
									<para>locale_all = danish</para>
									<para>locale_all = da_DK</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sword_standAlone</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Used by the parseFunc-substitution of search Words (sword):</para>
									<para>If set, the words MUST be surrounded by whitespace in order to be marked up.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sword_noMixedCase</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Used by the parseFunc-substitution of search Words (sword):</para>
									<para>If set, the words MUST be the exact same case as the search word was.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>intTarget</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Default internal target. Used by typolink if no target is set</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>extTarget</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Default external target. Used by typolink if no extTarget is set</para>
								</entry>
								<entry>
									<para>_top</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>fileTarget</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Default file link target. Used by typolink if no fileTarget is set. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>spamProtectEmailAddresses</para>
								</entry>
								<entry>
									<para>"ascii" /</para>
									<para>-10 to 10</para>
								</entry>
								<entry>
									<para>If set, then all email addresses in typolinks will be encrypted so spam </para>
									<para>bots cannot detect them.</para>
									<para/>
									<para>If you set this value to a number, then the encryption is simply an </para>
									<para>offset of character values. If you set this value to "-2" then all </para>
									<para>characters will have their ASCII value offset by "-2". To make this </para>
									<para>possible, a little JavaScript code is added to every generated web page!</para>
									<para>(It is recommended to set the value in the range from -5 to 1 since setting it to &gt;= 2 means a "z" is converted to "|" which is a special character in TYPO3 tables syntax &#x2013; and that might confuse columns in tables. Now hardcoded range)</para>
									<para/>
									<para>Alternatively you can set this value to the keyword "ascii". This way every </para>
									<para>character of the "mailto:" address will be translated to a Unicode HTML </para>
									<para>notation. Have a look at the example to see how this works.</para>
									<para/>
									<para>Example:</para>
									<para>mailto:a@b.c will be converted to</para>
									<para>mailto:&amp;#97;&amp;#64;&amp;#98;&amp;#46;&amp;#99;</para>
									<para>The big advantage of this method is that it doesn't need any JavaScript!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>spamProtectEmailAddresses_atSubst</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Substitute label for the at-sign (@).</para>
								</entry>
								<entry>
									<para>(at)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>spamProtectEmailAddresses_lastDotSubst</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Substitute label for the last dot in the email address.</para>
									<para>Example: (dot)</para>
								</entry>
								<entry>
									<para>Default: . ( &lt;= just a simple dot)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceTypeValue</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Force the &amp;type value of all TYPO3 generated links to a specific value (except if overruled by local forceTypeValue values).</para>
									<para>Useful if you run a template with special content at - say &amp;type=95 - but still wants to keep your targets neutral. Then you set your targets to blank and this value to the type value you wish.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>frameReloadIfNotInFrameset</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the current page will check if the page object name (e.g. "page" or "frameset") exists as "parent.[name]" (e.g. "parent.page") and if not the page will be reloaded in top frame. This secures that links from search engines to pages inside a frameset will load the frameset.</para>
									<para>Works only with type-values different from zero.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>jumpurl_enable</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>jumpUrl is a concept where external links are redirected from the index_ts.php script, which first logs the URL. This feature is only interesting if "config.sys_stat" is used.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>jumpurl_mailto_disable</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Disables the use of jumpUrl when linking to email-adresses.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>compensateFieldWidth</para>
								</entry>
								<entry>
									<para>double</para>
								</entry>
								<entry>
									<para>this floating point value will be used by the FORMS cObject to compensate the length of the form fields text and input.</para>
									<para>This feature is useful, if the page-option "smallFormFields" is set. In that case Netscape renders form fields much longer than IE. If you want the two browsers to display the same size form fields, use a value of approx "0.6" for netscape-browsers.</para>
									<para/>
									<para>Example:</para>
									<para>[browser = netscape]</para>
									<para>&#xA0; config.compensateFieldWidth = 0.6</para>
									<para>[global]</para>
									<para/>
									<para>This option may be overridden in the FORMS-cObject.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibrary</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>This includes a PHP file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>incT3Lib_htmlmail </para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Include t3lib/class.t3lib_htmlmail.php</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>lockFilePath</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This is used to lock paths to be "inside" this path.</para>
									<para>Used by "filelist" in stdWrap</para>
								</entry>
								<entry>
									<para>fileadmin/</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>noScaleUp</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Normally images are scaled to the size specified via TypoScript. This also forces small images to be scaled to a larger size. This is not always a good thing. </para>
									<para>If this property is set, images are not allowed to be scaled up in size. This parameter clears the $this-&gt;mayScaleUp var of the class t3lib_stdgraphics (often "gifbuilder").</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>USERNAME_substToken</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>The is the token used on the page, which should be substituted with the current username IF a front-end user is logged in! If no login, the substitution will not happen.</para>
								</entry>
								<entry>
									<para>&lt;!--###USERNAME###--&gt;</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>USERUID_substToken</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>The is the token used on the page, which should be substituted with the current users UID IF a front-end user is logged in! If no login, the substitution will not happen.</para>
									<para>This value has no default value and only if you specify a value for this token will a substitution process take place.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cache_period</para>
								</entry>
								<entry>
									<para>int, seconds</para>
								</entry>
								<entry>
									<para>The number of second a page may remain in cache.</para>
									<para>This value is overridden by the value set in the page-record (field="cache_timeout") if this value is greater than zero.</para>
								</entry>
								<entry>
									<para>86400 (=24H)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>cache_clearAtMidnight</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>With this setting the cache always expires at midnight of the day, the page is scheduled to expire.</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>no_cache</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this is set to true, the page will not be cached. If set to false, it's ignored. Other parameters may have set it to true of other reasons.</para>
								</entry>
								<entry>
									<para>-</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>disableAllHeaderCode</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this is set, none of the features of the PAGE-object is processed and the content of the page will be the result of the cObject array (1,2,3,4...) of the PAGE-object. This means that the result of the cObject should include everything from the &lt;HTML&gt; .... to the &lt;/HTML&gt; tag!</para>
									<para>Use this feature in templates supplying other content-types than HTML. That could be an image or a WAP-page!</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>disablePageExternalUrl</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, pages with doktype "External Url" will not trigger jumpUrl in TSFE. This may help you to have external urls open inside you framesets.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Enable stat logging at all.</para>
								</entry>
								<entry>
									<para>true</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_typeNumList</para>
								</entry>
								<entry>
									<para>int/list</para>
								</entry>
								<entry>
									<para>List of pagetypes that should be registered in the statistics table, sys_stat.</para>
									<para>If no types are listed, all types are logged.</para>
									<para>Default is "0,1" which normally logs all hits on framesets and hits on content keeping pages. Of course this depends on the template design.</para>
								</entry>
								<entry>
									<para>0,1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_excludeBEuserHits</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set a page hit is not logged if a user is logged in into TYPO3.</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_excludeIPList</para>
								</entry>
								<entry>
									<para>list of strings</para>
								</entry>
								<entry>
									<para>If the REMOTE_ADDR is in the list of IP-addresses, it's also not logged.</para>
									<para>Can use wildcard, e.g. "192.168.1.*"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_mysql</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Enable logging to the MySQL table sys_stat.</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Enable logging to the log file "stat_apache_logfile"</para>
								</entry>
								<entry>
									<para>false</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_logfile</para>
								</entry>
								<entry>
									<para>filename</para>
								</entry>
								<entry>
									<para>This defines the name of the log file where TYPO3 writes an Apache-style logfile to. The location of the directory is defined by $TYPO3_CONF_VARS['FE']['logfile_dir'] which must exist and be writable. It can be relative (to PATH_site) or absolute, but in any case it must be within the regular allowed paths of TYPO3 (meaning for absolute paths that it must be within the "lockRootPath" set up in $TYPO3_CONF_VARS).</para>
									<para/>
									<para>It is also possible to use date markers in the filename as they are provided by the PHP function strftime(). This will enable a natural rotation of the log files.</para>
									<para/>
									<para>Example:</para>
									<para>config.stat_apache_logfile = typo3_%Y%m%d.log</para>
									<para/>
									<para>This will create daily log files (e.g. typo3_20060321.log).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_pagenames</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>The "pagename" simulated for apache.</para>
									<para>Default: "[path][title]--[uid].html"</para>
									<para>Codes:</para>
									<para>[title] = inserts title, no special characters and shortened to 30 chars.</para>
									<para>[uid] = the id</para>
									<para>[alias] = any alias</para>
									<para>[type] = the type (typeNum)</para>
									<para>[path] = the path of the page</para>
									<para>[request_uri] = inserts the REQUEST_URI server value (useful with RealUrl for example)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_notExtended</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If true the log file is NOT written in Apache extended format</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_noHost</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If true the HTTP_HOST is - if available - NOT inserted instead of the IP-address</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_niceTitle</para>
								</entry>
								<entry>
									<para>boolean / string</para>
								</entry>
								<entry>
									<para>If set, the URL will be transliterated from the renderCharset to ASCII (e.g &#xE4; =&gt; ae, &#xE0; =&gt; a, &amp;#945; "alpha" =&gt; a), which yields nice and readable page titles in the log. All non-ASCII characters that cannot be converted will be changed to underscores.</para>
									<para/>
									<para>If set to "utf-8", the page title will be converted to UTF-8 which results </para>
									<para>in even more readable titles, if your log analyzing software supports it.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_apache_noRoot</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the root part (level 0) of the path will be removed from the path. This makes a shorter name in case you have only a redundant part like "home" or "my site".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_titleLen</para>
								</entry>
								<entry>
									<para>int 1-100</para>
								</entry>
								<entry>
									<para>The length of the page names in the path written to log file/database</para>
								</entry>
								<entry>
									<para>20</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stat_pageLen</para>
								</entry>
								<entry>
									<para>int 1-100</para>
								</entry>
								<entry>
									<para>The length of the page name (at the end of the path) written to the log file/database.</para>
								</entry>
								<entry>
									<para>30</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments</para>
								</entry>
								<entry>
									<para>boolean /</para>
									<para>string</para>
								</entry>
								<entry>
									<para>If set TYPO3 makes all links in another way than usual. This can be used with Apache compiled with mod_rewrite and configured in httpd.conf for use of this in the ".htaccess"-files.</para>
									<para>Include this in the .htaccess file</para>
									<para>RewriteEngine On</para>
									<para>RewriteRule &#xA0; ^[^/]*\.html$ &#xA0;index.php</para>
									<para/>
									<para>This means that any "*.html"-documents should be handled by index.php. </para>
									<para>Now if is done, TYPO3 will interpret the url of the html-document like this:</para>
									<para>[title].[id].[type].html</para>
									<para>Title is optional and only useful for the entries in the apache log-files. You may omit both [title] and [type] but if title is present, type must also be there!. </para>
									<para/>
									<para>Example:</para>
									<para>TYPO3 will interpret this as page with uid=23 and type=1 :</para>
									<para>Startpage.23.1.html</para>
									<para/>
									<para>TYPO3 will interpret this as the page with alias = "start" and the type is zero (default):</para>
									<para>start.html</para>
									<para/>
									<para>Alternative option (PATH_INFO):</para>
									<para>Instead of using the rewrite-module in apache (eg. if you're running Windows!) you can use the PATH_INFO variable from PHP.</para>
									<para>It's very simple. Just set simulateStaticDocuments to "PATH_INFO" and you're up and running!</para>
									<para/>
									<para>Also: See below, .absRefPrefix</para>
									<para/>
									<para>Example (put in Setup-field of your template):</para>
									<para>config.simulateStaticDocuments = PATH_INFO</para>
								</entry>
								<entry>
									<para>default is defined by a configuration option in localconf.php. It's </para>
									<para>$TYPO3_CONF_VARS['FE']['simulateStaticDocuments'] = 1;</para>
									<para>This affects all sites in the database.</para>
									<para>You can also set this value to the string &#xA0;"PATH_INFO"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_addTitle</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>If not zero, TYPO3 generates urls with the title in, limited to the first [simulateStaticDocuments_addTitle] number of chars.</para>
									<para/>
									<para>Example:</para>
									<para>Startpage.23.1.html</para>
									<para>instead of the default, "23.1.html", without the title.</para>
								</entry>
								<entry>
									<para/>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_noTypeIfNoTitle</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the type-value will not be set in the simulated filename if the type value is zero anyways. However the filename must be without a title. </para>
									<para/>
									<para>Example:</para>
									<para>"Startpage.23.0.html" would still be "Startpage.23.0.html"</para>
									<para>"23.0.html" would be "23.html" (that is without the zero)</para>
									<para>"23.1.html" would still be "23.1.html" </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_replacementChar</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Word separator for URLs generated by simulateStaticDocuments. If set to</para>
									<para>hyphen, this option allows search engines to index keywords in URLs. Before TYPO3 4.0 this character was hard-coded to underscore.</para>
									<para/>
									<para>Depends on the compatibility mode (see Tools&gt;Install&gt;Update wizard):</para>
									<para>compatibility mode &lt; 4.0: &#xA0; underscore "_"</para>
									<para>compatibility mode &gt;= 4.0: &#xA0; hyphen "-"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_dontRedirectPathInfoError</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Regarding PATH_INFO mode:</para>
									<para>When a page is requested by "PATH_INFO" method it must be configured in order to work properly. If PATH_INFO is not configured, the index_ts.php script sends a location header to the correct page. However if you better like an error message outputted, just set this option.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_pEnc</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Allows you to also encode additional parameters into the simulated filename. </para>
									<para/>
									<para>Example: </para>
									<para>You have a news-plugin. The main page has the url "Page_1.228.0.html" but when one clicks on a news item the url will be "Page_1.228.0.html?&amp;tx_mininews_pi1[showUid]=2&amp;cHash=b8d239c224" instead.</para>
									<para>Now, this URL will not be indexed by external search-engines because of the query-string (everything after the "?" mark). This property avoids this problem by encoding the parameters. These are the options:</para>
									<para/>
									<para>Value set to "base64":</para>
									<para>This will transform the filename used to this value: "Page_1.228+B6JnR4X21pbmluZXdzX3BpMVtzaG93VWlkXT0yJmNIYXNoPWI4ZDIzOWMyMjQ_.0.html". The query string has simply been base64-encoded (and some more...) and added to the HTML-filename (so now external search-engines will find this!). The really great thing about this that the filename is self-reliant because the filename contains the parameters. The downside to it is the very very long filename.</para>
									<para/>
									<para>Value set to "md5":</para>
									<para>This will transform the filename used to this value:</para>
									<para>"Page_1.228+M57867201f4a.0.html". Now, what a lovely, short filename! Now all the parameters has been hashed into a 10-char string inserted into the filename. At the same time an entry has been added to a cache table in the database so when a request for this filename reaches the frontend, then the REAL parameter string is found in the database! The really great thing about this is that the filename is very short (opposite to the base64-method). The downside to this is that IF you clear the database cache table at any time, the URL here does NOT work until a page with the link has been generated again (re-inserting the parameter list into the database).</para>
									<para/>
									<para>NOTICE: From TYPO3 3.6.0 the encoding will work only on parameters that are manually entered in the list set by .simulateStaticDocuments_pEnc_onlyP (see right below) or those parameters that various plugins might allow in addition. This is to limit the run-away risk when many parameters gets combined.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>simulateStaticDocuments_pEnc_onlyP</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>A list of variables that may be a part of the md5/base64 encoded part of a simulate_static_document virtual filename (see property in the row above).</para>
									<para/>
									<para>Example:</para>
									<para>simulateStaticDocuments_pEnc_onlyP = tx_maillisttofaq_pi1[pointer], L, print</para>
									<para/>
									<para>-&gt; this will allow the "pointer" parameter for the extension "maillisttofaq" to be included (in addition to whatever vars the extension sets itself) and further the parameter "L" (could be language selection) and "print" (could be print-version).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>content_from_pid_allowOutsideDomain</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Using the "Show content from this page instead" feature allows you to insert content from the current domain only. Setting this option will allow content included from anywhere in the page tree!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>absRefPrefix</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If this value is set, then all relative links in TypoScript are prepended with this string. Used to convert relative paths to absolute paths.</para>
									<para/>
									<para>Note: This values is automatically set to the dirname of the index.php script in case simulateStaticDocuments is set to "PATH_INFO".</para>
									<para>If you're working on a server where you have both internal and external access, you might do yourself a favor and set the absRefPrefix to the url and path of you site, e.g. http://www.typo3.com/. If you do not, you risk to render pages to cache from the internal network and thereby prefix image-references and links with a non-accessible path from outside.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>pageRendererTemplateFile</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Sets the template for page renderer class (t3lib_PageRenderer).</para>
									<para/>
									<para>Example:</para>
									<para>pageRendererTemplateFile = fileadmin/test_pagerender.html</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noPageTitle</para>
								</entry>
								<entry>
									<para>integer</para>
								</entry>
								<entry>
									<para>If you only want to have the site name (from the template record) in your &lt;title&gt; tag, set this to 1. If the value is 2 then the &lt;title&gt; tag is not printed at all.</para>
									<para>Please take note that this tag is required for XHTML compliant output, so you should only disable this tag if you generate it manually already.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>pageTitleFirst</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>TYPO3 by default prints a title tag in the format "website: page title". </para>
									<para>If pageTitleFirst is set (and if the page title is printed), then the page title will be printed IN FRONT OF the template title. So it will look like "page title: website". </para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>titleTagFunction </para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>Passes the default &lt;title&gt; tag content to this function. No TypoScript parameters are passed though.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>moveJsFromHeaderToFooter</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, all JavaScript (includes and inline) will be moved to the bottom of the HTML document, which is after the content and before the closing body tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>headerComment </para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>The content is added before the "TYPO3 Content Management Framework" comment in the &lt;head&gt; section of the page. Use this to insert a note like that "Programmed by My-Agency".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>language</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Language key. See stdWrap.lang for more information.</para>
									<para>Select between:</para>
									<para>English &#xA0;(default) = [empty]</para>
									<para>Danish = dk</para>
									<para>German = de</para>
									<para>Norwegian = no</para>
									<para>Italian = it</para>
									<para>etc... </para>
									<para/>
									<para>Value must correspond with the key used for backend system language if there is one. See inside config_default.php or look at the translation page on TYPO3.org for the official 2-byte key for a given language. Notice that selecting the official key is important if you want labels in the correct language from "locallang" files.</para>
									<para>If the language you need is not yet a system language in TYPO3 you can use an artificial string of your choice and provide values for it via the TypoScript template where the property "_LOCAL_LANG" for most plugins will provide a way to override/add values for labels. The keys to use must be looked up in the locallang-file used by the plugin of course.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>language_alt</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If "config.language" (above) is used, this can be set to another language key which will be used for labels if a label was not found for the main language. For instance a brazil portuguese website might specify "pt" as alternative language which means the portuguese label will be shown if none was available in the main language, brazil portuguese. This feature makes sense if one language is incompletely translated and close to another language.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sys_language_uid</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>This value points to the uid of a record from the "sys_language" table and if set, this means that various parts of the frontend display code will select records which are assigned to this language. See -&gt;SELECT</para>
									<para/>
									<para>Internally, the value is depending on whether an Alternative Page Language record can be found with that language. If not, the value will default to zero (default language) except if "sys_language_mode" is set to a value like "content_fallback".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sys_language_mode</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Setting various modes of handling localization.</para>
									<para>The syntax is "[keyword] ; [value]".</para>
									<para/>
									<para>Possible keywords are:</para>
									<para/>
									<para>[default] - The system will look for a translation of the page (from "Alternative Page Language" table) and if it is not found it will fall back to the default language and display that.</para>
									<para/>
									<para>content_fallback - [ Recommended ] The system will always operate with the selected language even if the page is not translated with a page overlay record. This will keep menus etc. translated. However, the content on the page can still fall back to another language, defined by the value of this keyword, e.g. "content_fallback ; 1,0" to fall back to the content of sys_language_uid 1 and if that is not present either, to default (0)</para>
									<para/>
									<para>strict - The system will report an error if the requested translation does not exist. Basically this means that all pages with gray background in the Web&gt;Info / Localization overview module will fail (they would otherwise fall back to default language in one or another way)</para>
									<para/>
									<para>ignore - The system will stay with the selected language even if the page is not translated and there's no content available in this language, so you can handle that situation on your own then.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sys_language_overlay</para>
								</entry>
								<entry>
									<para>boolean / keyword</para>
								</entry>
								<entry>
									<para>If set, records from certain tables selected by the CONTENT cObject using the "languageField" setting will select the default language (0) instead of any language set by sys_language_uid / sys_language_mode. In addition the system will look for a translation of the selected record and overlay configured fields.</para>
									<para>The requirements for this is that the table is configured with "languageField" and "transOrigPointerField" in the [ctrl] section of $TCA. Also, exclusion of certain fields can be done with the "l10n_mode" directive in the field-configuration of $TCA.</para>
									<para/>
									<para>For backend administration this requires that you configure the "Web&gt;Page" module to display content elements accordingly; That each default element is shown and next to it any translation found. This configuration can be done with Page TSconfig for a section of the website using the object path "mod.web_layout.defLangBinding = 1".</para>
									<para/>
									<para>Keyword: </para>
									<para>hideNonTranslated : If this keyword is used a record that has no translation will not be shown. The default is that records with no translation will show up in the default language.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sys_language_softMergeIfNotBlank</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Setting additional "mergeIfNotBlank" fields from TypoScript.</para>
									<para/>
									<para>Background:</para>
									<para>In TCA you can configure "l10n_mode" - localization mode - for each field. Two of the options affect how the frontend displays content; The values "exclude" and "mergeIfNotBlank" (see "TYPO3 Core API" document for details). The first ("exclude") simply means that the field when found in a translation of a record will not be overlaid the default records field value. The second ("mergeIfNotBlank") means that it will be overlaid only if it has a non-blank value.</para>
									<para>Since it might be practical to set up fields for "mergeIfNotBlank" on a per-site basis this options allows you to override additional fields from tables.</para>
									<para/>
									<para>Syntax:</para>
									<para>&#xA0;[table]:[field], &#xA0;[table]:[field], &#xA0;[table]:[field], ...</para>
									<para/>
									<para>Example:</para>
									<para>config.sys_language_softMergeIfNotBlank = tt_content:image , tt_content:header</para>
									<para/>
									<para>This setting means that the header and image field of content elements will be used from the translation only if they had a non-blank value. For the image field this might be very practical because it means that the image(s) from the default translation will be used unless other images are inserted!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>sys_language_softExclude</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Setting additional "exclude" flags for l10n_mode in TCA for frontend rendering. Works exactly like sys_language_softMergeIfNotBlank (see that for details - same Syntax!).</para>
									<para/>
									<para>Fields set in this property will override if the same field is set for "sys_language_softMergeIfNotBlank".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>typolinkCheckRootline</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then every "typolink" is checked whether it's linking to a page within the current rootline of the site.</para>
									<para>If not, then TYPO3 searches for the first found domain record (without redirect) in that rootline from out to in. </para>
									<para>If found (another domain), then that domain is prepended the link, the external target is used instead and thus the link jumps to the page in the correct domain.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>typolinkEnableLinksAcrossDomains</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>This option enables to create links across domains using current domain's linking scheme.</para>
									<para/>
									<para>If this option is not set, then all cross-domain links will be generated as</para>
									<para>"http://domain.tld/index.php?id=12345" (where 12345 is page id). If this option is set and current site uses, for example, simulateStatic, then links will be generated as "http://domain.tld/PageTitle.12345.html" (includes RTE links too). Setting this option requires that domains, where pages are linked, have the same configuration for:</para>
									<para>- linking scheme (i.e. all use simulateStatic or RealURL or CoolURI but not any mixture)</para>
									<para>- all domains have identical localization settings (config.sys_language_XXX directives) </para>
									<para>- all domains have the same set of languages defined</para>
									<para/>
									<para>This option implies "config.typolinkCheckRootline=1", which will be activated automatically. Setting value of "config. typolinkCheckRootline" inside TS template will have no effect.</para>
									<para/>
									<para>Disclaimer: it must be understood that while link is generated to another domain, it is still generated in the context of current domain. No side effects are known at the time of writing of this documentation but they may exist. If any side effects are found, this documentation will be updated to include them.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>typolinkLinkAccessRestrictedPages</para>
								</entry>
								<entry>
									<para>integer (page id) / keyword "NONE"</para>
								</entry>
								<entry>
									<para>If set, typolinks pointing to access restricted pages will still link to the page even though the page cannot be accessed. If the value of this setting is an integer it will be interpreted as a page id to which the link will be directed. </para>
									<para>If the value is "NONE" the original link to the page will be kept although it will generate a page-not-found situation (which can of course be picked up properly by the page-not-found handler and present a nice login form).</para>
									<para/>
									<para>See "showAccessRestrictedPages" for menu objects as well (similar feature for menus)</para>
									<para/>
									<para>Example:</para>
									<para>config.typolinkLinkAccessRestrictedPages = 29</para>
									<para>config.typolinkLinkAccessRestrictedPages_addParams = &amp;return_url=###RETURN_URL###&amp;pageId=###PAGE_ID###</para>
									<para/>
									<para>Will create a link to page with id 29 and add GET parameters where the return URL and original page id is a part of it.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>typolinkLinkAccessRestrictedPages_addParams</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>See "typolinkLinkAccessRestrictedPages" above</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>notification_email_urlmode</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This option allows you to handle URL's in plain text emails so long URLS of more than 76 chars are not broken. This option can be either empty or "76" or "all". </para>
									<para>If the string is blank, all links in plaintext emails are untouched. </para>
									<para>If it's set to 76 then all links longer then 76 characters are stored in the database and a hash is sent in the GET-var ?RDCT=[md5/20] to the index.php script which finds the proper link in the database and issues a location header (redirection). </para>
									<para>If the value is "all" then ALL "http://" links in the message are converted.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>notification_email_encoding</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This sets the encoding of plaintext emails (notification messages). The default encoding is "quoted-printable". But setting this to eg. "base64" will encode the content with base64 encoding.</para>
									<para/>
									<para>Values possible:</para>
									<para>base64</para>
									<para>quoted-printable</para>
									<para>8bit</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>notification_email_charset</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Alternative charset for the notification mails.</para>
								</entry>
								<entry>
									<para>ISO-8859-1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>admPanel</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the admin panel appears in the bottom of pages.</para>
									<para/>
									<para>NOTE: In addition the panel must be enabled for the user as well, using the TSconfig for the user! See the TSconfig reference about additional admin panel properties.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beLoginLinkIPList</para>
								</entry>
								<entry>
									<para>[IP-number]</para>
								</entry>
								<entry>
									<para>If set and REMOTE_ADDR matches one of the listed IP-numbers (Wild-card, *, allowed) then a link to the typo3/ login scrip with redirect pointing back to the page is shown.</para>
									<para/>
									<para>NOTE: beLoginLinkIPList_login and/or beLoginLinkIPList_logout (see below) must be defined if the link should show up!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beLoginLinkIPList_login</para>
								</entry>
								<entry>
									<para>HTML</para>
								</entry>
								<entry>
									<para>HTML code wrapped with the login link, see 'beLoginLinkIPList'</para>
									<para/>
									<para>Example:</para>
									<para>&lt;hr /&gt;&lt;b&gt;LOGIN&lt;/b&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beLoginLinkIPList_logout</para>
								</entry>
								<entry>
									<para>HTML</para>
								</entry>
								<entry>
									<para>HTML code wrapped with the logout link, see above</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>index_enable</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Enables cached pages to be indexed.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>index_externals</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, external media linked to on the pages is indexed as well.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>index_descrLgd</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>This indicates how many chars to preserve as description for an indexed page. This may be used in the search result display.</para>
								</entry>
								<entry>
									<para>200</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>index_metatags</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>This allows to turn on or off the indexing of metatags. It is turned on by default.</para>
								</entry>
								<entry>
									<para>true</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>xhtml_cleaning</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Tries to clean up the output to make it XHTML compliant and a bit more. THIS IS NOT COMPLETE YET, but a "pilot" to see if it makes sense anyways. For now this is what is done:</para>
									<para/>
									<para>What it does at this point:</para>
									<para>- All tags (img,br,hr) is ended with "/&gt;" - others?</para>
									<para>- Lowercase for elements and attributes</para>
									<para>- All attributes in quotes</para>
									<para>- Add "alt" attribute to img-tags if it's not there already.</para>
									<para/>
									<para>What it does NOT do (yet) according to XHTML specs.:</para>
									<para>- Wellformedness: Nesting is NOT checked</para>
									<para>- name/id attribute issue is not observed at this point.</para>
									<para>- Certain nesting of elements not allowed. Most interesting, &lt;PRE&gt; cannot contain img, big,small,sub,sup ...</para>
									<para>- Wrapping scripts and style element contents in CDATA - or alternatively they should have entities converted.</para>
									<para>- Setting charsets may put some special requirements on both XML declaration/ meta-http-equiv. (C.9)</para>
									<para>- UTF-8 encoding is in fact expected by XML!!</para>
									<para>- stylesheet element and attribute names are NOT converted to lowercase</para>
									<para>- ampersands (and entities in general I think) MUST be converted to an entity reference! (&amp;amps;). This may mean further conversion of non-tag content before output to page. May be related to the charset issue as a whole.</para>
									<para>- Minimized values not allowed: Must do this: selected="selected"</para>
									<para/>
									<para>Please see the class t3lib_parsehtml for details.</para>
									<para>You can enable this function by the following values:</para>
									<para/>
									<para>all = the content is always processed before it may be stored in cache. </para>
									<para>cached = only if the page is put into the cache, </para>
									<para>output = only the output code just before it's echoed out.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>prefixLocalAnchors</para>
								</entry>
								<entry>
									<para>string keyword</para>
								</entry>
								<entry>
									<para>If set to one of the keywords, the content will have all local anchors in links prefixed with the path of the script. Basically this means that &lt;a href="#"&gt; will be transformed to &lt;a href="path/path/script?params#"&gt;. This procedure is necessary if the &lt;base&gt; tag is set in the script (eg. if "realurl" extension is used to produce Speaking URLs).</para>
									<para/>
									<para>Keywords are the same as for "xhtml_cleaning", see above.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>disablePrefixComment</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the stdWrap property "prefixComment" will be disabled, thus preventing any revealing and space-consuming comments in the HTML source code.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>baseURL</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This writes the &lt;base&gt; tag in the header of the document. Set this to the value that is expected to be the URL and append a "/" to the end of the string.</para>
									<para/>
									<para>Example:</para>
									<para>config.baseURL = http://typo3.org/sub_dir/</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tx_[extension key with no underscores]_[*]</para>
								</entry>
								<entry>
									<para>-</para>
								</entry>
								<entry>
									<para>Configuration space for extensions. This can be used &#x2013; for example &#x2013; by plugins that need some TypoScript configuration, but that don't actually display anything in the frontend (i.e. don't receive their configuration as an argument &#xA0;from the frontend rendering process).</para>
									<para/>
									<para>Example:</para>
									<para>config.tx_realurl_enable = 1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:config/-&gt;CONFIG]</para>
			</section>
			<section>
				<title>"CONSTANTS"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>Array...</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Constants. </para>
									<para/>
									<para>Examples:</para>
									<para>.EMAIL = email@email.com</para>
									<para>Now if parseFunc anywhere is configured with constants=1 then all cases of the string ###EMAIL### will be substituted in the text.</para>
									<para>see -&gt;parseFunc</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:constants]</para>
			</section>
			<section>
				<title>"PAGE"</title>
				<para>Pages are referenced by two main values. The "id" and "type". </para>
				<para>The "id" points to the uid of the page (or the alias). Thus the page is found. </para>
				<para>The "type" is used to define how the page should be rendered. This is primarily used with framesets. Here the frameset normally has the type=0 (or not set) and the documents in the frameset would be defined with another type, e.g. type=1 for the content-page.</para>
				<para>You should explore the framesets of the TYPO3-sites around. Also look in the standard-templates for framesets.</para>
				<para>It's a good habit to use type=1 for the main-page of a website with frames. With no-frames sites type is normally zero.</para>
				<para>Another good habit is to use "page" as the top-level object name for the content-page on a website.</para>
				<para>Most of this codes is executed in the PHP-script typo3/sysext/cms/tslib/class.tslib_pagegen.php.</para>
				<informaltable frame="all">
					<tgroup cols="3.785714285714286">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>typeNum</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>This decides the the typeId of the page. The value defaults to 0 for the first found PAGE object, but it MUST be set and be unique as soon you use more than one such object (watch this if you use frames on your page)!</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>Wraps the content of the the cObject array</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the content of the the cObject array with stdWrap options</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bodyTagCObject</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is default bodytag overridden by ".bodyTag" if that is set.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bodyTag</para>
								</entry>
								<entry>
									<para>&lt;tag&gt;</para>
								</entry>
								<entry>
									<para>Body tag on the page</para>
									<para/>
									<para>Example:</para>
									<para>&lt;body bgcolor="{$bgCol}"&gt;</para>
								</entry>
								<entry>
									<para>&lt;body bgcolor="#FFFFFF"&gt;</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>headTag</para>
								</entry>
								<entry>
									<para>&lt;tag&gt;</para>
								</entry>
								<entry>
									<para>Head-tag if alternatives are wanted</para>
								</entry>
								<entry>
									<para>&lt;head&gt;</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>bodyTagMargins</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>margins in the body tag. </para>
									<para/>
									<para>Property:</para>
									<para>.useCSS = 1 (boolean) - will set a "BODY {margin: ...}" line in the in-document style declaration - for XHTML compliance.</para>
									<para/>
									<para>Example:</para>
									<para>value 4</para>
									<para>adds leftmargin="4" topmargin="4" marginwidth="4" marginheight="4" &#xA0;to the bodyTag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bodyTagAdd</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This content is added to the end of the bodyTag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bgImg</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para>Background image on the page. This is automatically added to the body-tag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>frameSet</para>
								</entry>
								<entry>
									<para>-&gt;FRAMESET</para>
								</entry>
								<entry>
									<para>if any properties is set to this property, the page is made into a frameset.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>meta</para>
								</entry>
								<entry>
									<para>-&gt;META</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>shortcutIcon</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Favicon of the page. Create a reference to an icon here!</para>
									<para>Browsers that support favicons display them in the browser's address bar, next to the site's name in lists of bookmarks, and next to the page's title in the tab.</para>
									<para/>
									<para>Note:</para>
									<para>This must be a valid ".ico"-file (iconfile)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>headerData</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Inserts content in the header-section. Could be JavaScripts, meta-tags, other stylesheet references. </para>
									<para>By default, gets inserted after all the style definitions.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>footerData</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Same as headerData above, except that this block gets included at the bottom of the page (just before the closing body tag).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>config</para>
								</entry>
								<entry>
									<para>-&gt;CONFIG</para>
								</entry>
								<entry>
									<para>configuration for the page. Any entries override the same entries in the toplevel-object "config".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibs</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>With this you may include php-files. This does the same as "includeLibrary" in -&gt;CONFIG but this can include more than one file. These files are included after the file of includeLibrary.</para>
									<para/>
									<para>NOTE:</para>
									<para>The toplevel object "includeLibs" and the scripts defined with this property is added to each other. Script-keys (that is the "array of strings"-value, like below "tx_myext") from this property of the page overrides any scripts-keys from the toplevel "includeLibs" property!</para>
									<para>The script-filenames are of the datatype "resource".</para>
									<para/>
									<para>Example:</para>
									<para>includeLibs.tx_myext = lib_filename.php</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry namest="c1" nameend="c4">
									<para/>
									<para>JavaScript:</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>javascriptLibs</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>This allows to include the JavaScript libraries that are shipped with the TYPO3 Core.</para>
									<para/>
									<para>javascriptLibs {</para>
									<para>&#xA0; &#xA0; &#xA0;# include prototype</para>
									<para>&#xA0; &#xA0;Prototype = 1</para>
									<para/>
									<para>&#xA0; &#xA0; &#xA0;# include Scriptaculous</para>
									<para>&#xA0; &#xA0;Scriptaculous = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# adds modules dragdrop and controls to Scriptaculous</para>
									<para>&#xA0; &#xA0;Scriptaculous.modules = dragdrop,controls</para>
									<para/>
									<para>&#xA0; &#xA0; &#xA0;# include ExtCore</para>
									<para>&#xA0; &#xA0;ExtCore = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# include ExtCore debug file (uncompressed)</para>
									<para>&#xA0; &#xA0;ExtCore.debug = 1</para>
									<para/>
									<para>&#xA0; &#xA0; &#xA0;# includes ExtJS</para>
									<para>&#xA0; &#xA0;ExtJs = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# include ext-all.css</para>
									<para>&#xA0; &#xA0;ExtJs.css = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# include default theme</para>
									<para>&#xA0; &#xA0;ExtJs.theme = 1</para>
									<para>&#xA0; &#xA0; # load specific adapter (jquery|prototype|yui)</para>
									<para>&#xA0; &#xA0;ExtJs.adapter = &#x2026;</para>
									<para>&#xA0; &#xA0; &#xA0;# initialize QuickTips</para>
									<para>&#xA0; &#xA0;ExtJs.quickTips = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# includes ExtJS debug file (uncompressed)</para>
									<para>&#xA0; &#xA0;ExtJs.debug = 1</para>
									<para/>
									<para>&#xA0; &#xA0; &#xA0;# include SVG library</para>
									<para>&#xA0; &#xA0;SVG = 1</para>
									<para>&#xA0; &#xA0; &#xA0;# include SVG debug file</para>
									<para>&#xA0; &#xA0;SVG.debug = 1</para>
									<para>&#xA0; &#xA0; &#xA0;#force rendering with flash</para>
									<para>&#xA0; &#xA0;SVG.forceFlash = 1</para>
									<para>}</para>
									<para>Note: If both ExtCore and ExtJS are requested, the only superset ExtJS will be loaded. This will also affect any options set. They will only come from ExtJS. </para>
									<para>Note: In TYPO3 4.5.2 and older you should either request ExtJS or ExtCore, but not both together. Requesting both at the same time will lead to errors. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>inlineLanguageLabel</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>ExtJS specific, adds language labels to the page.</para>
									<para/>
									<para>Example:</para>
									<para>inlineLanguageLabel {</para>
									<para>&#xA0; &#xA0;label1 = 123</para>
									<para>&#xA0; &#xA0;label2 = 456</para>
									<para>}</para>
									<para/>
									<para>will produce following source:</para>
									<para/>
									<para>TYPO3.lang = {"label1":"123","label2":"456"};</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>inlineSettings</para>
								</entry>
								<entry>
									<para>array of strings</para>
								</entry>
								<entry>
									<para>ExtJS specific, adds settings to the page.</para>
									<para/>
									<para>Example:</para>
									<para>page.inlineSettings {</para>
									<para>&#xA0; &#xA0;setting1 = Hello</para>
									<para>&#xA0; &#xA0;setting2 = GoOnTop</para>
									<para>}</para>
									<para/>
									<para>will produce following source:</para>
									<para/>
									<para>TYPO3.settings = {"TS":{"setting1":"Hello","setting2":"GoOnTop"}};</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>extOnReady</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>ExtJS specific, adds inline javascript, wrapped in Ext.onReady.</para>
									<para/>
									<para>Example:</para>
									<para>page.extOnReady {</para>
									<para>&#xA0; &#xA0;10 = TEXT</para>
									<para>&#xA0; &#xA0;10.value = Ext.Msg.alert("TypoScript Message","Hello World!");</para>
									<para>}</para>
									<para/>
									<para>will produce following source:</para>
									<para/>
									<para>Ext.onReady(function() {Ext.Msg.alert("TypoScript Message","Hello World!"); });</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeJSlibs.[array]</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Adds JS library files to head of page.</para>
									<para/>
									<para>The file definition must be a valid "resource" datatype, otherwise nothing is inserted. This means that remote files cannot be referenced (i.e. using "http://..."), except by using the ".external" property.</para>
									<para/>
									<para>Each file has optional properties:</para>
									<para>.allWrap - wraps the complete tag, useful for conditional comments.</para>
									<para>.external - If set, there is no file existence check. Useful for inclusion of external files.</para>
									<para/>
									<para>Example:</para>
									<para>includeJSlibs.twitter = http://twitter.com/javascripts/blogger.js</para>
									<para>includeJSlibs.twitter.external = 1</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeJSFooterlibs.[array]</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Same as includeJSlibs above, except that this block gets included at the bottom of the page (just before the closing body tag).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeJS.[array]</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Inserts one or more (Java)Scripts in &lt;script&gt; tags.</para>
									<para/>
									<para>The file definition must be a valid "resource" datatype, otherwise nothing is inserted. This means that remote files cannot be referenced (i.e. using "http://..."), except by using the ".external" property.</para>
									<para/>
									<para>Each file has optional properties:</para>
									<para>.type - setting the MIME type of the script (default: text/javascript)</para>
									<para>.compressed - boolean flag. This will be used by external compressors to see if the file is already compressed.</para>
									<para>.forceOnTop - boolean flag. If set, this file will be added on top of all other files.</para>
									<para>.allWrap - wraps the complete tag, useful for conditional comments.</para>
									<para>.external - If set, there is no file existence check. Useful for inclusion of external files.</para>
									<para/>
									<para>Example:</para>
									<para>includeJS {</para>
									<para>&#xA0; file1 = fileadmin/helloworld.js</para>
									<para>&#xA0; file1.type = application/x-javascript</para>
									<para>&#xA0; file2 = javascript_uploaded_to_template*.js</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeJSFooter.[array]</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Same as includeJS above, except that this block gets included at the bottom of the page (just before the closing body tag).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>jsInline</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Use cObjects for creating inline JavaScript</para>
									<para/>
									<para>Example:</para>
									<para>page.jsInline {</para>
									<para>10 = TEXT</para>
									<para>10.dataWrap = var pageId = {TSFE:id};</para>
									<para>}</para>
									<para/>
									<para>Note:</para>
									<para>with config.removeDefaultJS = external, the inlineJS is moved to external file.</para>
									<para>with config.minifyJS = 1, the jsInline will be minified as well.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>jsFooterInline</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Same jsInline above, except that the JavaScript gets inserted at the bottom of the page (just before the closing body tag).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>inlineJS</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Inserts inline JavaScript in the header-section. Don't use script-tags as they are added by TYPO3.</para>
									<para/>
									<para>Example:</para>
									<para>page.inlineJS.10 = TEXT</para>
									<para>page.inlineJS.10.value = function a(val) { alert(val); }</para>
									<para/>
									<para>with config.removeDefaultJS = external the inlineJS is moved to external file.</para>
									<para>with config.minifyJS = 1 the inlineJS will be minified as well.</para>
									<para/>
									<para>Note: This option was deprecated and has been removed in TYPO3 4.3. Use jsInline instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry namest="c1" nameend="c4">
									<para/>
									<para>CSS Stylesheets:</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stylesheet</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Inserts a stylesheet in the &lt;HEAD&gt;-section of the page;</para>
									<para>&lt;link rel="stylesheet" href="[resource]"&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeCSS.[array]</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Inserts a stylesheet (just like the .stylesheet property) by allows to setting up more than a single stylesheet, because you can enter files in an array.</para>
									<para/>
									<para>The file definition must be a valid "resource" datatype, otherwise nothing is inserted.</para>
									<para/>
									<para>Each file has optional properties:</para>
									<para>.media - setting the media attribute of the &lt;style&gt; tag.</para>
									<para>.title - setting the title of the &lt;style&gt; tag.</para>
									<para>.alternate - If set (boolean) then the rel-attribute will be "alternate stylesheet"</para>
									<para>.import - If set (boolean) then the @import way of including a stylesheet is used instead of &lt;link&gt;</para>
									<para>.allWrap - wraps the complete tag, useful for conditional comments.</para>
									<para>.external - If set, there is no file existence check. Useful for inclusion of external files.</para>
									<para/>
									<para>Example:</para>
									<para>includeCSS {</para>
									<para>&#xA0; file1 = fileadmin/mystylesheet1.css</para>
									<para>&#xA0; file2 = stylesheet_uploaded_to_template*.css</para>
									<para>&#xA0; file2.title = High contrast</para>
									<para>&#xA0; file2.media = print</para>
									<para>&#xA0; ie6Style = fileadmin/css/style3.css</para>
									<para>&#xA0; ie6Style.allWrap = &lt;!--[if lte IE 7]&gt;|&lt;![endif]--&gt;</para>
									<para>&#xA0; cooliris = 
										<ulink url="http://www.cooliris.com/shared/">http://www.cooliris.com/shared/</ulink> &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; resources/css/global.css
									</para>
									<para>&#xA0; cooliris.external = 1</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cssInline</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY</para>
								</entry>
								<entry>
									<para>Use cObjects for creating inline CSS</para>
									<para/>
									<para>Example:</para>
									<para>cssInline {</para>
									<para>&#xA0; &#xA0; 10 = TEXT</para>
									<para>&#xA0; &#xA0; 10.value = h1 {margin:15px;}</para>
									<para>&#xA0; &#xA0; </para>
									<para>&#xA0; &#xA0; 20 = TEXT</para>
									<para>&#xA0; &#xA0; 20.value = h1 span {color: blue;}</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>CSS_inlineStyle</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This value is just passed on as inline css (in-document css encapsulated in &lt;style&gt;-tags)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry namest="c1" nameend="c4">
									<para/>
									<para>Other:</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>insertClassesFromRTE</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the classes for the Rich Text Editor configured in Page TSconfig is inserted in as the first thing in the Style-section right after the setting of the stylesheet.</para>
									<para/>
									<para>.add_mainStyleOverrideDefs = [* / list of tags ] - will add all the "RTE.default. mainStyleOverride_add" - tags configured as well.</para>
									<para/>
									<para>Might be deprecated soon. Most likely the RTE should be configured by the stylesheet instead. Stay tuned...</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noLinkUnderline</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Disables link-underlining. Uses in-document stylesheet.</para>
									<para/>
									<para>Deprecated. Use stylesheet instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>hover</para>
								</entry>
								<entry>
									<para>HTML-color</para>
								</entry>
								<entry>
									<para>The color of a link when the mouse moves over it! (only MSIE). Uses in-document stylesheet.</para>
									<para/>
									<para>Deprecated. Use stylesheet instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>hoverStyle</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Additional style information to the hover-color.</para>
									<para/>
									<para>Example:</para>
									<para>page.hoverStyle = font: bold; text-decoration: none;</para>
									<para/>
									<para>Deprecated. Use stylesheet instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>smallFormFields</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Renders formfields like textarea, input and select-boxes small with "verdana size 1" font. </para>
									<para>Uses in-document stylesheet.</para>
									<para/>
									<para>Tip:</para>
									<para>Use this together with the config-option "compensateFieldWidth" set to "0.6" for netscape-browsers in order to render the small form fields in the same width!</para>
									<para/>
									<para>Deprecated. Use stylesheet instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>adminPanelStyles</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Will include CSS styles for the Admin Panel.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(page)]</para>
			</section>
			<section>
				<title>"FE_DATA"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>array of tableNames</para>
								</entry>
								<entry>
									<para>-&gt;FE_TABLE</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:FEData]</para>
			</section>
			<section>
				<title>"FE_TABLE"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>default.[field]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This property is in charge of which default-values is used for the table:</para>
									<para/>
									<para>Example:</para>
									<para>This defines the default values used for new records. These values will be overridden with any value submitted instead (as long as the submitted fields are allowed due to "allowNew")</para>
									<para>default {</para>
									<para>&#xA0; subject = This is the default subject value!</para>
									<para>&#xA0; hidden = 1</para>
									<para>&#xA0; parent = 0</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>allowNew.[field]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This property is in charge of which fields that may be written from the frontend.</para>
									<para/>
									<para>Example:</para>
									<para>This defines that subject is a field, that may be submitted from the frontend. If a value is not submitted, subject is filled with the default value (see above). </para>
									<para>The field "hidden" on the other hand cannot be changed from the frontend. "hidden" will gain the value from the default definition (see above). If fields are set to "0" (zero) it's the same as if they were not defined in this array.</para>
									<para/>
									<para>allowNew {</para>
									<para>&#xA0; subject = 1</para>
									<para>&#xA0; hidden = 0</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>allowEdit.[field]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Same as above ("allowNew") but this controls which fields that may be written in case of an update of a record (and not a new submission)</para>
									<para>Please pay attention to the property below! &#xA0;("overrideEdit")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>overrideEdit.[field]</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>This works like default-values above but is values inserted after the submitted values have been processed. This means that opposite to default-values overwritten by the submitted values, these values override the submitted values.</para>
									<para/>
									<para>Example:</para>
									<para>In this case overrideEdit secures that if a user updates his record (if he "own" it) the "hidden"-field will be set no matter what.</para>
									<para/>
									<para>overrideEdit {</para>
									<para>&#xA0; hidden = 1</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>userIdColumn</para>
								</entry>
								<entry>
									<para>string (field)</para>
								</entry>
								<entry>
									<para>This is a string that points to the column of a record where the user-id of the current fe_user should be inserted. This fe_user-uid is inserted/updated both by "new" and "edit"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>autoInsertPID</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Works with new records: Insert automatically the PID of the page, where the submitted data is sent to. Any "pid" supplied from the submitted data will override. This is for convenience.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>processScript</para>
								</entry>
								<entry>
									<para>resource</para>
								</entry>
								<entry>
									<para>Include-script to be used for processing of incoming data to the table. The script is included from a function in the class tslib_fetce</para>
									<para>This is the really important option, because whether or not you are going to utilize the "cleaning"/"authorization" features of the properties above depend on how you write your script to process data and put it in the database.</para>
									<para>A very good example is to look at "media/scripts/guest_submit.inc", included from static_template "plugin.tt_guest" (Used for the default guestbook feature)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>separator</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Separator character used when the submitted data is an array from eg. a multiple selector box.</para>
								</entry>
								<entry>
									<para>chr(10) (linebreak)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>doublePostCheck</para>
								</entry>
								<entry>
									<para>string (field name)</para>
								</entry>
								<entry>
									<para>Specifies a field name (integer) into which an integer-hash compiled of the submitted data is inserted. If the field is set, then submissions are checked whether another record with this value already exists. If so, the record is NOT inserted, because it's expected to be a "double post" (posting the same data more than once)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:FEData.(tablename)/-&gt;FE_TABLE]</para>
			</section>
			<section>
				<title>"FRAMESET"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>frameObj</para>
								</entry>
								<entry>
									<para>Configuration of frames and nested framesets.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cols</para>
								</entry>
								<entry>
									<para>&lt;frameset&gt;-data:cols</para>
								</entry>
								<entry>
									<para>Cols</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>rows</para>
								</entry>
								<entry>
									<para>&lt;frameset&gt;-data:rows</para>
								</entry>
								<entry>
									<para>Rows</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>&lt;frameset&gt;-params</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>border="0" framespacing="0" frameborder="NO"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(page).frameSet/-&gt;FRAMESET]</para>
				<para/>
			</section>
			<section>
				<title>"FRAME"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>obj</para>
								</entry>
								<entry>
									<para>pointer to top-level object-name</para>
								</entry>
								<entry>
									<para>top-level object-name of a PAGE / FRAMESET</para>
									<para/>
									<para>Example:</para>
									<para>"left", "page", "frameset"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>options</para>
								</entry>
								<entry>
									<para>url-parameters</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>print=1&amp;othervar=anotherthing</para>
									<para>would add '&amp;print=1&amp;othervar=anotherthing' to the ".src"-content (if not ".src" is set manually!!)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>&lt;frame&gt;-params</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>scrolling="AUTO" noresize frameborder="NO"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>name</para>
								</entry>
								<entry>
									<para>&lt;frame&gt;-data:name</para>
								</entry>
								<entry>
									<para>Manually set name of frame</para>
									<para/>
									<para>NOTE: Is set automatically and should not be overridden under normal conditions!</para>
								</entry>
								<entry>
									<para>value of ".obj"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>src</para>
								</entry>
								<entry>
									<para>&lt;frame&gt;-data:src /stdWrap</para>
								</entry>
								<entry>
									<para>Instead of using the "obj" destination, you can define a specific src for your frame with this setting. This overrides the default behavior of using the "obj" parameter!</para>
								</entry>
								<entry>
									<para>typolink to id=[currentId]&amp;type=[obj-&gt;typeNum]</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(page).frameSet.(number)/-&gt;FRAMESET.(number)]</para>
				<section>
					<title>Example of a simple frameset with a topframe and content-frame:</title>
					<programlisting>frameset = PAGE</programlisting>
					<programlisting>frameset.typeNum = 0</programlisting>
					<programlisting/>
					<programlisting>page = PAGE</programlisting>
					<programlisting>page.typeNum = 1</programlisting>
					<programlisting/>
					<programlisting>top = PAGE</programlisting>
					<programlisting>top.typeNum = 3</programlisting>
					<programlisting/>
					<programlisting>frameset.frameSet.rows = 150,*</programlisting>
					<programlisting>frameset.frameSet.params = border="0" framespacing="0" frameborder="NO"</programlisting>
					<programlisting>frameset.frameSet {</programlisting>
					<programlisting>&#xA0; 1 = FRAME</programlisting>
					<programlisting>&#xA0; 1.obj = top</programlisting>
					<programlisting>&#xA0; 1.params = scrolling="NO" noresize frameborder="NO" marginwidth="0" marginheight="0"</programlisting>
					<programlisting>&#xA0; 2 = FRAME</programlisting>
					<programlisting>&#xA0; 2.obj = page</programlisting>
					<programlisting>&#xA0; 2.params = scrolling="AUTO" noresize frameborder="NO"</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>"META"</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>Array...</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Metatags</para>
									<para>If value is empty (after trimming) the metatag is not generated.</para>
									<para>If the "key" (eg. "REFRESH" or "DESCRIPTION") is "REFRESH" (caseinsensitive), then the "http-equiv"-attribute is used in the metatag instead of "name".</para>
									<para/>
									<para>Examples:</para>
									<para>.REFRESH = [sec]; [url, leave blank for same page]</para>
									<para>.DESCRIPTION = This is the description of the content in this document</para>
									<para>.KEYWORDS = These are the keywords...</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;META]</para>
				<para/>
			</section>
			<section>
				<title>"CARRAY"</title>
				<informaltable frame="all">
					<tgroup cols="3.4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is a numerical "array" of content-objects (cObjects). The order by which you specific the objects is not important as the array will be sorted before it's parsed!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry namest="c1" nameend="c4">
									<para>Occasional properties:</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>(stdWrap properties...)</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>NOTE: This applies ONLY if "CARRAY /stdWrap" is set to be data type</para>
									<para>If you specify any non-integer properties to a CARRAY, stdWrap will be invoked with all properties of the CARRAY.</para>
									<para/>
									<para>Example:</para>
									<para>This will return '&lt;B&gt;This will be rendered before "10"testing&lt;/B&gt;'</para>
									<para>10 = TEXT</para>
									<para>10.value = testing</para>
									<para>5 = HTML</para>
									<para>5.value = This will be rendered before "10"</para>
									<para>wrap = &lt;B&gt; |&lt;/B&gt;</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>(TDParams)</para>
								</entry>
								<entry>
									<para>&lt;TD&gt;-params</para>
								</entry>
								<entry>
									<para>NOTE: This applies ONLY if "CARRAY +TDParams" is set to be data type</para>
									<para>This property is used only in some cases where CARRAY is used. Please look out for a note about that in the various cases.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;CARRAY]</para>
			</section>
		</section>
		<section>
			<title>Content Objects (cObject)</title>
			<section>
				<title>PHP information:</title>
				<para>The content objects (cObjects) are primarily controlled by the PHP-script "typo3/sysext/cms/tslib/class.tslib_content.php". The PHP-class is named "tslib_cObj" and often this is also the variable-name of the objects ($cObj)</para>
				<para>The $cObj in PHP has an array, $this-&gt;data, which holds records of various kind. See data type "getText".</para>
				<para>This record is normally "loaded" with the record from a table depending on the situation. Say if you are creating a menu it's often loaded with the page-record of the actual menuitem or if it's about content-rendering it'll be the content-record.</para>
			</section>
			<section>
				<title>REUSING cOBJECTS:</title>
				<para>When dealing with "cObjects", you're allowed to use a special syntax in order to reuse cObjects without actually creating a copy. This has the advantage of minimizing the size of the cached template. But on the other hand it doesn't give you the flexibility of overriding values. </para>
				<para>This example will show you how it works:</para>
				<programlisting>#</programlisting>
				<programlisting># Temporary objects are defined:</programlisting>
				<programlisting>#</programlisting>
				<programlisting>lib.stdheader = COA</programlisting>
				<programlisting>lib.stdheader {</programlisting>
				<programlisting>&#xA0; stdWrap.wrapAlign.field = header_position</programlisting>
				<programlisting>&#xA0; stdWrap.typolink.parameter.field = header_link</programlisting>
				<programlisting>&#xA0; stdWrap.fieldRequired = header</programlisting>
				<programlisting/>
				<programlisting>&#xA0; 1 = TEXT</programlisting>
				<programlisting>&#xA0; 1.current = 1</programlisting>
				<programlisting>&#xA0; 1.fontTag = {$content.wrap.header1}</programlisting>
				<programlisting/>
				<programlisting>&#xA0; stdWrap.space = {$content.headerSpace}</programlisting>
				<programlisting>}</programlisting>
				<programlisting/>
				<programlisting/>
				<programlisting>#</programlisting>
				<programlisting># CType: header</programlisting>
				<programlisting>#</programlisting>
				<programlisting>tt_content.header = COA</programlisting>
				<programlisting>tt_content.header {</programlisting>
				<programlisting>&#xA0; 10 &lt; lib.stdheader</programlisting>
				<programlisting>&#xA0; 10.stdWrap.space &gt;</programlisting>
				<programlisting/>
				<programlisting>&#xA0; 20 = TEXT</programlisting>
				<programlisting>&#xA0; 20.field = subheader</programlisting>
				<programlisting>&#xA0; 20.fontTag = {$content.wrap.subheader1}</programlisting>
				<programlisting>}</programlisting>
				<programlisting/>
				<programlisting/>
				<programlisting>#</programlisting>
				<programlisting># CType: bullet</programlisting>
				<programlisting>#</programlisting>
				<programlisting>tt_content.bullets = COA</programlisting>
				<programlisting>tt_content.bullets {</programlisting>
				<programlisting>&#xA0; 10 = &lt; lib.stdheader</programlisting>
				<programlisting>&#xA0; 20 &lt; styles.content.bulletlist_gr</programlisting>
				<programlisting>}</programlisting>
				<para/>
				<para>First lib.stdheader is defined. This is (and must be) a cObject! (In this case it is COA.)</para>
				<para>Now lib.stdheader is copied to tt_content.header.10 with the "&lt;" operator. This means that an actual copy of lib.stdheader is created at parsetime.</para>
				<para>But this is not the case with tt_content.bullets.10. Here lib.stdheader is just pointed to and lib.stdheader will be used as the cObject at runtime.</para>
				<para>The reason why lib.stdheader was copied in the first case is the fact that it's needed to unset ".stdWrap.space" inside the cObject ("10.stdWrap.space &gt;"). This could NOT be done in the second case where only a pointer is created. </para>
				<section>
					<title>NOTE: </title>
					<para>If lib.stdheader was temp.stdheader instead, the pointer would not work! This is due to the fact that the runtime-reference would find nothing in "temp." as this is unset before the template is stored in cache!</para>
					<para>This goes for "temp." and "styles." (see the toplevel object definition elsewhere).</para>
					<para>Overriding values anyway:</para>
					<para>Although you cannot override values TypoScript-style (using the operators and all) the properties of the object which has the reference will be merged with the configuration of the reference. </para>
				</section>
				<section>
					<title>Example:</title>
					<programlisting>page.10 = TEXT</programlisting>
					<programlisting>page.10.value = kasper</programlisting>
					<programlisting>page.10.case = upper</programlisting>
					<programlisting/>
					<programlisting>page.20 = &lt; page.10</programlisting>
					<programlisting>page.20.case = lower</programlisting>
					<para>page.20.value &gt;</para>
					<programlisting>page.20.field = pages</programlisting>
					<para/>
					<para>The result is this config:</para>
					<para>
						<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100000000000005200000033285C6819.png" width=""/>
					</para>
					<para>Notice that .value was not cleared (the red line), because it's simply two arrays which are joined:</para>
					<para/>
					<para>
						<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100000000000006300000058004A5616.png" width=""/>
					</para>
					<para>So hence the red line in the above example is useless.</para>
				</section>
			</section>
			<section>
				<title>HTML</title>
				<para>The content object "HTML" can be used to output static text or html. stdWrap is available for the cObject itself and for the property "value". See the examples.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>value</para>
								</entry>
								<entry>
									<para>HTML /stdWrap</para>
								</entry>
								<entry>
									<para>Raw HTML-code.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after the stdWrap for the property ".value".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HTML]</para>
				<section>
					<title>Example:</title>
					<programlisting>10 = HTML</programlisting>
					<programlisting>10.value = This is a text in uppercase</programlisting>
					<programlisting>10.value.case = upper</programlisting>
				</section>
				<section>
					<title>Example:</title>
					<programlisting>10 = HTML</programlisting>
					<programlisting>10.value.field = bodytext</programlisting>
					<programlisting>10.value.br = 1</programlisting>
				</section>
				<section>
					<title>Example:</title>
					<programlisting>10 = HTML</programlisting>
					<programlisting>10.stdWrap.field = title</programlisting>
					<programlisting>10.stdWrap.wrap = &lt;strong&gt;|&lt;/strong&gt;</programlisting>
					<para/>
				</section>
			</section>
			<section>
				<title>TEXT</title>
				<para>TEXT is very similar to the cObject "HTML". But the stdWrap is on the very rootlevel of the object. This is non-standard. Check the example.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>value</para>
								</entry>
								<entry>
									<para>value /stdWrap</para>
								</entry>
								<entry>
									<para>text, wrap with stdWrap properties</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>(stdWrap properties...)</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).TEXT]</para>
				<section>
					<title>Example:</title>
					<programlisting>10 = TEXT</programlisting>
					<programlisting>10.value = This is a text in uppercase</programlisting>
					<programlisting>10.case = upper</programlisting>
				</section>
				<section>
					<title>Example:</title>
					<programlisting>10 = TEXT</programlisting>
					<programlisting>10.field = bodytext</programlisting>
					<programlisting>10.br = 1</programlisting>
					<para/>
				</section>
			</section>
			<section>
				<title>COBJ_ARRAY (COA, COA_INT)</title>
				<para>This cObject has the alias COA standing for "content object array". You can use "COA" this instead of COBJ_ARRAY.</para>
				<para>You can also create this object as a COA_INT in which case it works exactly like the PHP_SCRIPT_INT object does: It's rendered non-cached! The COA_INT provides a way to utilize this feature not only with PHP_SCRIPT cObjects but with any cObject.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>if</para>
								</entry>
								<entry>
									<para>-&gt;if</para>
								</entry>
								<entry>
									<para>if "if" returns false the COA is NOT rendered</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibs</para>
								</entry>
								<entry>
									<para>list of resource /stdWrap</para>
								</entry>
								<entry>
									<para>(This property is used only if the object is COA_INT!, See introduction.)</para>
									<para>This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.</para>
									<para>This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).COA/(cObject).COA_INT/(cObject).COBJ_ARRAY]</para>
				<section>
					<title>Example:</title>
					<programlisting>temp.menutable = COBJ_ARRAY</programlisting>
					<programlisting>temp.menutable {</programlisting>
					<programlisting>&#xA0; 10 = HTML</programlisting>
					<programlisting>&#xA0; 10.value = &lt;table border=0 cellpadding=0 cellspacing=0&gt;</programlisting>
					<programlisting/>
					<programlisting>&#xA0; 20 = HMENU</programlisting>
					<programlisting>&#xA0; 20.entryLevel = 0</programlisting>
					<programlisting>&#xA0; 20.1 = GMENU</programlisting>
					<programlisting>&#xA0; 20.1.NO {</programlisting>
					<programlisting>&#xA0; &#xA0; wrap = &lt;tr&gt;&lt;td&gt; | &lt;/td&gt;&lt;/tr&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; XY = {$menuXY}</programlisting>
					<programlisting>&#xA0; &#xA0; backColor = {$bgCol}</programlisting>
					<programlisting>&#xA0; &#xA0; 20 &#xA0;= TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; 20 {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; text.field = title</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontFile = media/fonts/hatten.ttf</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontSize = 23</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontColor = {$menuCol}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; offset = |*| 5,18 || 25,18</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; </programlisting>
					<programlisting>&#xA0; 30 = HTML</programlisting>
					<programlisting>&#xA0; 30.value = &lt;/table&gt;</programlisting>
					<programlisting>}</programlisting>
					<para/>
				</section>
			</section>
			<section>
				<title>FILE</title>
				<para>PHP-function: $this-&gt;fileResource()</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>resource /stdWrap</para>
								</entry>
								<entry>
									<para>If the resource is jpg,gif,jpeg,png, the image is inserted as an image-tag. All other formats are read and inserted into the HTML-code.</para>
									<para>The maximum filesize of documents to be read is set to 1024 kb internally!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkWrap</para>
								</entry>
								<entry>
									<para>linkWrap /stdWrap</para>
								</entry>
								<entry>
									<para>(Executed before ".wrap" and ".stdWrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".linkWrap" and before ".stdWrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".linkWrap" and ".wrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>altText</para>
									<para>titleText</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>For &lt;img&gt; output only!</para>
									<para/>
									<para>If no alttext is specified, it will use an empty alttext.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>emptyTitleHandling</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Value can be "keepEmpty" to preserve an empty title attribute, or "useAlt" to use the alt attribute instead.</para>
								</entry>
								<entry>
									<para>useAlt</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>longdescURL</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>For &lt;img&gt; output only!</para>
									<para/>
									<para>"longdesc" attribute (URL pointing to document with extensive details about image).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).FILE]</para>
				<section>
					<title>Example:</title>
					<para>In this example a page is defined, but the content between the body-tags comes directly from the file "gs.html":</para>
					<programlisting>page.10 = FILE</programlisting>
					<programlisting>page.10.file = fileadmin/gs/gs.html</programlisting>
				</section>
			</section>
			<section>
				<title>IMAGE</title>
				<para>PHP-function: $cObj-&gt;cImage();</para>
				<para>The array $GLOBALS['TSFE']-&gt;lastImageInfo is set with the info-array of the returning image (if any) and contains width, height and so on.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>&lt;IMG&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>border</para>
								</entry>
								<entry>
									<para>integer</para>
								</entry>
								<entry>
									<para>Value of the "border" attribute of the image tag.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>altText</para>
									<para>titleText</para>
									<para/>
									<para>(alttext)</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>If no alt text is specified, an empty alt text will be used.</para>
									<para/>
									<para/>
									<para>("alttext" is the old spelling of this attribute. It is deprecated since TYPO3 4.3 and will be used only if "altText" does not specify a value or properties.)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>emptyTitleHandling</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Value can be "keepEmpty" to preserve an empty title attribute, or "useAlt" to use the alt attribute instead.</para>
								</entry>
								<entry>
									<para>useAlt</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>longdescURL</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>"longdesc" attribute (URL pointing to document with extensive details about image).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkWrap</para>
								</entry>
								<entry>
									<para>linkWrap /stdWrap</para>
								</entry>
								<entry>
									<para>(before ".wrap")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imageLinkWrap</para>
								</entry>
								<entry>
									<para>boolean/</para>
									<para>-&gt;imageLinkWrap</para>
								</entry>
								<entry>
									<para>NOTE: ONLY active if linkWrap is NOT set and file is NOT GIFBUILDER (as it works with the original imagefile)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>if</para>
								</entry>
								<entry>
									<para>-&gt;if</para>
								</entry>
								<entry>
									<para>if "if" returns false the image is not shown!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).IMAGE]</para>
				<section>
					<title>Example:</title>
					<programlisting>&#xA0; &#xA0; 10 = IMAGE </programlisting>
					<programlisting>&#xA0; &#xA0; 10.file = toplogo*.gif</programlisting>
					<programlisting>&#xA0; &#xA0; 10.params = hspace=5</programlisting>
					<programlisting>&#xA0; &#xA0; 10.wrap = |&lt;BR&gt;</programlisting>
				</section>
			</section>
			<section>
				<title>IMG_RESOURCE</title>
				<para>Returns only the image-reference, possibly wrapped with stdWrap. May be used for putting background images in tables or table-rows or to import an image in your own include-scripts.</para>
				<para>The array $GLOBALS['TSFE']-&gt;lastImgResourceInfo is set with the info-array of the resulting image resource (if any) and contains width, height and so on.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).IMG_RESOURCE]</para>
				<para/>
			</section>
			<section>
				<title>CLEARGIF</title>
				<para>Inserts a transparent gif-file.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>height</para>
								</entry>
								<entry>
									<para>&lt;img&gt;-data:height /stdWrap</para>
								</entry>
								<entry>
									<para>Height of the image.</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>width</para>
								</entry>
								<entry>
									<para>&lt;img&gt;-data:width /stdWrap</para>
								</entry>
								<entry>
									<para>Width of the image.</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>|&lt;br /&gt;</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".wrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).CLEARGIF]</para>
				<section>
					<title>Example:</title>
					<programlisting>&#xA0; &#xA0; 20 = CLEARGIF</programlisting>
					<programlisting>&#xA0; &#xA0; 20.height = 20</programlisting>
				</section>
			</section>
			<section>
				<title>CONTENT</title>
				<para>This object is designed to generate content by making it possible to finely select records and rendering them.</para>
				<para>The register-key SYS_LASTCHANGED is updated with the tstamp-field of the records selected which has a higher value than the current.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>select</para>
								</entry>
								<entry>
									<para>-&gt;select</para>
								</entry>
								<entry>
									<para>The SQL-statement is set here!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>table</para>
								</entry>
								<entry>
									<para>TableName /stdWrap</para>
								</entry>
								<entry>
									<para>The table, the content should come from. </para>
									<para>In standard configuration this will be "tt_content"</para>
									<para>NOTE: Allowed tables are "pages" or tables prefixed with one of these: "tt_", "tx_", "ttx_", "fe_", "user_" or "static_"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>renderObj</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>&lt; [tablename]</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>slide</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>If set and no content element is found by the select command, then the rootLine will be traversed back until some content is found.</para>
									<para/>
									<para>Possible values are "-1" (slide back up to the siteroot), "1" (only the current level) and "2" (up from one level back).</para>
									<para/>
									<para>Use -1 in combination with collect.</para>
									<para/>
									<para>.collect (integer /stdWrap): If set, all content elements found on current and parent pages will be collected. Otherwise, the sliding would stop after the first hit. Set this value to the amount of levels to collect on, or use "-1" to collect up to the siteroot.</para>
									<para>.collectFuzzy (boolean /stdWrap): Only useful in collect mode. If no content elements have been found for the specified depth in collect mode, traverse further until at least one match has occurred.</para>
									<para>.collectReverse (boolean /stdWrap): Change order of elements in collect mode. If set, elements of the current page will be at the bottom.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wrap the whole content-story...</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".wrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).CONTENT]</para>
				<section>
					<title/>
				</section>
				<section>
					<title>Example (of the CONTENT-obj):</title>
					<programlisting>&#xA0; 1 = CONTENT</programlisting>
					<programlisting>&#xA0; 1.table = tt_content</programlisting>
					<programlisting>&#xA0; 1.select {</programlisting>
					<programlisting>&#xA0; &#xA0; pidInList = this</programlisting>
					<programlisting>&#xA0; &#xA0; orderBy = sorting</programlisting>
					<programlisting>&#xA0; }</programlisting>
				</section>
				<section>
					<title>Example (of record-renderObj's):</title>
					<programlisting>// Configuration for records with the typeField-value (often "CType") set to "header"</programlisting>
					<programlisting>tt_content.header.default {</programlisting>
					<programlisting>&#xA0; 10 = TEXT</programlisting>
					<programlisting>&#xA0; 10.field = header</programlisting>
					<programlisting>&#xA0; .....</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<programlisting>// Configuration for records with the typeField-value (often "CType") set to "bullets"</programlisting>
					<programlisting>// If field "layout" is set to "1" or "2" a special configuration is used, else default</programlisting>
					<programlisting>tt_content.bullets.subTypeField = layout</programlisting>
					<programlisting>tt_content.bullets.default {</programlisting>
					<programlisting>&#xA0; .....</programlisting>
					<programlisting>}</programlisting>
					<programlisting>tt_content.bullets.1 {</programlisting>
					<programlisting>&#xA0; .....</programlisting>
					<programlisting>}</programlisting>
					<programlisting>tt_content.bullets.2 {</programlisting>
					<programlisting>&#xA0; .....</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<programlisting>// This is what happens if the typeField-value does not match any of the above</programlisting>
					<programlisting>tt_content.default.default {</programlisting>
					<programlisting>&#xA0; .....</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>RECORDS</title>
				<para>This object is meant for displaying lists of records from a variety of tables. Contrary to the CONTENT object, it does not allow for very fine selections of records (it has no "select" property)</para>
				<para>The register-key SYS_LASTCHANGED is updated with the tstamp-field of the records selected which has a higher value than the current.</para>
				<para>NOTE: Records with parent ids (pid's) for non-accessible pages (that is hidden, timed or access-protected pages) are normally not selected. Pages may be of any type, except recycler. Disable the check with the "dontCheckPid"-option.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>source</para>
								</entry>
								<entry>
									<para>records-list /stdWrap</para>
								</entry>
								<entry>
									<para>List of record-id's, optionally with prepended table-names.</para>
									<para/>
									<para>Example:</para>
									<para>source = tt_content_34, 45, tt_links_56</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tables</para>
								</entry>
								<entry>
									<para>list of tables /stdWrap</para>
								</entry>
								<entry>
									<para>List of accepted tables. If any items in the ".source"-list are not prepended with a table name, the first table in this list is assumed to be the table for such records.</para>
									<para>Also table names configured in .conf are allowed.</para>
									<para/>
									<para>Example:</para>
									<para>tables = tt_content, tt_address, tt_links</para>
									<para>conf.tx_myexttable = TEXT</para>
									<para>conf.tx_myexttable.value = Hello world</para>
									<para/>
									<para>This adds the tables tt_content, tt_address, tt_links and tx_myexttable.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>conf.[tablename]</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>Config-array which renders records from table tablename</para>
								</entry>
								<entry>
									<para>If this is NOT defined, the rendering of the records is done with the toplevel-object [tablename] - just like the cObject, CONTENT!</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>dontCheckPid</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Normally a record cannot be selected, if its parent page (pid) is not accessible for the website user. This option disables that check.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".wrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).RECORDS]</para>
				<section>
					<title>Example:</title>
					<programlisting>&#xA0; 20 = RECORDS</programlisting>
					<programlisting>&#xA0; 20.source.field = records</programlisting>
					<programlisting>&#xA0; 20.tables = tt_address</programlisting>
					<programlisting>&#xA0; 20.conf.tt_address &lt; tt_address.default</programlisting>
				</section>
			</section>
			<section>
				<title>HMENU</title>
				<para>Generates hierarchical menus.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>(1 / 2 / 3 /...)</para>
								</entry>
								<entry>
									<para>menuObj</para>
								</entry>
								<entry>
									<para>Required!</para>
									<para>Defines which menuObj that should render the menu items on the various levels. </para>
									<para>1 is the first level, 2 is the second level, 3 is the third level, 4 is ....</para>
									<para/>
									<para>Example:</para>
									<para>temp.sidemenu = HMENU</para>
									<para>temp.sidemenu.1 = GMENU</para>
								</entry>
								<entry>
									<para>(no menu)</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>cache_period</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The number of seconds a menu may remain in cache. If this value is not set, the first available value of the following will be used:</para>
									<para>&#xA0; &#xA0; 1) cache_timeout of the current page</para>
									<para>&#xA0; &#xA0; 2) config.cache_period defined globally</para>
									<para>&#xA0; &#xA0; 3) 86400 (= 1 day)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>entryLevel</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Defines at which level in the rootLine the menu should start. </para>
									<para>Default is "0" which gives us a menu of the very first pages on the site.</para>
									<para>If the value is &lt; 0, entryLevel is chosen from "behind" in the rootLine. Thus "-1" is a menu with items from the outermost level, "-2" is the level before the outermost...</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>special</para>
								</entry>
								<entry>
									<para>"directory" / "list" / "updated" / "browse" / "rootline" / "keywords" / "language"</para>
								</entry>
								<entry>
									<para>See section "The .special property" and the according tables below.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>special.value</para>
								</entry>
								<entry>
									<para>list of page-uid's /stdWrap</para>
								</entry>
								<entry>
									<para>See above</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>minItems</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The minimum items in the menu. If the number of pages does not reach this level, a dummy-page with the title "..." and uid=[currentpage_id] is inserted.</para>
									<para/>
									<para>Notice: Affects all sub menus as well. To set the value for each menu level individually, set the properties in the menu objects (see "Common properties" table).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxItems</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The maximum items in the menu. More items will be ignored.</para>
									<para/>
									<para>Notice: Affects all sub menus as well. (See "minItems" for notice)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>begin</para>
								</entry>
								<entry>
									<para>int +calc</para>
								</entry>
								<entry>
									<para>The first item in the menu. </para>
									<para/>
									<para>Example:</para>
									<para>This results in a menu, where the first two items are skipped starting with item number 3:</para>
									<para>begin = 3</para>
									<para/>
									<para>Notice: Affects all sub menus as well. (See "minItems" for notice)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>excludeUidList</para>
								</entry>
								<entry>
									<para>list of integers</para>
								</entry>
								<entry>
									<para>This is a list of page uid's to exclude when the select statement is done. Comma-separated. You may add "current" to the list to exclude the current page.</para>
									<para/>
									<para>Example:</para>
									<para>The pages with these uid-number will NOT be within the menu!! Additionally the current page is always excluded too.</para>
									<para>excludeUidList = 34,2,current</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>excludeDoktypes</para>
								</entry>
								<entry>
									<para>list of integers</para>
								</entry>
								<entry>
									<para>Enter the list of page document types (doktype) to exclude from menus. By default pages that are "not in menu" (5) are excluded and those marked for backend user access only (6). </para>
								</entry>
								<entry>
									<para>5,6</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeNotInMenu</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, pages with the checkbox "Not in menu" checked will be included in menus.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>alwaysActivePIDlist</para>
								</entry>
								<entry>
									<para>list of integers /stdWrap</para>
								</entry>
								<entry>
									<para>This is a list of page UID numbers that will always be regarded as active menu items and thereby automatically opened regardless of the rootline.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>protectLvar</para>
								</entry>
								<entry>
									<para>boolean / keyword</para>
								</entry>
								<entry>
									<para>If set, then for each page in the menu it will be checked if an Alternative Page Language record for the language defined in "config.sys_language_uid" (typically defined via &amp;L) exists for the page. If that is not the case and the pages "Localization settings" have the "Hide page if no translation for current language exists" flag set, then the menu item will link to a non accessible page that will yield an error page to the user. Setting this option will prevent that situation by simply adding "&amp;L=0" for such pages, meaning that they will switch to the default language rather than keeping the current language.</para>
									<para>The check is only carried out if a translation is requested ("config.sys_language_uid" is not zero).</para>
									<para/>
									<para>Keyword: "all"</para>
									<para>When set to "all" the same check is carried out but it will not look if "Hide page if no translation for current language exists" is set - it always reverts to default language if no translation is found.</para>
									<para/>
									<para>For these options to make sense, they should only be used when "config.sys_language_mode" is not set to "content_fallback".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>addQueryString</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>see typolink.addQueryString</para>
									<para/>
									<para>Notice: This works only for special=language.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>if</para>
								</entry>
								<entry>
									<para>-&gt;if</para>
								</entry>
								<entry>
									<para>If "if" returns false, the menu is not generated</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>(Executed after ".wrap".)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU]</para>
				<section>
					<title>Example:</title>
					<programlisting>temp.sidemenu = HMENU</programlisting>
					<programlisting>temp.sidemenu.entryLevel = 1</programlisting>
					<programlisting>temp.sidemenu.1 = TMENU</programlisting>
					<programlisting>temp.sidemenu.1 {</programlisting>
					<programlisting>&#xA0; target = page</programlisting>
					<programlisting>&#xA0; NO.afterImg = media/bullets/dots2.gif |*||*| _</programlisting>
					<programlisting>&#xA0; NO.afterImgTagParams = hspace="4"</programlisting>
					<programlisting>&#xA0; NO.linkWrap = {$fontTag}</programlisting>
					<programlisting>&#xA0; NO.ATagBeforeWrap = 1</programlisting>
					<programlisting/>
					<programlisting>&#xA0; ACT &lt; .NO</programlisting>
					<programlisting>&#xA0; ACT = 1</programlisting>
					<programlisting>&#xA0; ACT.linkWrap = &lt;b&gt;{$fontTag}&lt;/b&gt;</programlisting>
					<para>}</para>
					<para/>
				</section>
				<section>
					<title>The .special property</title>
					<para>This property makes it possible to create menus that are not strictly reflecting the current page-structure, but rather creating menus with links to pages like "next/previous", "last modified", "pages in a certain page" and so on.</para>
					<para>Note: .entryLevel generally is not supported together with the .special property! The only exception is special.keywords. </para>
					<para>Also be aware that this property selects pages for the first level in the menu. Submenus by menuObjects 2+ will be created as usual.</para>
					<section>
						<title>special.directory</title>
						<para>A HMENU of type special = directory lets you create a menu listing the subpages of one or more parent pages. The parent pages are defined in the property ".value". It is usually used for sitemaps.</para>
						<para>Mount pages are supported.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>list of page ids /stdWrap</para>
										</entry>
										<entry>
											<para>This will generate a menu of all pages with pid = 35 and pid = 56.</para>
											<para>20 = HMENU</para>
											<para>20.special = directory</para>
											<para>20.special.value = 35, 56</para>
										</entry>
										<entry>
											<para>current page id</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.directory]</para>
					</section>
					<section>
						<title>special.list</title>
						<para>A HMENU of type special = list lets you create a menu that lists the pages you define in the property ".value".</para>
						<para>Mount pages are supported.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>list of page ids /stdWrap</para>
										</entry>
										<entry>
											<para>This will generate a menu with the two pages (uid=35 and uid=56) listed:</para>
											<para/>
											<para>20 = HMENU</para>
											<para>20.special = list</para>
											<para>20.special.value = 35, 56</para>
											<para/>
											<para>If .value is not set, the default uid is 0, so that only your homepage will be listed.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.list]</para>
					</section>
					<section>
						<title>special.updated</title>
						<para>An HMENU with the property special = updated will create a menu of the most recently updated pages.</para>
						<para>A note on ordering: The sorting menu is by default done in reverse order (desc) with the field specified by "mode", but setting "alternativeSortingField" for the menu object (e.g. TMENU or GMENU, see later) will override that.</para>
						<para>Mount pages are supported.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>list of page ids /stdWrap</para>
										</entry>
										<entry>
											<para>This will generate a menu of the most recently updated pages from the branches in the tree starting with the uid's (uid=35 and uid=56) listed.</para>
											<para>20 = HMENU</para>
											<para>20.special = updated</para>
											<para>20.special.value = 35, 56</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>mode</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>The field in the database which should be used to get the information about the last update from. </para>
											<para/>
											<para>The following values are possible:</para>
											<para>- SYS_LASTCHANGED: Is updated to the youngest tstamp of the records on the page when a page is generated.</para>
											<para>- crdate: Uses the "crdate"-field of the pagerecord.</para>
											<para>- tstamp: Uses the "tstamp"-field of the pagerecord, which is set automatically when the record is changed.</para>
											<para>- manual or lastUpdated: Use the field "lastUpdated", which can be set manually in the page-record.</para>
											<para>- starttime: Uses the starttime field.</para>
											<para/>
											<para>Fields with empty values are generally not selected.</para>
										</entry>
										<entry>
											<para>SYS_LASTCHANGED</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>depth</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>Defines the tree depth.</para>
											<para>The allowed range is 1-20.</para>
											<para>A depth of 1 means only the start id, depth of 2 means start-id + first level.</para>
											<para>Notice: "depth" is relative to "beginAtLevel".</para>
										</entry>
										<entry>
											<para>20</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>beginAtLevel</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>Determines starting level for the page trees generated based on .value and .depth.</para>
											<para/>
											<para>0 is default and includes the start id.</para>
											<para>1 starts with the first row of subpages,</para>
											<para>2 starts with the second row of subpages.</para>
											<para/>
											<para>Notice: "depth" is relative to this property.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>maxAge</para>
										</entry>
										<entry>
											<para>int (seconds) +calc</para>
										</entry>
										<entry>
											<para>Pages with update-dates older than the current time minus this number of seconds will not be shown in the menu no matter what. Default is "not used". You may use +-*/ for calculations.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>limit</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>Maximal number of items in the menu. Default is 10, max is 100.</para>
										</entry>
										<entry>
											<para>10</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>excludeNoSearchPages</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>If set, pages marked "No search" are not included.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.updated]</para>
						<para>The following example will generate a menu of the most recently updated pages from the branches in the tree starting with the uid's (uid=35 and uid=56) listed. Furthermore the field "tstamp" is used (default is SYS_LASTCHANGED) and the tree depth is 2 levels. Also a maximum of 8 pages will be shown and they must have been updated within the last three days (3600*24*3):</para>
						<programlisting>20 = HMENU</programlisting>
						<programlisting>20.special = updated</programlisting>
						<programlisting>20.special.value = 35, 56</programlisting>
						<programlisting>20.special {</programlisting>
						<programlisting>&#xA0; mode = tstamp</programlisting>
						<programlisting>&#xA0; depth = 2</programlisting>
						<programlisting>&#xA0; maxAge = 3600*24*3</programlisting>
						<programlisting>&#xA0; limit = 8</programlisting>
						<para>}</para>
						<para/>
					</section>
					<section>
						<title>special.rootline</title>
						<para>The path of pages from the current page to the root page of the page tree is called "rootline".</para>
						<para>A rootline menu is a menu which shows you these pages one by one in their hierarchical order. </para>
						<para>An HMENU with the property special = rootline creates a rootline menu (also known as "breadcrumb trail") that could look like this:</para>
						<para>Page level 1 &gt; Page level 2 &gt; Page level 3 &gt; Current page</para>
						<para>Such a click path facilitates the user's orientation on the website and makes navigation to a certain page level easier.</para>
						<para>Mount pages are supported.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>range</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>[begin-level] | [end-level] (same way as you reference the .entryLevel for an HMENU). The following example will start at level 1 and not show the page the user is currently on:</para>
											<para>temp.breadcrumbs = HMENU</para>
											<para>temp.breadcrumbs.special = rootline</para>
											<para>temp.breadcrumbs.special.range = 1|-2</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>reverseOrder</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>If set to true, the order of the rootline menu elements will be reversed.</para>
										</entry>
										<entry>
											<para>false</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>targets.[level number]</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>For framesets. You can set a default target and a target for each level by using the level number as sub-property. </para>
											<para/>
											<para>Example:</para>
											<para>Here the links to pages on level 3 will have target="page", while all other levels will have target="_top" as defined for the TMENU property .target.</para>
											<para/>
											<para>page.2 = HMENU</para>
											<para>page.2.special = rootline</para>
											<para>page.2.special.range = 1|-2</para>
											<para>page.2.special.targets.3 = page</para>
											<para>page.2.1 = TMENU</para>
											<para>page.2.1.target = _top</para>
											<para>page.2.1.wrap = &lt;HR&gt; | &lt;HR&gt;</para>
											<para>page.2.1.NO {</para>
											<para>&#xA0; linkWrap = | &gt; </para>
											<para>}</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.rootline]</para>
						<para>The following example will generate an accessible rootline menu: It will be wrapped as an unordered list. The first page in the menu is the page on level 1, that is one level below the root page of the website. The last page in the menu is the current page. </para>
						<para>After each link there is an image, which could contain a small arrow. </para>
						<para>The current page is not linked, but wrapped in em tags. It does not have the image appended. </para>
						<programlisting>20 = HMENU</programlisting>
						<programlisting>20.wrap = &lt;ul&gt;|&lt;/ul&gt;</programlisting>
						<programlisting>20.special = rootline</programlisting>
						<programlisting>20.special.range = 1|-1</programlisting>
						<programlisting/>
						<programlisting>20 {</programlisting>
						<programlisting>&#xA0; 1 = TMENU</programlisting>
						<programlisting>&#xA0; 1.noBlur = 1</programlisting>
						<programlisting/>
						<programlisting>&#xA0; 1.NO.wrapItemAndSub = &lt;li&gt;|&lt;/li&gt;</programlisting>
						<programlisting>&#xA0; 1.NO.ATagTitle.field = description // subtitle // title</programlisting>
						<programlisting>&#xA0; 1.NO.afterImg = fileadmin/arrow.jpg</programlisting>
						<programlisting/>
						<programlisting>&#xA0; 1.CUR = 1</programlisting>
						<programlisting>&#xA0; 1.CUR &lt; .1.NO</programlisting>
						<programlisting>&#xA0; 1.CUR.doNotLinkIt = 1</programlisting>
						<programlisting>&#xA0; 1.CUR.wrapItemAndSub = &lt;li&gt;&lt;em&gt;|&lt;/em&gt;&lt;/li&gt;</programlisting>
						<programlisting>&#xA0; 1.CUR.afterImg &gt;</programlisting>
						<para>}</para>
						<para/>
					</section>
					<section>
						<title>special.browse</title>
						<para>Warning: Mount pages are not supported!</para>
						<para>This menu contains pages which give your user the possibility to browse to the previous page, to the next page, to a page with the table of contents and so on. The menu is built of items given by a list from the property ".items". </para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>int/stdWrap</para>
										</entry>
										<entry>
											<para>Default is the current page id. Seldom you might want to override this value with another page-uid which will then act as the base point for the menu and the predefined items.</para>
										</entry>
										<entry>
											<para>current page id</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>items</para>
										</entry>
										<entry>
											<para>list of item names separated by "|"</para>
										</entry>
										<entry>
											<para>Each element in the list (separated by "|") is either a reserved item name (see list) with a predefined function, or a user-defined name which you can assign a link to any page. Note that the current page cannot be the root-page of a site.</para>
											<para/>
											<para>Reserved item names:</para>
											<para>next / prev: Links to the next page / the previous page. Next and previous pages are from the same "pid" as the current page id (or "value") - that is the next item in a menu with the current page. Also referred to as current level. </para>
											<para>If ".prevnextToSection" is set then next/prev will link to the first page of the next section / to the last page of the previous section, too.</para>
											<para>nextsection / prevsection: Links to the next section / the previous section. A section is defined as the subpages of a page on the same level as the parent (pid) page of the current page. Will not work if the parent page of the current page is the root page of the site.</para>
											<para>
												<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100000000000005D0000012D91AB0B9F.png" width=""/>nextsection_last / prevsection_last: Where nextsection/prevsection links to the first page in a section, these link to the last pages. If there is only one page in the section that will be both first and last. Will not work if the parent page of the current page is the root page of the site.
											</para>
											<para>first / last: First / last page on the current level. If there is only one page on the current level that page will be both first and last.</para>
											<para>up: Links to the parent (pid) page of the current page (up 1 level). Will always be available.</para>
											<para>index: Links to the parent of the parent page of the current page (up 2 levels). May not be available, if that page is out of the rootline.</para>
											<para/>
											<para>Examples:</para>
											<para/>
											<para>If id=20 is the current page then:</para>
											<para>21= prev and first, 19 = next, 18 = last, 17 = up, 1=index, 10 = nextsection, 11 = nextsection_last</para>
											<para/>
											<para>prevsection and prevsection_last is not present because id=3 has no subpages!</para>
											<para/>
											<para>TypoScript (only "browse"-part, needs also TMENU/GMENU):</para>
											<para>xxx = HMENU</para>
											<para>xxx.special = browse</para>
											<para>xxx.special {</para>
											<para>&#xA0; items = index|up|next|prev</para>
											<para>&#xA0; items.prevnextToSection = 1</para>
											<para>&#xA0; index.target = _blank</para>
											<para>&#xA0; index.fields.title = INDEX</para>
											<para>&#xA0; index.uid = 8</para>
											<para>}</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>items.prevnextToSection</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>If set, the "prev" and "next" navigation will jump to the next section when it reaches the end of pages in the current section. That way "prev" and "next" will also link to the first page of the next section / to the last page of the previous section.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>[itemname].target</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Optional/alternative target of the item.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>[itemname].uid</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>(uid of page) - optional/alternative page-uid to link to.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>[itemname].fields.[field name]</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Override field "field name" in pagerecord.</para>
											<para/>
											<para>Example:</para>
											<para>This gives the link to the previous page the linktext "&#xAB; zur&#xFC;ck".</para>
											<para>prev.fields.title = &#xAB; zur&#xFC;ck</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.browse]</para>
					</section>
					<section>
						<title>special.keywords</title>
						<para>Makes a menu of pages, which contain one or more keywords also found on the current page.</para>
						<para>Ordering is by default done in reverse order (desc) with the field specified by "mode", but setting "alternativeSortingField" for the menu object (e.g. for a GMENU, see later) will override that. </para>
						<para>Mount pages are supported.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>int/stdWrap</para>
										</entry>
										<entry>
											<para>Page for which keywords to find similar pages</para>
											<para/>
											<para>Example:</para>
											<para>20 = HMENU</para>
											<para>20.special = keywords</para>
											<para>20.special {</para>
											<para>&#xA0; value.data = TSFE:id</para>
											<para>&#xA0; entryLevel = 1</para>
											<para>&#xA0; mode = manual</para>
											<para>}</para>
											<para>20.1 = TMENU</para>
											<para>20.1.NO {</para>
											<para>&#xA0; ...</para>
											<para>}</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>mode</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Which field in the pages-table to use for sorting. </para>
											<para/>
											<para>Possible values are:</para>
											<para>- SYS_LASTCHANGED: Is updated to the youngest tstamp of the records on the page when a page is generated.</para>
											<para>- manual or lastUpdated: Use the field "lastUpdated", which can be set manually in the page-record.</para>
											<para>- tstamp: Uses the "tstamp"-field of the pagerecord, which is set automatically when the record is changed.</para>
											<para>- crdate: Uses the "crdate"-field of the pagerecord.</para>
											<para>- starttime: Uses the starttime field.</para>
										</entry>
										<entry>
											<para>SYS_LASTCHANGED</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>entryLevel</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>Where in the rootline the search begins.</para>
											<para>See property entryLevel in the section "HMENU" above.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>depth</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>(same as in section "special.updated")</para>
										</entry>
										<entry>
											<para>20</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>limit</para>
										</entry>
										<entry>
											<para>int</para>
										</entry>
										<entry>
											<para>(same as in section "special.updated")</para>
										</entry>
										<entry>
											<para>10</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>excludeNoSearchPages</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>(same as in section "special.updated")</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>begin</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>(same as in section "special.updated")</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>setKeywords</para>
										</entry>
										<entry>
											<para>string/stdWrap</para>
										</entry>
										<entry>
											<para>Lets you define the keywords manually by defining them as a comma-separated list. If this property is defined, it overrides the default, which is the keywords of the current page.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>keywordsField</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Defines the field in the pages-table in which to search for the keywords. Default is the field name "keyword". No check is done to see if the field you enter here exists, so enter an existing field, OK?!</para>
										</entry>
										<entry>
											<para>keywords</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>keywordsField.sourceField</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Defines the field from the current page from which to take the keywords being matched. The default is "keyword". (Notice that ".keywordsField" is only setting the page-record field to search in !)</para>
										</entry>
										<entry>
											<para>keywords</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.keywords]</para>
					</section>
					<section>
						<title>special.language</title>
						<para>Creates a language selector menu. Typically this is made as a menu with flags for each language a page is translated to and when the user clicks any element the same page id is hit but with a change to the "&amp;L" parameter in the URL.</para>
						<para>The "language" type will create menu items based on the current page record but with the language record for each language overlaid if available. The items all link to the current page id and only "&amp;L" is changed.</para>
						<para>Note on item states:</para>
						<para>When "TSFE-&gt;sys_language_uid" matches the sys_language uid for an element the state is set to "ACT", otherwise "NO". However, if a page is not available due to the pages "Localization settings" (which can disable translations) or if no Alternative Page Language record was found (can be disabled with ".normalWhenNoLanguage", see below) &#xA0;the state is set to "USERDEF1" for non-active items and "USERDEF2" for active items. So in total there are four states to create designs for. It is recommended to disable the link on menu items rendered with "USERDEF1" and "USERDEF2" in this case since they are disabled exactly because a page in that language does not exist and might even issue an error if tried accessed (depending on site configuration).</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>value</para>
										</entry>
										<entry>
											<para>comma list of sys_language uids/stdWrap</para>
										</entry>
										<entry>
											<para>The number of elements in this list determines the number of menu items.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>normalWhenNoLanguage</para>
										</entry>
										<entry>
											<para>boolean</para>
										</entry>
										<entry>
											<para>If set to 1 the button for a language will ve rendered as a non-disabled button even if no translation is found for the language.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.language]</para>
						<para>Creates a language menu with flags (notice that some lines break):</para>
						<programlisting>
							<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}10000000000000520000001CFDD50A4C.png" width=""/>lib.langMenu = HMENU
						</programlisting>
						<programlisting>lib.langMenu.special = language</programlisting>
						<programlisting>lib.langMenu.special.value = 0,1,2</programlisting>
						<programlisting>lib.langMenu.1 = GMENU</programlisting>
						<programlisting>lib.langMenu.1.NO {</programlisting>
						<programlisting>&#xA0; XY = [5.w]+4, [5.h]+4</programlisting>
						<programlisting>&#xA0; backColor = white</programlisting>
						<programlisting>&#xA0; 5 = IMAGE</programlisting>
						<programlisting>&#xA0; 5.file = typo3/sysext/cms/tslib/media/flags/flag_uk.gif &#xA0;|| typo3/sysext/cms/tslib/media/flags/flag_fr.gif &#xA0;|| typo3/sysext/cms/tslib/media/flags/flag_es.gif</programlisting>
						<programlisting>&#xA0; 5.offset = 2,2</programlisting>
						<para>}</para>
						<programlisting/>
						<programlisting>lib.langMenu.1.ACT &lt; lib.langMenu.1.NO</programlisting>
						<programlisting>lib.langMenu.1.ACT = 1</programlisting>
						<programlisting>lib.langMenu.1.ACT.backColor = black</programlisting>
						<programlisting/>
						<programlisting>lib.langMenu.1.USERDEF1 &lt; lib.langMenu.1.NO</programlisting>
						<programlisting>lib.langMenu.1.USERDEF1 = 1</programlisting>
						<programlisting>lib.langMenu.1.USERDEF1.5.file = typo3/sysext/cms/tslib/media/flags/flag_uk_d.gif &#xA0;|| typo3/sysext/cms/tslib/media/flags/flag_fr_d.gif &#xA0;|| typo3/sysext/cms/tslib/media/flags/flag_es_d.gif</programlisting>
						<programlisting>lib.langMenu.1.USERDEF1.noLink = 1</programlisting>
					</section>
					<section>
						<title>special.userdefined</title>
						<para>Lets you write your own little PHP-script that generates the array of menu items.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>file</para>
										</entry>
										<entry>
											<para>resource</para>
										</entry>
										<entry>
											<para>Filename of the php-file to include. (Just like cObject PHP_SCRIPT)</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>[any other key]</para>
										</entry>
										<entry>
											<para/>
										</entry>
										<entry>
											<para>Your own variables to your script. They are all accessible in the array $conf in your script.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.userdefined]</para>
						<para>You must populate an array called $menuItemsArray with page-records of the menu items you want to be in the menu.</para>
						<para>It works like this:</para>
						<programlisting>$menuItemsArray[] = pageRow1;</programlisting>
						<programlisting>$menuItemsArray[] = pageRow2;</programlisting>
						<programlisting>$menuItemsArray[] = pageRow3;</programlisting>
						<programlisting>...</programlisting>
						<para/>
						<para>A "pageRow" is a record from the table "pages" with all fields selected (SELECT * FROM...)</para>
						<para>If you create fake page rows, make sure to add at least "title" and "uid" field values.</para>
						<para>Notice:</para>
						<para>If you work with mount-points you can set the MP param which should be set for the page by setting the internal field "_MP_PARAM" in the page-record (xxx-xxx).</para>
						<para>Overriding URLs:</para>
						<para>You can also use the internal field "_OVERRIDE_HREF" to set a custom href-value (eg. "http://www.typo3.org") which will in any case be used rather than a link to the page that the page otherwise might represent. If you use "_OVERRIDE_HREF" then "_OVERRIDE_TARGET" can be used to override the target value as well (See example below).</para>
						<para>Other reserved keys:</para>
						<para>"_ADD_GETVARS" can be used to add get parameters to the URL, eg. "&amp;L=xxx".</para>
						<para>"_SAFE" can be used to protect the element to make sure it is not filtered out for any reason.</para>
						<para>Creating submenus:</para>
						<para>You can create submenus for the next level easily by just adding an array of menu items in the internal field "_SUB_MENU" (See example below).</para>
						<para>Presetting element state</para>
						<para>If you would like to preset an element to be recognized as a SPC, IFSUB, ACT, CUR or USR mode item, you can do so by specifying one of these values in the key "ITEM_STATE" of the page record. This setting will override the natural state-evaluation.</para>
					</section>
					<section>
						<title>special.userfunction</title>
						<para>Calls a user function/method in class which should (as with "userdefined" above) return an array with page records for the menu.</para>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>userFunc</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>Name of the function</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).HMENU.special.userfunction]</para>
						<para>By default the HMENU object is designed to create menus from pages in TYPO3. Such pages are represented by their page-record contents. Usually the "title" field is used for the title and the "uid" field is used to create a link to that page in the menu.</para>
						<para>However the HMENU and sub-menu objects are so powerful that it would be very useful to use these objects for creating menus of links which does not relate to pages in TYPO3 by their ids. This could be a menu reflecting a menu structure of a plugin where each link might link to the same page id in TYPO3 but where the difference would be in some parameter value. </para>
						<para>This can be done easily with the special-type "userdefined" (see table above) where you can return an array of menu items custom-built in a PHP-script you write.</para>
						<para>First, this listing creates a menu in three levels where the first two are graphical items:</para>
						<programlisting>				script_ended = 0;&#xD;
				function jumpToUrl(URL)	{&#xD;
					document.location = URL;&#xD;
				}&#xD;
			 &#xA0; 0: # ************************
						</programlisting>
						<programlisting>&#xA0; &#xA0;1: # MENU LEFT</programlisting>
						<programlisting>&#xA0; &#xA0;2: # ************************</programlisting>
						<programlisting>&#xA0; &#xA0;3: lib.leftmenu.20 = HMENU</programlisting>
						<programlisting>&#xA0; &#xA0;4: lib.leftmenu.20.special = userfunction</programlisting>
						<programlisting>&#xA0; &#xA0;5: lib.leftmenu.20.special.userFunc = user_3dsplm_pi2-&gt;makeMenuArray</programlisting>
						<programlisting>&#xA0; &#xA0;6: lib.leftmenu.20.1 = GMENU</programlisting>
						<programlisting>&#xA0; &#xA0;7: lib.leftmenu.20.1.NO {</programlisting>
						<programlisting>&#xA0; &#xA0;8: &#xA0; wrap = &lt;tr&gt;&lt;td&gt;|&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="bckgdgrey1" height="1"&gt;&lt;/td&gt;&lt;/tr&gt;</programlisting>
						<programlisting>&#xA0; &#xA0;9: &#xA0; XY = 163,19</programlisting>
						<programlisting>&#xA0; 10: &#xA0; backColor = white</programlisting>
						<programlisting>&#xA0; 11: &#xA0; 10 = TEXT</programlisting>
						<programlisting>&#xA0; 12: &#xA0; 10.text.field = title</programlisting>
						<programlisting>&#xA0; 13: &#xA0; 10.text.case = upper</programlisting>
						<programlisting>&#xA0; 14: &#xA0; 10.fontColor = red</programlisting>
						<programlisting>&#xA0; 15: &#xA0; 10.fontFile = fileadmin/fonts/ARIALNB.TTF</programlisting>
						<programlisting>&#xA0; 16: &#xA0; 10.niceText = 1</programlisting>
						<programlisting>&#xA0; 17: &#xA0; 10.offset = 14,12</programlisting>
						<programlisting>&#xA0; 18: &#xA0; 10.fontSize = 10</programlisting>
						<programlisting>&#xA0; 19: }</programlisting>
						<programlisting>&#xA0; 20: lib.leftmenu.20.2 = GMENU</programlisting>
						<programlisting>&#xA0; 21: lib.leftmenu.20.2.wrap = | &lt;tr&gt;&lt;td class="bckgdwhite" height="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="bckgdgrey1" height="1"&gt;&lt;/td&gt;&lt;/tr&gt;</programlisting>
						<programlisting>&#xA0; 22: lib.leftmenu.20.2.NO {</programlisting>
						<programlisting>&#xA0; 23: &#xA0; wrap = &lt;tr&gt;&lt;td class="bckgdwhite" height="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;|&lt;/td&gt;&lt;/tr&gt;</programlisting>
						<programlisting>&#xA0; 24: &#xA0; XY = 163,16</programlisting>
						<programlisting>&#xA0; 25: &#xA0; backColor = white</programlisting>
						<programlisting>&#xA0; 26: &#xA0; 10 = TEXT</programlisting>
						<programlisting>&#xA0; 27: &#xA0; 10.text.field = title</programlisting>
						<programlisting>&#xA0; 28: &#xA0; 10.text.case = upper</programlisting>
						<programlisting>&#xA0; 29: &#xA0; 10.fontColor = #666666</programlisting>
						<programlisting>&#xA0; 30: &#xA0; 10.fontFile = fileadmin/fonts/ARIALNB.TTF</programlisting>
						<programlisting>&#xA0; 31: &#xA0; 10.niceText = 1</programlisting>
						<programlisting>&#xA0; 32: &#xA0; 10.offset = 14,12</programlisting>
						<programlisting>&#xA0; 33: &#xA0; 10.fontSize = 11</programlisting>
						<programlisting>&#xA0; 34: }</programlisting>
						<programlisting>&#xA0; 35: lib.leftmenu.20.2.RO &lt; lib.leftmenu.20.2.NO</programlisting>
						<programlisting>&#xA0; 36: lib.leftmenu.20.2.RO = 1</programlisting>
						<programlisting>&#xA0; 37: lib.leftmenu.20.2.RO.backColor = #eeeeee</programlisting>
						<programlisting>&#xA0; 38: lib.leftmenu.20.2.ACT &lt; lib.leftmenu.20.2.NO</programlisting>
						<programlisting>&#xA0; 39: lib.leftmenu.20.2.ACT = 1</programlisting>
						<programlisting>&#xA0; 40: lib.leftmenu.20.2.ACT.10.fontColor = red</programlisting>
						<programlisting>&#xA0; 41: lib.leftmenu.20.3 = TMENU</programlisting>
						<programlisting>&#xA0; 42: lib.leftmenu.20.3.NO {</programlisting>
						<programlisting>&#xA0; 43: &#xA0; allWrap = &lt;tr&gt;&lt;td&gt;|&lt;/td&gt;&lt;/tr&gt;</programlisting>
						<programlisting>&#xA0; 44: &#xA0; linkWrap (</programlisting>
						<programlisting>&#xA0; 45: &#xA0; &#xA0;&lt;table border="0" cellpadding="0" cellspacing="0" style="margin: 2px; 0px; 2px; 0px;"&gt;</programlisting>
						<programlisting>&#xA0; 46: &#xA0; &#xA0; &#xA0; &lt;tr&gt;</programlisting>
						<programlisting>&#xA0; 47: &#xA0; &#xA0; &#xA0; &#xA0; &lt;td&gt;&lt;img src="clear.gif" width="15" height="1" /&gt;&lt;/td&gt;</programlisting>
						<programlisting>&#xA0; 48: &#xA0; &#xA0; &#xA0; &#xA0; &lt;td&gt;&lt;img src="fileadmin/arrow_gray.gif" height="9" width="9" hspace="3" /&gt;&lt;/td&gt;</programlisting>
						<programlisting>&#xA0; 49: &#xA0; &#xA0; &#xA0; &#xA0; &lt;td&gt;|&lt;/td&gt;</programlisting>
						<programlisting>&#xA0; 50: &#xA0; &#xA0; &#xA0; &lt;/tr&gt;</programlisting>
						<programlisting>&#xA0; 51: &#xA0; &#xA0;&lt;/table&gt;</programlisting>
						<programlisting>&#xA0; 52: &#xA0; )</programlisting>
						<programlisting>&#xA0; 53: }</programlisting>
						<programlisting/>
						<para>The menu looks like this on a web page:</para>
						<para>
							<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}10000000000000A4000000A8D10B0DA6.png" width=""/>The TypoScript code above generates this menu, but the items do not link straight to pages as usual. This is because the whole menu is generated from this array, which was returned from the function "menuMenuArray" called in TypoScript line 4+5
						</para>
						<programlisting>&#xA0; &#xA0;1: &#xA0; &#xA0; function makeMenuArray($content, $conf) {</programlisting>
						<programlisting>&#xA0; &#xA0;2: &#xA0; &#xA0; &#xA0; &#xA0; return array(</programlisting>
						<programlisting>&#xA0; &#xA0;3: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; &#xA0;4: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Contact',</programlisting>
						<programlisting>&#xA0; &#xA0;5: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=10',</programlisting>
						<programlisting>&#xA0; &#xA0;6: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_SUB_MENU' =&gt; array(</programlisting>
						<programlisting>&#xA0; &#xA0;7: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; &#xA0;8: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Offices',</programlisting>
						<programlisting>&#xA0; &#xA0;9: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=11',</programlisting>
						<programlisting>&#xA0; 10: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_TARGET' =&gt; '_top',</programlisting>
						<programlisting>&#xA0; 11: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'ITEM_STATE' =&gt; 'ACT',</programlisting>
						<programlisting>&#xA0; 12: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_SUB_MENU' =&gt; array(</programlisting>
						<programlisting>&#xA0; 13: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 14: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Copenhagen Office',</programlisting>
						<programlisting>&#xA0; 15: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=11&amp;officeId=cph',</programlisting>
						<programlisting>&#xA0; 16: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 17: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 18: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Paris Office',</programlisting>
						<programlisting>&#xA0; 19: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=11&amp;officeId=paris',</programlisting>
						<programlisting>&#xA0; 20: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 21: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 22: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'New York Office',</programlisting>
						<programlisting>&#xA0; 23: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'http://www.newyork-office.com',</programlisting>
						<programlisting>&#xA0; 24: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_TARGET' =&gt; '_blank',</programlisting>
						<programlisting>&#xA0; 25: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; )</programlisting>
						<programlisting>&#xA0; 26: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; )</programlisting>
						<programlisting>&#xA0; 27: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 28: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 29: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Form',</programlisting>
						<programlisting>&#xA0; 30: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=10&amp;cmd=showform',</programlisting>
						<programlisting>&#xA0; 31: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 32: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 33: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Thank you',</programlisting>
						<programlisting>&#xA0; 34: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=10&amp;cmd=thankyou',</programlisting>
						<programlisting>&#xA0; 35: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 36: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 37: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; ),</programlisting>
						<programlisting>&#xA0; 38: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; array(</programlisting>
						<programlisting>&#xA0; 39: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; 'title' =&gt; 'Products',</programlisting>
						<programlisting>&#xA0; 40: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; '_OVERRIDE_HREF' =&gt; 'index.php?id=14',</programlisting>
						<programlisting>&#xA0; 41: &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; )</programlisting>
						<programlisting>&#xA0; 42: &#xA0; &#xA0; &#xA0; &#xA0; );</programlisting>
						<programlisting>&#xA0; 43: &#xA0; &#xA0; }</programlisting>
						<programlisting/>
						<para>Notice how the array contains "fake" page-records which has no uid field, only a "title" and "_OVERRIDE_HREF" as required and some other fields as it fits. </para>
						<orderedlist>
							<listitem>
								<para>The first level with items "Contact" and "Products" contains "title" and "_OVERRIDE_HREF" fields, but "Contact" extends this by a "_SUB_MENU" array which contains a similar array of items. </para>
							</listitem>
							<listitem>
								<para>The first item on the second level, "Offices", contains a field called "_OVERRIDE_TARGET". Further the item has its state set to "ACT" which means it will render as an "active" item (you will have to calculate such stuff manually when you are not rendering a menu of real pages!). Finally there is even another sub-level of menu items.</para>
							</listitem>
						</orderedlist>
					</section>
				</section>
			</section>
			<section>
				<title>CTABLE</title>
				<para>Creates a standard-table where you can define the content of the the various cells.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>offset</para>
								</entry>
								<entry>
									<para>x,y /stdWrap</para>
								</entry>
								<entry>
									<para>Offset from upper left corner.</para>
								</entry>
								<entry>
									<para>0,0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>tm</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY +TDParams /stdWrap</para>
								</entry>
								<entry>
									<para>TopMenu</para>
									<para>The default value of TDParams is: valign="top".</para>
									<para>stdWrap is available for the property TDParams.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>lm</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY +TDParams /stdWrap</para>
								</entry>
								<entry>
									<para>LeftMenu</para>
									<para>The default value of TDParams is: valign="top".</para>
									<para>stdWrap is available for the property TDParams.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>rm</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY +TDParams /stdWrap</para>
								</entry>
								<entry>
									<para>RightMenu</para>
									<para>The default value of TDParams is: valign="top".</para>
									<para>stdWrap is available for the property TDParams.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bm</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY +TDParams /stdWrap</para>
								</entry>
								<entry>
									<para>BottomMenu</para>
									<para>The default value of TDParams is: valign="top".</para>
									<para>stdWrap is available for the property TDParams.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>c</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY +TDParams /stdWrap</para>
								</entry>
								<entry>
									<para>Content-cell</para>
									<para>The default value of TDParams is: valign="top".</para>
									<para>stdWrap is available for the property TDParams.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>cMargins</para>
								</entry>
								<entry>
									<para>margins /stdWrap</para>
								</entry>
								<entry>
									<para>Distance around the content-cell "c".</para>
								</entry>
								<entry>
									<para>0,0,0,0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>cWidth</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Width of the content-cell "c".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tableParams</para>
								</entry>
								<entry>
									<para>&lt;TABLE&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Attributes of the table tag.</para>
								</entry>
								<entry>
									<para>border="0" cellspacing="0" cellpadding="0"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).CTABLE]</para>
				<section>
					<title>Example:</title>
					<programlisting>page.10 = CTABLE</programlisting>
					<programlisting>page.10 {</programlisting>
					<programlisting>&#xA0; offset = 5, 0</programlisting>
					<programlisting>&#xA0; tableParams = border="0" width="400"</programlisting>
					<programlisting>&#xA0; cWidth = 400</programlisting>
					<programlisting>&#xA0; c.1 = CONTENT</programlisting>
					<programlisting>&#xA0; c.1.table = tt_content</programlisting>
					<programlisting>&#xA0; c.1.select {</programlisting>
					<programlisting>&#xA0; &#xA0; pidInList = this</programlisting>
					<programlisting>&#xA0; &#xA0; orderBy = sorting</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting/>
					<programlisting>&#xA0; tm.10 &lt; temp.sidemenu</programlisting>
					<programlisting>&#xA0; tm.TDParams = valign=top</programlisting>
					<programlisting/>
					<programlisting>&#xA0; stdWrap.wrap = &lt;div id="mytable"&gt;|&lt;/div&gt;</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>OTABLE</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>offset</para>
								</entry>
								<entry>
									<para>x,y /stdWrap</para>
								</entry>
								<entry>
									<para>Offset from upper left corner.</para>
									<para/>
									<para>Note:</para>
									<para>Actually the data type is "x,y,r,b,w,h" and stdWrap:</para>
									<para>x,y is the offset from upper left corner.</para>
									<para>r,b is the offset (margin) to right and bottom.</para>
									<para>w is the required width of the content field.</para>
									<para>h is the required height of the content field.</para>
									<para/>
									<para>All measures are in pixels.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tableParams</para>
								</entry>
								<entry>
									<para>&lt;TABLE&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Attributes of the table tag.</para>
								</entry>
								<entry>
									<para>border="0" cellspacing="0" cellpadding="0"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).OTABLE]</para>
				<section>
					<title>Example:</title>
					<programlisting>top.100 = OTABLE</programlisting>
					<programlisting>top.100.offset = 310,8</programlisting>
					<programlisting>top.100.tableParams = border="1" cellpadding="0" cellspacing="0"</programlisting>
					<programlisting>top.100.1 &lt; temp.topmenu</programlisting>
				</section>
			</section>
			<section>
				<title>COLUMNS</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>tableParams</para>
								</entry>
								<entry>
									<para>&lt;TABLE&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Attributes of the table tag.</para>
								</entry>
								<entry>
									<para>border="0" cellspacing="0" cellpadding="0"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>TDparams</para>
								</entry>
								<entry>
									<para>&lt;TD&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Attributes of the td tags.</para>
								</entry>
								<entry>
									<para>valign="top"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>rows</para>
								</entry>
								<entry>
									<para>integer (Range: 2-20) /stdWrap</para>
								</entry>
								<entry>
									<para>The number of rows in the columns.</para>
								</entry>
								<entry>
									<para>2</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>totalWidth</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>The total-width of the columns+gaps.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>gapWidth</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
									<para>+optionSplit</para>
								</entry>
								<entry>
									<para>Width of the gap between columns.</para>
									<para>0 = no gap</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>gapBgCol</para>
								</entry>
								<entry>
									<para>HTML-color /stdWrap</para>
									<para>+optionSplit</para>
								</entry>
								<entry>
									<para>Background-color for the gap-tablecells.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>gapLineThickness</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
									<para>+optionSplit</para>
								</entry>
								<entry>
									<para>Thickness of the divider line in the gap between cells.</para>
									<para>0 = no line</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>gapLineCol</para>
								</entry>
								<entry>
									<para>HTML-color /stdWrap</para>
									<para>+optionSplit</para>
								</entry>
								<entry>
									<para>Line color of the divider line.</para>
								</entry>
								<entry>
									<para>black</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>[column-number]</para>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is the content-object for each column!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>after</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is a cObject placed after the columns-table!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>if</para>
								</entry>
								<entry>
									<para>-&gt;if</para>
								</entry>
								<entry>
									<para>If "if" returns false, the columns are not rendered!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).COLUMNS]</para>
			</section>
			<section>
				<title>HRULER</title>
				<para>This object inserts a table tag, which you can use as a horizontal divider.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>lineThickness</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Range: 1-50</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>lineColor</para>
								</entry>
								<entry>
									<para>HTML-color /stdWrap</para>
								</entry>
								<entry>
									<para>The color of the ruler.</para>
								</entry>
								<entry>
									<para>black</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>spaceLeft</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Space before the line (to the left).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>spaceRight</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Space after the line (to the right).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tableWidth</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Width of the ruler ("width" attribute in a table).</para>
								</entry>
								<entry>
									<para>99%</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HRULER]</para>
			</section>
			<section>
				<title>IMGTEXT</title>
				<para>This object is designed to align images and text. This is normally used to render text/picture records from the tt_content table. </para>
				<para>The image(s) are placed in a table and the table is placed before, after or left/right relative to the text.</para>
				<para>See code examples.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>text</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY /stdWrap</para>
								</entry>
								<entry>
									<para>Use this to import / generate the content, that should flow around the image block.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>textPos</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Text position:</para>
									<para>bit[0-2]: 000 = center, 001 = right, 010 = left</para>
									<para>bit[3-5]: 000 = over, 001 = under, 010 text</para>
									<para/>
									<para>0 - Above: Centre</para>
									<para>1 - Above: Right</para>
									<para>2 - Above: Left</para>
									<para>8 - Below: Centre</para>
									<para>9 - Below: Right</para>
									<para>10 - Below: Left</para>
									<para>17 - In Text: Right</para>
									<para>18 - In Text: Left</para>
									<para>25 - In Text: Right (no wrap)</para>
									<para>26 - In Text: Left (no wrap)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>textMargin</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Margin between the image and the content.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>textMargin_outOfText</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the textMargin space will still be inserted even if the image is placed above or below the text. </para>
									<para>This flag is only for a kind of backwards compatibility because this "feature" was recently considered a bug and thus corrected. So if anyone has depended on this way things are done, you can compensate with this flag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgList</para>
								</entry>
								<entry>
									<para>list of imagefiles /stdWrap</para>
								</entry>
								<entry>
									<para>List of images from ".imgPath".</para>
									<para/>
									<para>Example:</para>
									<para>This imports the list of images from tt_content's image-field.</para>
									<para>imgList.field = image</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgPath</para>
								</entry>
								<entry>
									<para>path /stdWrap</para>
								</entry>
								<entry>
									<para>Path to the images.</para>
									<para/>
									<para>Example:</para>
									<para>"uploads/pics/"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgMax</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Maximum number of images.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgStart</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Start with image-number ".imgStart".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgObjNum</para>
								</entry>
								<entry>
									<para>imgObjNum +optionSplit</para>
								</entry>
								<entry>
									<para>Here you define, which IMAGE-cObjects from the array "1,2,3,4..." in this object that should render the images.</para>
									<para>"current" is set to the image-filename.</para>
									<para/>
									<para>Example:</para>
									<para>imgObjNum = 1 |*||*| 2</para>
									<para>This would render the first two images with "1. ..." and the last image with "2. ...", provided that the ".imgList" contains 3 images.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>1,2,3,4</para>
								</entry>
								<entry>
									<para>-&gt;IMAGE (cObject)</para>
								</entry>
								<entry>
									<para>Rendering of the images.</para>
									<para>The register "IMAGE_NUM" is set with the number of image being rendered for each rendering of an image-object. Starting with zero.</para>
									<para>The image-object should not be of type GIFBUILDER!</para>
									<para/>
									<para>Important:</para>
									<para>"file.import.current = 1" fetches the name of the images! </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>caption</para>
								</entry>
								<entry>
									<para>-&gt;CARRAY /stdWrap</para>
								</entry>
								<entry>
									<para>Caption.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>captionAlign</para>
								</entry>
								<entry>
									<para>align /stdWrap</para>
								</entry>
								<entry>
									<para>Caption alignment.</para>
								</entry>
								<entry>
									<para>default = ".textPos"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>captionSplit</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If this is set, the caption text is split by the character (or string) from ".token" , and every item is displayed under an image each in the image block.</para>
									<para/>
									<para>.token = (string /stdWrap) Character to split the caption elements (default is chr(10))</para>
									<para>.cObject = cObject, used to fetch the caption for the split</para>
									<para>.stdWrap = stdWrap properties used to render the caption.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>altText</para>
									<para>titleText</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Default altText/titleText if no alternatives are provided by the -&gt;IMAGE cObjects.</para>
									<para/>
									<para>If alttext is not specified, an empty alttext will be used.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>emptyTitleHandling</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Value can be "keepEmpty" to preserve an empty title attribute, or "useAlt" to use the alt attribute instead.</para>
								</entry>
								<entry>
									<para>useAlt</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>longdescURL</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Default longdescURL if no alternatives are provided by the -&gt;IMAGE cObjects </para>
									<para/>
									<para>"longdesc" attribute (URL pointing to document with extensive details about image).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>border</para>
								</entry>
								<entry>
									<para>boolean /stdWrap </para>
								</entry>
								<entry>
									<para>If true, a border i generated around the images.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>borderCol</para>
								</entry>
								<entry>
									<para>HTML-color /stdWrap</para>
								</entry>
								<entry>
									<para>Color of the border, if ".border" is set</para>
								</entry>
								<entry>
									<para>black</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>borderThick</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Width of the border around the pictures</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>cols</para>
								</entry>
								<entry>
									<para>int /stdWrap </para>
								</entry>
								<entry>
									<para>Columns</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>rows</para>
								</entry>
								<entry>
									<para>int /stdWrap </para>
								</entry>
								<entry>
									<para>Rows (higher priority thab "cols")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noRows</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, the rows are not divided by a table-rows. Thus images are more nicely shown if the height differs a lot (normally the width is the same!)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noCols</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, the columns are not made in the table. The images are all put in one row separated by a clear giffile to space them apart.</para>
									<para>If noRows is set, noCols will be unset. They cannot be set simultaneously.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>colSpace</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Space between columns.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>rowSpace</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Space between rows.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>spaceBelowAbove</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Pixel space between content an images when position of image is above or below text (but not in text)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>tableStdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>This passes the final &lt;table&gt; code for the image block to the stdWrap function.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxW</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Maximum width of the image-table.</para>
									<para>This will scale images not in the right size! Takes the number of columns into account!</para>
									<para/>
									<para>NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxWInText</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Maximum width of the image-table, if the text is wrapped around the image-table (on the left or right side).</para>
									<para>This will scale images not in the right size! Takes the number of columns into account!</para>
									<para/>
									<para>NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER!</para>
								</entry>
								<entry>
									<para>50% of maxW</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>equalH</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>If this value is greater than zero, it will secure that images in a row has the same height. The width will be calculated.</para>
									<para>If the total width of the images raise above the "maxW"-value of the table the height for each image will be scaled down equally so that the images still have the same height but is within the limits of the totalWidth.</para>
									<para>Please note that this value will override the properties "width", "maxH", "maxW", "minW", "minH" of the IMAGE-objects generating the images. Furthermore it will override the "noRows"-property and generate a table with no columns instead!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>colRelations</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This value defines the width-relations of the images in the columns of IMGTEXT. The syntax is "[int] : [int] : [int] : ..." for each column. If there are more image columns than figures in this value, it's ignored. If the relation between two of these figures exceeds 10, this function is ignore. </para>
									<para>It works only fully if all images are downscaled by their maxW-definition.</para>
									<para/>
									<para>Example:</para>
									<para>If 6 images are placed in three columns and their width's are high enough to be forcibly scaled, this value will scale the images in the to be e.g. 100, 200 and 300 &#xA0;pixels from left to right</para>
									<para>1 : 2 : 3</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>image_compression</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Image Compression:</para>
									<para>0= Default</para>
									<para>1= Don't change! (removes all parameters for the image_object!!)</para>
									<para>(adds gif-extension and color-reduction command)</para>
									<para>10= GIF/256</para>
									<para>11= GIF/128</para>
									<para>12= GIF/64</para>
									<para>13= GIF/32</para>
									<para>14= GIF/16</para>
									<para>15= GIF/8</para>
									<para>(adds jpg-extension and quality command)</para>
									<para>20= IM: -quality 100</para>
									<para>21= IM: -quality 90 &lt;=&gt; Photoshop 60 &#xA0; &#xA0; (JPG/Very High)</para>
									<para>22= IM: -quality 80 &#xA0; &#xA0;(JPG/High)</para>
									<para>23= IM: -quality 70</para>
									<para>24= IM: -quality 60 &lt;=&gt; Photoshop 30 &#xA0; (JPG/Medium)</para>
									<para>25= IM: -quality 50</para>
									<para>26= IM: -quality 40 &#xA0;(JPG/Low)</para>
									<para>27= IM: -quality 30 &lt;=&gt; Photoshop 10 </para>
									<para>28= IM: -quality 20 &#xA0; (JPG/Very Low)</para>
									<para>(adds png-extension and color-reduction command)</para>
									<para>30= PNG/256</para>
									<para>31= PNG/128</para>
									<para>32= PNG/64</para>
									<para>33= PNG/32</para>
									<para>34= PNG/16</para>
									<para>35= PNG/8</para>
									<para>39= PNG</para>
									<para/>
									<para>The default ImageMagick quality seems to be 75. This equals Photoshop quality 45. Images compressed with ImageMagick with the same visual quality as a Photoshop-compressed image seem to be largely 50% greater in size!!</para>
									<para/>
									<para>NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>image_effects</para>
								</entry>
								<entry>
									<para>int /stdWrap</para>
								</entry>
								<entry>
									<para>Adds these commands to the parameters for the scaling. This function has no effect if "image_compression" above is set to 1!!</para>
									<para/>
									<para>1 =&gt; "-rotate 90",</para>
									<para>2 =&gt; "-rotate 270",</para>
									<para>3 =&gt; "-rotate 180",</para>
									<para>10 =&gt; "-colorspace GRAY",</para>
									<para>11 =&gt; "-sharpen 70",</para>
									<para>20 =&gt; "-normalize",</para>
									<para>23 =&gt; "-contrast",</para>
									<para>25 =&gt; "-gamma 1.3",</para>
									<para>26 =&gt; "-gamma 0.8"</para>
									<para/>
									<para>NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>image_frames</para>
								</entry>
								<entry>
									<para>Array </para>
									<para>+ .key /stdWrap</para>
									<para/>
								</entry>
								<entry>
									<para>Frames:</para>
									<para>.key points to the frame used.</para>
									<para/>
									<para>".image_frames.x" is imgResource-mask (".m")properties which will override to the [imgResource].m properties of the imageObjects. This is used to mask the images into a frame. See how it's done in the default configuration and IMGTEXT in the static_template-table. </para>
									<para/>
									<para>Example:</para>
									<para>1 {</para>
									<para>&#xA0; mask = media/uploads/darkroom1_mask.jpg</para>
									<para>&#xA0; bgImg = GIFBUILDER</para>
									<para>&#xA0; bgImg {</para>
									<para>&#xA0; &#xA0; XY = 100,100</para>
									<para>&#xA0; &#xA0; backColor = {$bgCol}</para>
									<para>&#xA0; }</para>
									<para>&#xA0; bottomImg = GIFBUILDER</para>
									<para>&#xA0; bottomImg {</para>
									<para>&#xA0; &#xA0; XY = 100,100</para>
									<para>&#xA0; &#xA0; backColor = black</para>
									<para>&#xA0; }</para>
									<para>&#xA0; bottomImg_mask = media/uploads/darkroom1_bottom.jpg</para>
									<para>}</para>
									<para/>
									<para>NOTE: This cancels the jpg-quality settings sent as ordinary ".params" to the imgResource. In addition the output of this operation will always be jpg or gif!</para>
									<para>NOTE: Works ONLY if IMAGE-obj is NOT GIFBUILDER</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>editIcons</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>(See stdWrap.editIcons)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noStretchAndMarginCells</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set (1), the cells used to add left and right margins plus stretch out the table will not be added. You will loose the ability to set margins for the object if entered "in text". So it's not recommended, but it has been requested by some people for reasons.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).IMGTEXT]</para>
				<section>
					<title>Example:</title>
					<programlisting>tt_content.textpic.default {</programlisting>
					<programlisting>&#xA0; 5 = IMGTEXT</programlisting>
					<programlisting>&#xA0; 5 { &#xA0;</programlisting>
					<programlisting>&#xA0; &#xA0; text &lt; tt_content.text.default</programlisting>
					<programlisting>&#xA0; &#xA0; imgList.field = image</programlisting>
					<programlisting>&#xA0; &#xA0; textPos.field = imageorient</programlisting>
					<programlisting>&#xA0; &#xA0; imgPath = uploads/pics/</programlisting>
					<programlisting>&#xA0; &#xA0; imgObjNum = 1</programlisting>
					<programlisting>&#xA0; &#xA0; 1 {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0;file.import.current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0;file.width.field = imagewidth</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0;imageLinkWrap = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0;imageLinkWrap {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;bodyTag = &lt;BODY bgColor=black&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;wrap = &lt;A href="javascript:close();"&gt; | &lt;/A&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;width = 800m</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;height = 600m</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;JSwindow = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;JSwindow.newWindow = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0; &#xA0;JSwindow.expand = 17,20</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; &#xA0;}</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; &#xA0; maxW = 450</programlisting>
					<programlisting>&#xA0; &#xA0; maxWInText = 300</programlisting>
					<programlisting>&#xA0; &#xA0; cols.field = imagecols</programlisting>
					<programlisting>&#xA0; &#xA0; border.field = imageborder</programlisting>
					<programlisting>&#xA0; &#xA0; caption {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; 1 = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; 1.field = imagecaption</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; 1.wrap = &lt;font size="1"&gt; |&lt;/font&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; 1.wrap2 = {$cBodyTextWrap}</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; &#xA0; borderThick = 2</programlisting>
					<programlisting>&#xA0; &#xA0; colSpace = 10</programlisting>
					<programlisting>&#xA0; &#xA0; rowSpace = 10</programlisting>
					<programlisting>&#xA0; &#xA0; textMargin = 10</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; 30 = HTML</programlisting>
					<programlisting>&#xA0; 30.value = &lt;br&gt;</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>CASE</title>
				<para>This is a very flexible object whose rendering can vary depending on a given key. The principle is similar to that of the "switch" construct in PHP.</para>
				<para>The "key" property is expected to match one of the values found in the "Array". If none is found, the "default" property will be used. Any string can be used as value in the "Array" except for those that match another property. So the forbidden values are: "setCurrent", "key", "stdWrap" and "if". And of course, "default" has a special meaning.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>setCurrent</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the "current"-value. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>key</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This is used to define the source of the value that will be matched against the values of "Array". It will generally not be a simple string, but use its stdWrap properties to retrieve a dynamic value from some specific source, typically a field of the current record (see example below).</para>
								</entry>
								<entry>
									<para>default</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>default</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>Defines the rendering for all values of "key" that don't match any of the values of "Array".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>Array...</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>Defines the rendering for a number of values.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap around any object that was rendered no matter what the "key" value is.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>if</para>
								</entry>
								<entry>
									<para>-&gt;if</para>
								</entry>
								<entry>
									<para>If "if" returns false, nothing is returned.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).CASE]</para>
				<section>
					<title>Example:</title>
					<para>This example chooses between two different renderings of some content depending on whether the field "layout" is "1" or not ("default"). The result is in either case wrapped with "|&lt;br /&gt;". If the field "header" turns out not to be set ("false") an empty string is returned anyway.</para>
					<programlisting>stuff = CASE</programlisting>
					<programlisting>stuff.key.field = layout</programlisting>
					<programlisting>stuff.if.isTrue.field = header</programlisting>
					<programlisting>stuff.stdWrap.wrap = |&lt;br /&gt;</programlisting>
					<programlisting/>
					<programlisting>stuff.default = TEXT</programlisting>
					<programlisting>stuff.default {</programlisting>
					<programlisting>&#xA0; ....</programlisting>
					<programlisting>}</programlisting>
					<programlisting>stuff.1 = TEXT</programlisting>
					<programlisting>stuff.1 {</programlisting>
					<programlisting>&#xA0; ....</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>LOAD_REGISTER</title>
				<para>This provides a way to load the array $GLOBALS['TSFE']-&gt;register[] with values. It doesn't return anything! The usefulness of this is, that some predefined configurations (like the page-content) can be used in various places but use different values as the values of the register can change during the page-rendering.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>Array... &#xA0;</para>
									<para>[field name]</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Example:</para>
									<para>(This sets "contentWidth", "label" and "head")</para>
									<para/>
									<para>page.27 = LOAD_REGISTER</para>
									<para>page.27 {</para>
									<para>&#xA0; contentWidth = 500</para>
									<para/>
									<para>&#xA0; label.field = header</para>
									<para/>
									<para>&#xA0; head = some text</para>
									<para>&#xA0; head.wrap = &lt;b&gt; | &lt;/b&gt;</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).LOAD_REGISTER]</para>
			</section>
			<section>
				<title>RESTORE_REGISTER</title>
				<para>This unsets the latest changes in the register-array as set by LOAD_REGISTER.</para>
				<para>Internally this works like a stack where the original register is saved when LOAD_REGISTER is called. Then a RESTORE_REGISTER cObject is called the last element is pulled of that stack the register is replaced with it.</para>
				<para>RESTORE_REGISTER has no properties.</para>
			</section>
			<section>
				<title>FORM</title>
				<para>This object provides a way to create forms</para>
				<programlisting>textarea:Label | [* = required][field name =] textarea[,cols,rows,"wrap= [eg. "OFF"]"] | [defaultdata] | Special evaluation configuration (see note below)</programlisting>
				<programlisting>input:Label | [* = required][field name =] input[,size,max] | [defaultdata] | Special evaluation configuration (see note below)</programlisting>
				<programlisting>password:Label | [* = required][field name =] input[,size,max] | [defaultdata]</programlisting>
				<programlisting>file:Label | [* = required][field name (*1)=] file[,size] </programlisting>
				<programlisting>check:Label | [* = required][field name =]check | [checked=1] </programlisting>
				<programlisting>select:Label | [* = required][field name =]select[,size (int/"auto"), "m"=multiple] | label [=value] , ...</programlisting>
				<programlisting>radio:Label | [* = required][field name =]radio | label [=value] , ...</programlisting>
				<programlisting>hidden:|[field name =]hidden | value</programlisting>
				<programlisting>submit:Label |[field name =]submit | Caption</programlisting>
				<programlisting>reset: Label |[field name =]reset | Caption</programlisting>
				<programlisting>label:Label | label | Label value</programlisting>
				<programlisting>property:[Internal, see below]</programlisting>
				<para>------------------</para>
				<section>
					<title>Preselected item with type "select" and "radio":</title>
					<para>This is an example, where "Brown" is the preselected item of a selector box:</para>
					<programlisting>Haircolor: | *haircolor=select| Blue=blue , Red=red , *Brown=brown</programlisting>
					<programlisting/>
					<para>You can enter multiple items to be preselected by placing an asterisk in front of each preselected item.</para>
				</section>
				<section>
					<title>Property override:</title>
					<para>This can be done with the following properties from the table below:</para>
					<para>type, locationData, goodMess, badMess, emailMess</para>
					<para>syntax:</para>
					<programlisting>|[property] =property | value</programlisting>
					<programlisting/>
					<para>(*1) (field name for files)</para>
					<para>In order for files to be attached the mails, you must use the field names: </para>
					<para>attachment, attachment1, ... , attachment10</para>
				</section>
				<section>
					<title>Displaying the form:</title>
				</section>
				<section>
					<title>You must set the property "layout". If you do not set it, the form will not be rendered! For more information see the example and the table below.</title>You must set the property "layout"
					<section>
						<title>Example:</title>
					</section>
				</section>
				<section>
					<title>temp.mailform = FORM</title>
				</section>
				<section>
					<title>temp.mailform {</title>
				</section>
				<section>
					<title/>
				</section>
				<section>
					<title>&#xA0; dataArray {</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; 10.label = Name:</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; 10.type = name=input</title>
				</section>
				<section>
					<title/>
				</section>
				<section>
					<title>&#xA0; &#xA0; 20.label = Nachricht:</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; 20.type = nachricht=textarea,40,10</title>
				</section>
				<section>
					<title/>
				</section>
				<section>
					<title>&#xA0; &#xA0; 100.type = submit=submit</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; 100.value = Absenden</title>
				</section>
				<section>
					<title>&#xA0; }</title>
				</section>
				<section>
					<title>&#xA0; recipient = info@example.com</title>
				</section>
				<section>
					<title>&#xA0; layout = &lt;div class="some-class"&gt;###LABEL### ###FIELD###&lt;/div&gt;</title>
				</section>
				<section>
					<title>}</title>
				</section>
				<section>
					<title>Correct return-email:</title>
					<para>In order for the mails to be attached with the email address of the people that submits the mails, please use the field name "email", e.g:</para>
					<para>Email: | *email=input | </para>
				</section>
				<section>
					<title>Special evaluation</title>
					<para>By prefixing a "*" before the field name of most types you can have the value of the field required. The check is done in JavaScript; It will only submit the form if this field is filled in.</para>
					<para>Alternatively you can evaluate a field value against a regular expression or as an email address for certain types (textarea, password, input).</para>
					<para>This is done by specifying the "Special evaluation configuration" for those types as part 4 in the configuration line (see examples above).</para>
					<para>The special evaluation types are divided by a semicolon (":"). </para>
					<para>The first part defines the evaluation keyword. Current options are "EREG" (for regular expression) and "EMAIL" (for evaluation to an email address).</para>
					<para>If the "EREG" keyword is specified the 2nd and 3rd parts are error message and regular expression respectively.</para>
					<section>
						<title>Examples:</title>
						<programlisting>Your address: | address=textarea,40,10 | &#xA0;| EREG : You can only enter the characters A to Z : ^[a-zA-Z]*$</programlisting>
						<programlisting>Your email: | *email=input | &#xA0;| EMAIL</programlisting>
						<para/>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>data</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>This is the data that sets up the form. See above.</para>
											<para>"||" can be used instead of line breaks</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>dataArray</para>
										</entry>
										<entry>
											<para>[array of form elements]</para>
										</entry>
										<entry>
											<para>This is an alternative way to define the form-fields. Instead of using the syntax with vertical separator bars suggested by the .data property, you can define the elements in regular TypoScript style arrays.</para>
											<para>.dataArray is added to the input in .data if any.</para>
											<para>Every entry in the dataArray is numeric and has three main properties, label, type, value and required. All of them have stdWrap properties. </para>
											<para>There is an alternative property to .value, which is .valueArray. This is also an array in the same style with numeric entries which has properties label, value and selected. All three of these properties have stdWrap properties.</para>
											<para/>
											<para>Example:</para>
											<para>dataArray {</para>
											<para>&#xA0; 10.label = Name:</para>
											<para>&#xA0; 10.type = name=input</para>
											<para>&#xA0; 10.value = [Enter name]</para>
											<para>&#xA0; 10.required = 1</para>
											<para>&#xA0; 20.label = Eyecolor</para>
											<para>&#xA0; 20.type = eyecolor=select</para>
											<para>&#xA0; 20.valueArray {</para>
											<para>&#xA0; &#xA0; 10.label = Blue</para>
											<para>&#xA0; &#xA0; 10.value = 1</para>
											<para>&#xA0; &#xA0; 20.label = Red</para>
											<para>&#xA0; &#xA0; 20.value = 2</para>
											<para>&#xA0; &#xA0; 20.selected = 1</para>
											<para>&#xA0; }</para>
											<para>&#xA0; 40.type = submit=submit</para>
											<para>&#xA0; 40.value = Submit</para>
											<para>}</para>
											<para/>
											<para>This is the same as this line in the .data property:</para>
											<para/>
											<para>Name: | *name=input | [Enter name]</para>
											<para>Eyecolor: | eyecolor=select | Blue=1, *Red=2</para>
											<para>| submit=submit | Submit</para>
											<para/>
											<para>Why do it this way? Good question, but doing it this way has a tremendous advantage, because labels are all separated from the codes. In addition it's much easier to pull out or insert new elements in the form.</para>
											<para>Inserting an email-field after the name field would be like this:</para>
											<para>dataArray {</para>
											<para>&#xA0; 15.label = Email:</para>
											<para>&#xA0; 15.type = input</para>
											<para>&#xA0; 15.value = 
												<olink targetdocent="mailto:your@email.com">your@email.com</olink>
											</para>
											<para>&#xA0; 15.specialEval = EMAIL</para>
											<para>}</para>
											<para/>
											<para>Or translating the form to danish (setting config.language to 'dk'):</para>
											<para/>
											<para>dataArray {</para>
											<para>&#xA0; 10.label.lang.dk = Navn:</para>
											<para>&#xA0; 10.value.lang.dk = [Indtast dit navn]</para>
											<para>&#xA0; 20.label.lang.dk = &#xD8;jenfarve</para>
											<para>&#xA0; 20.valueArray {</para>
											<para>&#xA0; &#xA0; 10.label.lang.dk = Bl&#xE5;</para>
											<para>&#xA0; &#xA0; 20.label.lang.dk = R&#xF8;d</para>
											<para>&#xA0; }</para>
											<para>&#xA0; 40.value.lang.dk = Send</para>
											<para>}</para>
											<para/>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>radioWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Wraps the labels for radio buttons.</para>
											<para/>
											<para/>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>radioWrap.accessibilityWrap</para>
										</entry>
										<entry>
											<para>wrap /stdWrap</para>
										</entry>
										<entry>
											<para>Defines how radio buttons are wrapped when accessibility mode is turned on (see below "accessibility" property).</para>
										</entry>
										<entry>
											<para>&lt;fieldset###RADIO_FIELD_ID###&gt;&lt;legend&gt;###RADIO_GROUP_LABEL###&lt;/legend&gt;|&lt;/fieldset&gt;</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>radioInputWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Wraps the input element and label of a radio button.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>type</para>
										</entry>
										<entry>
											<para>integer, string</para>
										</entry>
										<entry>
											<para>Type (action="" of the form):</para>
											<para/>
											<para>Integer: this is regarded to be a page in TYPO3</para>
											<para>String: this is regarded to be a normal URL (e.g. "formmail.php" or "fe_tce_db.php")</para>
											<para>Empty: the current page is chosen.</para>
											<para/>
											<para>NOTE: If type is integer/empty the form will be submitted to a page in TYPO3 and if this page has a value for target/no_cache, then this will be used instead of the default target/no_cache below.</para>
											<para/>
											<para>NOTE: If the redirect-value is set, the redirect-target overrides the target set by the action-url</para>
											<para/>
											<para>NOTE: May be overridden by the property override feature of the formdata (see above)</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>target</para>
										</entry>
										<entry>
											<para>target /stdWrap</para>
										</entry>
										<entry>
											<para>Default target of the form.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>method</para>
										</entry>
										<entry>
											<para>form-method /stdWrap</para>
										</entry>
										<entry>
											<para>Example: </para>
											<para>GET</para>
										</entry>
										<entry>
											<para>POST</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>no_cache</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Default no_cache-option.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>noValueInsert</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>By default values that are submitted to the same page (and thereby same form, e.g. at search forms) are re-inserted in the form instead of any default-data that might be set up. </para>
											<para>This, however, applies ONLY if the "no_cache=1" is set! (a page being cached may not include user-specific defaults in the fields of course...) </para>
											<para>If you set this flag, "noValueInsert", the content will always be the default content.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>compensateFieldWidth</para>
										</entry>
										<entry>
											<para>double /stdWrap</para>
										</entry>
										<entry>
											<para>Overriding option to the config-value of the same name. See "CONFIG" above.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>locationData</para>
										</entry>
										<entry>
											<para>boolean / string /stdWrap</para>
										</entry>
										<entry>
											<para>If this value is true, then a hidden-field called "locationData" is added to the form. This field will be loaded with a value like this:</para>
											<para>[page id]:[current record table]:[current record id]</para>
											<para>For example, if a formfield is inserted on page with uid = "100", as a page-content item from the table "tt_content" with id "120", then the value would be "100:tt_content:120".</para>
											<para>The value is use by eg. the cObject SEARCHRESULT. If the value $GLOBALS['HTTP_POST_VARS']['locationData'] is detected here, the search is done as if it was performed on this page! This is very useful if you want a search functionality implemented on a page with the "stype" field set to "L1" which means that the search is carried out from the first level in the rootline. </para>
											<para>Suppose you want the search to submit to a dedicated search page where ever. This page will then know - because of locationData - that the search was submitted from another place on the website.</para>
											<para>If "locationData" is not only true but also set to "HTTP_POST_VARS" then the value will insert the content of $GLOBALS['HTTP_POST_VARS']['locationData'] instead of the true location data of the page. This should be done with search-fields as this will carry the initial searching start point with.</para>
											<para>NOTE: May be overridden by the property override feature of the formdata (see above)</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>redirect</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>URL to redirect to (generates the hidden field "redirect")</para>
											<para/>
											<para>Integer: this is regarded to be a page in TYPO3</para>
											<para>String: this is regarded to be a normal url</para>
											<para>Empty; the current page is chosen.</para>
											<para/>
											<para>NOTE: If this value is set, the target of this overrides the target of the "type".</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>recipient</para>
										</entry>
										<entry>
											<para>(list of) string /stdWrap</para>
										</entry>
										<entry>
											<para>Email recipient of the formmail content (generates the hiddenfield "recipient")</para>
										</entry>
										<entry>
											<para>No email</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>goodMess</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Message for the form evaluation function in case of correctly filled form.</para>
											<para/>
											<para>NOTE: May be overridden by the property override feature of the formdata (see above).</para>
										</entry>
										<entry>
											<para>No message</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>badMess</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Message for the form evaluation in case of missing required fields. </para>
											<para>This message is shown above the list of fields.</para>
											<para/>
											<para>NOTE: May be overridden by the property override feature of the formdata (see above).</para>
										</entry>
										<entry>
											<para>No message</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>emailMess</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Message if a field evaluated to be an email address did not validate.</para>
											<para/>
											<para>NOTE: May be overridden by the property override feature of the formdata (see above).</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>image</para>
										</entry>
										<entry>
											<para>-&gt;IMAGE (cObject)</para>
										</entry>
										<entry>
											<para>If this is a valid image the submit button is rendered as this image!!</para>
											<para/>
											<para>NOTE: CurrentValue is set to the caption-label before generating the image.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>layout</para>
										</entry>
										<entry>
											<para>string</para>
										</entry>
										<entry>
											<para>This defines how the label and the field are placed towards each other.</para>
											<para/>
											<para>This property is mandatory; you must set it! Otherwise the form will not be rendered.</para>
											<para/>
											<para>Example:</para>
											<para>This substitutes the marker "###FIELD###" with the field data and the marker "###LABEL###' with label data. </para>
											<para/>
											<para>layout = &lt;tr&gt;&lt;td&gt;###FIELD###&lt;/td&gt;&lt;td&gt; ###LABEL###&lt;/td&gt;&lt;/tr&gt;</para>
											<para/>
											<para>You can also use the marker ###COMMENT### which is ALSO the label value inserted, but wrapped in .commentWrap stdWrap-properties (see below).</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>fieldWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Field: Wraps the fields</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>labelWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Labels: Wraps the label</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>commentWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Comments: Wrap for comments IF you use ###COMMENT###</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>REQ</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>Defines if required-fields should be checked and marked up.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>REQ.fieldWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Field: Wraps the fields, but for required fields</para>
										</entry>
										<entry>
											<para>the "fieldWrap"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>REQ.labelWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Labels: Wraps the label, but for required fields</para>
										</entry>
										<entry>
											<para>the "labelWrap"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>REQ.layout</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>The same as "layout" above, but for required fields</para>
										</entry>
										<entry>
											<para>the "layout"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>COMMENT.layout</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Alternative layout for comments.</para>
										</entry>
										<entry>
											<para>the "layout"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>CHECK.layout</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Alternative layout for checkboxes</para>
										</entry>
										<entry>
											<para>the "layout"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>RADIO.layout</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Alternative layout for radio buttons</para>
										</entry>
										<entry>
											<para>the "layout"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>LABEL.layout</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Alternative layout for label types</para>
										</entry>
										<entry>
											<para>the "layout"-property</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>stdWrap</para>
										</entry>
										<entry>
											<para>-&gt;stdWrap</para>
										</entry>
										<entry>
											<para>Wraps the whole form (before form tag is added)</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>hiddenFields</para>
										</entry>
										<entry>
											<para>[array of cObject]</para>
										</entry>
										<entry>
											<para>Used to set hiddenFields from TS.</para>
											<para/>
											<para>Example:</para>
											<para>hiddenFields.pid = TEXT</para>
											<para>hiddenFields.pid.value = 2</para>
											<para/>
											<para>This makes a hidden-field with the name "pid" and value "2".</para>
											<para/>
											<para>Available sub-property:</para>
											<para>stdWrap, see -&gt;stdWrap.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>params</para>
										</entry>
										<entry>
											<para>form-element tag parameters /stdWrap</para>
										</entry>
										<entry>
											<para>Extra parameters to form elements.</para>
											<para/>
											<para>Example:</para>
											<para>params = style="width:200px;"</para>
											<para>params.textarea = style="width:300px;"</para>
											<para>params.check = </para>
											<para/>
											<para>This sets the default to 200 px width, but excludes check-boxes and sets textareas to 300.</para>
											<para/>
											<para>stdWrap is available for the sub-properties, e.g. params.tagname.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>wrapFieldName</para>
										</entry>
										<entry>
											<para>wrap /stdWrap</para>
										</entry>
										<entry>
											<para>This wraps &#xA0;the field names before they are applied to the form-field tags.</para>
											<para/>
											<para>Example:</para>
											<para>If value is tx_myextension[input][ &#xA0;| &#xA0;] &#xA0;then the field name "email" would be wrapped to this value: tx_myextension[input][email]</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>noWrapAttr</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>If this value is true then all wrap attributes of textarea elements are suppressed. This is needed for XHTML-compliancy.</para>
											<para/>
											<para>The wrap attributes can also be disabled on a per-field basis by using the special keyword "disabled" as the value of the wrap attribute.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>arrayReturnMode</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>If set, the &lt;form&gt; tags and the form content will be returned in an array as separate elements including other practical values. This mode is for use in extensions where the array return value can be more useful.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>accessibility</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>If set, then the form will be compliant with accessibility guidelines (XHTML compliant). This includes:</para>
											<para/>
											<orderedlist>
												<listitem>
													<para>label string will be wrapped in &lt;label for="formname[field name-hash]"&gt; ... &lt;/label&gt;</para>
												</listitem>
												<listitem>
													<para>All form elements will have an id-attribute carrying the formname with the md5-hashed field name appended</para>
												</listitem>
											</orderedlist>
											<para/>
											<para>Notice: In TYPO3 4.0 and later, CSS Styled Content is configured to produce accessible forms by default.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>formName</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>An alternative name for this form. Default will be a unique (random) hash.</para>
											<para/>
											<para>&lt;form name="..."&gt;</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>fieldPrefix</para>
										</entry>
										<entry>
											<para>string /stdWrap</para>
										</entry>
										<entry>
											<para>Alternative prefix for the name of the fields in this form. Otherwise, all fields are prefixed with the form name (either a unique hash or the name set in the "formName" property). If set to "0", there will be no prefix at all.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>dontMd5FieldNames</para>
										</entry>
										<entry>
											<para>boolean /stdWrap</para>
										</entry>
										<entry>
											<para>The IDs generated for all elements in a form are md5 hashes from the field name. Setting this to true will disable this behavior and use a cleaned field name, prefixed with the form name as the ID, instead.</para>
											<para>This can be useful to style specifically named fields with CSS.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:(cObject).FORM]</para>
					</section>
					<section>
						<title>Example: Login</title>
						<para>In order to create a login form, you would need to supply these fields:</para>
						<orderedlist>
							<listitem>
								<para>"username" = username</para>
							</listitem>
							<listitem>
								<para>"userident" = password</para>
							</listitem>
							<listitem>
								<para>"login_status" = "logout" for logout, "login" for login.</para>
							</listitem>
						</orderedlist>
						<para>If you insert "&lt;!--###USERNAME###--&gt;" somewhere in your document this will be substituted by the username if a user is logged in!</para>
						<para>If you want the login-form to change into a logout form you should use conditions to do this. See this TS-example (extract from the static_template "styles.content (default)"):</para>
						<programlisting>&#xA0; # loginform</programlisting>
						<programlisting>styles.content.loginform {</programlisting>
						<programlisting>&#xA0; data = Username:|*username=input || Password:|*userident=password </programlisting>
						<programlisting>}</programlisting>
						<programlisting>[usergroup = *]</programlisting>
						<programlisting>styles.content.loginform.data = Username: &lt;!--###USERNAME###--&gt; &#xA0;|| |submit=submit| Logout</programlisting>
						<programlisting>[global]</programlisting>
					</section>
					<section>
						<title>Example: Mailform</title>
						<para>This creates a simple mail form (this is not TypoScript, but the setup code that you should put directly into the "bodytext"-field of a pagecontent record of the type "FORMMAIL":</para>
						<programlisting>Name: | *replyto_name= input | Enter your name here</programlisting>
						<programlisting>Email: | *replyto_email=input | </programlisting>
						<programlisting>Like TV: | tv=check | </programlisting>
						<programlisting>| formtype_mail = submit | Send this!</programlisting>
						<programlisting/>
						<programlisting>| html_enabled=hidden | 1</programlisting>
						<programlisting>| subject=hidden| This is the subject</programlisting>
						<programlisting>| recipient_copy=hidden | copy@email.com</programlisting>
						<programlisting>| auto_respond_msg=hidden| &#xA0;Hello / This is an automatic response. //We have received your mail.</programlisting>
						<programlisting>| from_name=hidden | Website XY </programlisting>
						<programlisting>| from_email=hidden | noreply@website.com</programlisting>
						<programlisting>| organization=hidden | Organization XY</programlisting>
						<programlisting>| redirect=hidden | 16</programlisting>
						<programlisting>| priority=hidden | 5</programlisting>
						<programlisting>| tv=hidden | 0</programlisting>
						<para/>
						<orderedlist>
							<listitem>
								<para>"replyto_name": If the field is named like this the value is used as reply to name in the email software and will not be shown in the mail content. Choose another field name like the_name to use the value as a normal field. Note the asterisk (*) which means the field is required. and the field name will be "the_name". Also a default value is set ("Enter your name here")</para>
							</listitem>
						</orderedlist>
						<orderedlist>
							<listitem>
								<para>"replyto_email": If the field is named like this the value is used as reply to email address in the email software and will not be shown in the mail content. To get the value as sender address in the mail software use "email" as field name.</para>
							</listitem>
							<listitem>
								<para>"Like TV" is a checkbox. Default is "unchecked".</para>
							</listitem>
							<listitem>
								<para>"formtype_mail" is the name of the submit button. It must be names so if you use the built-in form mail of TYPO3, at it will make TYPO3 react automatically on the input and interpret it as form mail input!</para>
							</listitem>
						</orderedlist>
						<orderedlist>
							<listitem>
								<para>"html_enabled" will let the mail be rendered in nice HTML</para>
							</listitem>
							<listitem>
								<para>"use_base64" will send the mail encoded as base64 instead of quoted-printable</para>
							</listitem>
							<listitem>
								<para>"subject": Enter the subject of your mail</para>
							</listitem>
							<listitem>
								<para>"recipient_copy" : A copy is sent to this mail-address. You may supply more addresses by separating with a comma (,). The mail sent to recipient_copy is the same, but a separate message from the one sent to the 'recipient' and furthermore the copy-mail is sent only if the 'recipient' mail is sent.</para>
							</listitem>
							<listitem>
								<para>"auto_respond_msg": This is an auto-responder message. This is sent if the email of the "submitter" is known (field: "email"). The value of this is the message broken up in to lines by a slash "/". Each slash is a new line in the email. The first line is used for the subject.</para>
							</listitem>
							<listitem>
								<para>"from_name": With this option you can set the mail header from name, which will be shown in the mail software.</para>
							</listitem>
							<listitem>
								<para>"from_email": With this option you can set the mail header from email, which will be shown in the mail software as sender address.</para>
							</listitem>
						</orderedlist>
						<orderedlist>
							<listitem>
								<para>"organization": With this option you can set the mail header organization parameter, which won't be shown in the mail but in the mail header.</para>
							</listitem>
							<listitem>
								<para>"redirect": With this option you can define a TYPO3 page (page id) or external URL (www.example.com) as redirect url after submit. If this option isn't set the form will be shown again.</para>
							</listitem>
							<listitem>
								<para>"priority": With this option you can set the priority of the mail from 1 (not important) to 5 (very important). Default is 3.</para>
							</listitem>
							<listitem>
								<para>"tv" (again, but hidden). Repeating this field may be smart as the value "tv" is normally NOT submitted with the value "false" if not checked. Inserting this line will ensure a default value for "tv".</para>
							</listitem>
						</orderedlist>
					</section>
				</section>
			</section>
			<section>
				<title>SEARCHRESULT</title>
				<para>Search words are loaded into the register in a form ready for linking to pages:</para>
				<section>
					<title>Example:</title>
					<para>register:SWORD_PARAMS = '&amp;sword_list[]=word1&amp;sword_list[]=word2 .....'</para>
					<para>See typolink for more info!</para>
					<para>SEARCHRESULT returns results only from pages with of doktype "Standard" (1), "Advanced" (2) and "Not in menu" (5)</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>allowedCols</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>List (separated by ":") of allowed table-cols.</para>
										<para/>
										<para>Example:</para>
										<para>pages.title:tt_content.bodytext</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>layout</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>This defines how the search content is shown.</para>
										<para/>
										<para>Example:</para>
										<para>This substitutes the following fields:</para>
										<para>###RANGELOW###:The low result range, eg. "1"</para>
										<para>###RANGEHIGH###:The high result range, eg. "10"</para>
										<para>###TOTAL###:The total results</para>
										<para>###RESULT###:The result itself</para>
										<para>###NEXT###:The next-button</para>
										<para>###PREV###:The prev-button</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>next</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>This cObject will be wrapped by a link to the next search result. This is the code substituting the "###NEXT###"-mark</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>prev</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>This cObject will be wrapped by a link to the prev search result. This is the code substituting the "###PREV###"-mark</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>target</para>
									</entry>
									<entry>
										<para>target /stdWrap</para>
									</entry>
									<entry>
										<para>target til next/prev links!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>range</para>
									</entry>
									<entry>
										<para>integer /stdWrap</para>
									</entry>
									<entry>
										<para>The number of results at a time!</para>
									</entry>
									<entry>
										<para>20</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>renderObj</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>The cObject to render the search results</para>
										<para>$cObj-&gt;data array is set to the resulting record from the search.</para>
										<para>Please note, that in all fields are named [tablename]_[fieldnam]. Thus the page title is in the field "pages_title".</para>
										<para>Apart from this, these fields from the pages-table are also present:</para>
										<para>uid</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>renderWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>resultObj</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>The cObject prepended in the search results returns rows</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>noResultObj</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>The cObject used if the search results in no rows.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>noOrderBy</para>
									</entry>
									<entry>
										<para>boolean /stdWrap</para>
									</entry>
									<entry>
										<para>If this is set, the result is NOT sorted after lastUpdated, tstamp for the pages-table.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wrap the whole content...</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Wrap the whole content...</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>addExtUrlsAndShortCuts</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, then the doktypes 3 and 4 (External URLS and Shortcuts) are added to the doktypes being searched.</para>
										<para>However at this point in time, no pages will be select if they do not have at least one tt_content record on them! That is because the pages and tt_content (or other) table is joined. So there must at least be one occurrence of a tt_content element on an External URL / Shortcut page for them to show up.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>languageField.[2nd table]</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Setting a field name to filter language on. This works like the "languageField" setting in -&gt;select</para>
										<para/>
										<para>Example:</para>
										<para/>
										<para>languageField.tt_content = sys_language_uid</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).SEARCHRESULT]</para>
					<para>NOTE: "sword" and "scols" MUST be set in order for the search to be engaged.</para>
					<para>var "sword" = search word(s)</para>
					<para>var "scols" = search columns separated by ":". E.g.:pages.title:pages.keywords:tt_content.bodytext</para>
					<para>var "stype" = the starting point of the search:false = current page, L-2 = page before currentPage, L-1 = current page, L0 = rootlevel, L1 = from first level, L2 = from second level</para>
					<para>var $GLOBALS['HTTP_POST_VARS']['locationData']: If this is set, the search is done as was it from another page in the website given by the value of "locationData" here. See the description at the cObject "FORMS".</para>
					<para>Only if the page locationData is pointing to, is inside the real rootLine of the site, the search will take this into account.</para>
					<para>internal:</para>
					<para>var "scount": If this is set this is used as the searchCount - the total rows in the search. This way we don't need to reconstruct this number!</para>
					<para>var "spointer": This points to the start-record in the search.</para>
					<para>LATER:</para>
					<para>var "alldomains" :boolean: If set the search will proceed into other domains</para>
					<para>var "allsites" : boolean: If set the search will proceed into other sites (defined by the "root" setting of an active template.)</para>
					<para>var "depth":The depth</para>
				</section>
				<section>
					<title>Search syntax</title>
					<para>When you search, you can use three operatortypes </para>
					<orderedlist>
						<listitem>
							<para>AND: "+", "and" (UK), "og" (DK) &#xA0;</para>
						</listitem>
						<listitem>
							<para>OR: "or" (UK), "eller" (DK) &#xA0;</para>
						</listitem>
						<listitem>
							<para>NOT: "-", "not" (UK), "uden" (DK) </para>
						</listitem>
					</orderedlist>
					<para>Default operator is AND. If you encapsulate words in "" they are searched for as a whole string. The search is case insensitive and matches parts of words also. </para>
					<section>
						<title>Examples: </title>
						<orderedlist>
							<listitem>
								<para>menu backend - will find pages with both 'menu' and 'backend'. &#xA0;</para>
							</listitem>
							<listitem>
								<para>"menu backend" - will find pages with the phrase "menu backend". &#xA0;</para>
							</listitem>
							<listitem>
								<para>menu or backend - will find pages with either 'menu' or 'backend' &#xA0;</para>
							</listitem>
							<listitem>
								<para>menu or backend not content - will find pages with either 'menu' or 'backend' but not 'content' </para>
							</listitem>
						</orderedlist>
					</section>
				</section>
				<section>
					<title>Queries to the examples</title>
					<para>In this case "pagecontent" is chosen as the fields to search. That includes &#xA0;tt_content.header, tt_content.bodytext and &#xA0;tt_content.imagecaption. </para>
					<para>Prefixed to these queries is this:</para>
					<programlisting>SELECT pages.title AS pages_title, pages.subtitle AS pages_subtitle, pages.keywords AS pages_keywords, pages.description AS pages_description, pages.uid, tt_content.header AS tt_content_header, tt_content.bodytext AS tt_content_bodytext, tt_content.imagecaption AS tt_content_imagecaptionFROM pages, tt_contentWHERE(tt_content.pid=pages.uid) AND (pages.uid IN (2,5,6,20,21,22,29,30,31,3,4,8,9,16,1) AND pages.doktype in (1,2,5) AND pages.no_search=0 AND NOT tt_content.deleted AND NOT tt_content.hidden AND (tt_content.starttime&lt;=985792797) AND (tt_content.endtime=0 OR tt_content.endtime&gt;985792797) AND tt_content.fe_group IN (0,-1) AND NOT pages.deleted AND NOT pages.hidden AND (pages.starttime&lt;=985792797) AND (pages.endtime=0 OR pages.endtime&gt;985792797) AND pages.fe_group IN (0,-1)) ...</programlisting>
					<para/>
					<para>The part "... pages.uid IN (2,5,6,20,21,22,29,30,31,3,4,8,9,16,1)... " is a list of pages-uid's to search. This list is based on the page-ids in the website-branch of the pagetree and confines the search to that branch and not the whole page-table.</para>
					<orderedlist>
						<listitem>
							<para>... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') AND (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%')) GROUP BY pages.uid</para>
						</listitem>
						<listitem>
							<para>... AND ((tt_content.header LIKE '%menu backend%' OR tt_content.bodytext LIKE '%menu backend%' OR tt_content.imagecaption LIKE '%menu backend%')) GROUP BY pages.uid</para>
						</listitem>
						<listitem>
							<para>... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') OR (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%')) GROUP BY pages.uid</para>
						</listitem>
						<listitem>
							<para>... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') OR (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%') AND NOT (tt_content.header LIKE '%content%' OR tt_content.bodytext LIKE '%content%' OR tt_content.imagecaption LIKE '%content%')) GROUP BY pages.uid</para>
						</listitem>
					</orderedlist>
					<para/>
					<para>Notice that upper and lowercase does not matter. Also 'menu' as searchword will find 'menu', 'menus', 'menuitems' etc.</para>
				</section>
			</section>
			<section>
				<title>USER and USER_INT</title>
				<para>This calls either a PHP-function or a method in a class. This is very useful if you want to incorporate you own data processing or content. </para>
				<para>Basically this is a userdefined cObject, because it's just a call to a function or method you control!</para>
				<para>An important thing to know is that if you call a method in a class (which is of course instantiated as an object) the internal variable 'cObj' of that class is set with a reference to the parent cObj. See the file typo3/sysext/cms/tslib/media/scripts/example_callfunction.php for an example of how this may be useful for you. Basically it offers you an API of functions which are more or less relevant for you. Refer to the appendix "PHP include scripts" at the end of this document.</para>
				<para>If you create this object as USER_INT, it'll be rendered non-cached, outside the main page-rendering.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>userFunc</para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>The name of the function. If you specify the name with a '-&gt;' in, it's interpreted as a call to a method in a class.</para>
									<para>Two parameters are sent: A content variable (which is empty in this case, but not when used from stdWrap function .postUserFunc and .preUserFunc) and the second parameter is an array with the properties of this cObject if any.</para>
									<para/>
									<para>Example:</para>
									<para>This TypoScript will display all content element headers of a page in reversed order. Please take a look at typo3/sysext/cms/tslib/media/scripts/example_callfunction.php!</para>
									<para/>
									<para>page = PAGE</para>
									<para>page.typeNum=0</para>
									<para>includeLibs.something = typo3/sysext/cms/tslib/media/scripts/example_callfunction.php</para>
									<para/>
									<para>page.30 = USER</para>
									<para>page.30 {</para>
									<para>&#xA0; userFunc = user_various-&gt;listContentRecordsOnPage</para>
									<para>&#xA0; reverseOrder = 1</para>
									<para>}</para>
									<para/>
									<para>NOTE: When using a function, the name of the function has to start with "user_". When using a class, the name of the class must start with "user_" (there are no conditions on the name of the method).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>includeLibs</para>
								</entry>
								<entry>
									<para>list of resource /stdWrap</para>
								</entry>
								<entry>
									<para>This property applies only if the object is created as USER_INT.</para>
									<para/>
									<para>This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.</para>
									<para>This is possible to do because any include-files will be known before the scripts are included.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).USER/(cObject).USER_INT]</para>
			</section>
			<section>
				<title>TEMPLATE</title>
				<para>With this cObject you can define a template (e.g. an HTML file) which should be used as a basis for your whole website. Inside the template file you can define markers, which will later be replaced with dynamic content by TYPO3.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>template</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This must be loaded with the template-code. If not, the object returns nothing.</para>
									<para/>
									<para>Example:</para>
									<para>page.10 {</para>
									<para>&#xA0; template = FILE</para>
									<para>&#xA0; template.file = fileadmin/template.html</para>
									<para>}</para>
									<para>This will use the file fileadmin/template.html as template for your website.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>subparts</para>
								</entry>
								<entry>
									<para>Array... of </para>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is an array of subpart-markers (case-sensitive).</para>
									<para>A subpart is defined by two markers in the template. The markers must be wrapped by "###" on both sides. You may insert the subpart-markers inside HTML-comment-tags!! </para>
									<para/>
									<para>Example: </para>
									<para>In the template there is the subpart "HELLO":</para>
									<para>&lt;!-- start of subpart ###HELLO### --&gt;</para>
									<para>This is the HTML-code, that will be loaded in the register and will be replaced with the result...</para>
									<para>&lt;!-- end ###HELLO### --&gt;</para>
									<para/>
									<para>The following TypoScript code now replaces the subpart "HELLO" with the text given in "value":</para>
									<para>page.10.subparts {</para>
									<para>&#xA0; HELLO = TEXT</para>
									<para>&#xA0; HELLO.value = En subpart er blevet erstattet!!</para>
									<para>}</para>
									<para/>
									<para>NOTE:</para>
									<para>Before the content-objects of each subpart are generated, all subparts in the array are extracted and loaded into the register so that you can load them from there later on. </para>
									<para>The register-key for each subparts code is "SUBPART_[theSubpartkey]".</para>
									<para>In addition the current-value is loaded with the content of each subpart just before the cObject for the subpart is parsed. That makes it quite easy to load the subpart of the cObject (eg: ".current=1")</para>
									<para>Eg. this subpart above has the register-key "SUBPART_HELLO".</para>
									<para>This is valid ONLY if the property .nonCachedSubst is not set! (see below)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>relPathPrefix</para>
								</entry>
								<entry>
									<para>string / properties</para>
								</entry>
								<entry>
									<para>Finds all relative references (e.g. to images or stylesheets) and prefixes this value.</para>
									<para>If you specify properties (uppercase) these will match HTML tags and specify alternative paths for them. See example below.</para>
									<para>If the property is named "style" it will set alternative path for the "url()" wrapper that may be in &lt;style&gt; sections.</para>
									<para/>
									<para>Example:</para>
									<para>page.10 = TEMPLATE</para>
									<para>page.10 {</para>
									<para>&#xA0; template = FILE</para>
									<para>&#xA0; template.file = fileadmin/template.html</para>
									<para>&#xA0; relPathPrefix = fileadmin/</para>
									<para>&#xA0; relPathPrefix.IMG = fileadmin/img/</para>
									<para>}</para>
									<para/>
									<para>In this example all relative paths found are prefixed "fileadmin/" unless it was the src attribute of an img tag in which case the path prefixed is "fileadmin/img/"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>marks</para>
								</entry>
								<entry>
									<para>Array... of </para>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is an array of marks-markers (case-sensitive).</para>
									<para>A mark is defined by one marker in the template. The marker must be wrapped by "###" on both sides. Opposite to subparts, you may NOT insert the subpart-markers inside HTML-comment-tags! (They will not be removed.)</para>
									<para/>
									<para>Example: </para>
									<para>In the template:</para>
									<para>&lt;div id="copyright"&gt;</para>
									<para>&#xA0; &amp;copy; ###DATE###</para>
									<para>&lt;/div&gt;</para>
									<para/>
									<para>The following TypoScript code now dynamically replaces the marker "DATE" with the current year:</para>
									<para>page.10.marks {</para>
									<para>&#xA0; DATE = TEXT</para>
									<para>&#xA0; DATE {</para>
									<para>&#xA0; &#xA0; data = date : U</para>
									<para>&#xA0; &#xA0; strftime = %Y</para>
									<para>}</para>
									<para/>
									<para>Marks are substituted by a str_replace-function. The subparts loaded in the register are also available to the cObjects of markers (only if .nonCachedSubst is not set!).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wraps</para>
								</entry>
								<entry>
									<para>Array... of </para>
									<para>cObject</para>
								</entry>
								<entry>
									<para>This is an array of wraps-markers (case-sensitive).</para>
									<para>This is shown best by an example:</para>
									<para>Example: </para>
									<para>In the template there is the subpart "MYLINK":</para>
									<para>This is &lt;!--###MYLINK###--&gt;a link to my&lt;!--###MYLINK###--&gt; page!</para>
									<para/>
									<para>With the following TypoScript code the subpart will be substituted by the wrap which is the content returned by the MYLINK cObject.</para>
									<para>page.10.wraps {</para>
									<para>&#xA0; MYLINK = TEXT</para>
									<para>&#xA0; MYLINK.value = &lt;a href="#"&gt; | &lt;/a&gt;</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>workOnSubpart</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>This is an optional definition of a subpart, that we decide to work on. In other words; if you define this value that subpart is extracted from the template and is the basis for this whole template object.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>markerWrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>This is the wrap the markers are wrapped with. The default value is ### | ### resulting in the markers to be presented as ###[marker_key]###.</para>
									<para>Any whitespace around the wrap-items is stripped before they are set around the marker_key.</para>
								</entry>
								<entry>
									<para>### | ###</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>substMarksSeparately</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, then marks are substituted in the content AFTER the substitution of subparts and wraps. </para>
									<para>Normally marks are not substituted inside of subparts and wraps when you are using the default cached mode of the TEMPLATE cObject. That is a problem if you have marks inside of subparts! But setting this flag will make the marker-substitution a non-cached, subsequent process.</para>
									<para>Another solution is to turn of caching, see below.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>nonCachedSubst</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, then the substitution mode of this cObject is totally different. Normally the raw template is read and divided into the sections denoted by the marks, subparts and wraps keys. The good thing is high speed, because this "pre-parsed" template is cached. The bad thing is that templates that depend on incremental substitution (where the order of substitution is important) will not work so well.</para>
									<para>By setting this flag, markers are first substituted by str_replace in the template - one by one. Then the subparts are substituted one by one. And finally the wraps one by one.</para>
									<para>Obviously you loose the ability to refer to other parts in the template with the register-keys as described above. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).TEMPLATE]</para>
				<section>
					<title>Example: </title>
					<programlisting>page.10 = TEMPLATE</programlisting>
					<programlisting>page.10 {</programlisting>
					<programlisting>&#xA0; template = FILE</programlisting>
					<programlisting>&#xA0; template.file = fileadmin/test.tmpl</programlisting>
					<programlisting>&#xA0; subparts {</programlisting>
					<programlisting>&#xA0; &#xA0; HELLO = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; HELLO.value = This is the replaced subpart-code.</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; marks {</programlisting>
					<programlisting>&#xA0; &#xA0; Testmark = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; Testmark.value = This is replacing a simple marker in the HTML-code.</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>&#xA0; workOnSubpart = DOCUMENT</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<para>In this example a template named test.tmpl is loaded and used.</para>
					<para/>
				</section>
			</section>
			<section>
				<title>FLUIDTEMPLATE</title>
				<para>The TypoScript object FLUIDTEMPLATE works in a similar way to the regular "marker"-based TEMPLATE object. However, it does not use markers or subparts, but allows Fluid-style variables with curly braces.</para>
				<para>
					<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}1000020100000020000000200F1A6686.png" width=""/>Note
				</para>
				<para>The extensions "fluid" and "extbase" need to be installed for this to work.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>The fluid template file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>layoutRootPath</para>
								</entry>
								<entry>
									<para>filepath /stdWrap</para>
								</entry>
								<entry>
									<para>Sets a specific layout path; usually it is Layouts/ underneath the template file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>partialRootPath</para>
								</entry>
								<entry>
									<para>filepath /stdWrap</para>
								</entry>
								<entry>
									<para>Sets a specific partials path; usually it is Partials/ underneath the template file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>format</para>
								</entry>
								<entry>
									<para>keyword /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the format of the current request.</para>
								</entry>
								<entry>
									<para>html</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>extbase.pluginName</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets variables for initializing extbase.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>extbase.controllerExtensionName</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the extension name of the controller.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>extbase.controllerName</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the name of the controller.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>extbase.controllerActionName</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Sets the name of the action.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>variables</para>
								</entry>
								<entry>
									<para>Array... of</para>
									<para>cObjects</para>
								</entry>
								<entry>
									<para>Sets variables that should be available in the fluid template. The keys are the variable names in Fluid.</para>
									<para>Reserved variables are "data" and "current", which are filled automatically with the current data set.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).FLUIDTEMPLATE]</para>
				<section>
					<title>Example:</title>
				</section>
				<section>
					<title>The Fluid template (in fileadmin/templates/MyTemplate.html) could look like this:</title>
				</section>
				<section>
					<title>&lt;h1&gt;{data.title}&lt;f:if condition="{data.subtitle}"&gt;, {data.subtitle}&lt;/f:if&gt;&lt;/h1&gt;</title>
				</section>
				<section>
					<title>&lt;h3&gt;{mylabel}&lt;/h3&gt;</title>
				</section>
				<section>
					<title>&lt;f:format.html&gt;{data.bodytext}&lt;/f:format.html&gt;</title>
				</section>
				<section>
					<title>You could use it with a TypoScript code like this:</title>
				</section>
				<section>
					<title>page = PAGE</title>
				</section>
				<section>
					<title>page.10 = FLUIDTEMPLATE</title>
				</section>
				<section>
					<title>page.10 {</title>
				</section>
				<section>
					<title>&#xA0; file = fileadmin/templates/MyTemplate.html</title>
				</section>
				<section>
					<title>&#xA0; partialRootPath = fileadmin/templates/partial/</title>
				</section>
				<section>
					<title>&#xA0; variables {</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; mylabel = TEXT</title>
				</section>
				<section>
					<title>&#xA0; &#xA0; mylabel.value = Label coming from TypoScript!</title>
				</section>
				<section>
					<title>&#xA0; }</title>
				</section>
				<section>
					<title>}</title>
				</section>
				<section>
					<title>As a result the page title and the label from TypoScript will be inserted as headlines.</title>
				</section>
				<section>
					<title/>
				</section>
			</section>
			<section>
				<title>MULTIMEDIA</title>
				<para>This element will insert a multimedia file. Text files will be output directly; for Java, Flash, Audio and Video files an embed tag will be used.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>file</para>
								</entry>
								<entry>
									<para>resource /stdWrap</para>
								</entry>
								<entry>
									<para>The multimedia file. Possible file types are:</para>
									<para>txt, html, htm: Will be inserted directly, of the following properties only ".stdWrap" can be used.</para>
									<para>class: Java-applet.</para>
									<para>swf: Flash animation.</para>
									<para>swa, dcr: ShockWave Animation.</para>
									<para>au, wav, mp3: Sound.</para>
									<para>avi, mov, asf, mpg, wmv: Movies (AVI, QuickTime, MPEG4).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>These are parameters for the multimedia-objects. Use this to enter stuff like autostart, type, width, height and so on. For each file type several parameters make sense. For an incomplete list see below this table.</para>
									<para/>
									<para>Example:</para>
									<para>params (</para>
									<para>&#xA0; type = application/x-shockwave-flash</para>
									<para>&#xA0; width = 200</para>
									<para>&#xA0; height = 300</para>
									<para>)</para>
									<para>This will generate a tag like</para>
									<para>&lt;embed .... type="application/x-shockwave-flash" width="200" height="300"&gt;</para>
									<para/>
									<para>For parameters which are set by default (see tables below) an empty string will remove the parameter from the embed-tag.</para>
									<para>Example:</para>
									<para>params (</para>
									<para>&#xA0; height =</para>
									<para>)</para>
									<para/>
									<para>Note: If you set a width or a height here, this will overwrite the width or the height which have been set using ".width" and ".height".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>width</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Width attribute of the embed tag.</para>
									<para>Not used for txt, html, htm and sound files.</para>
								</entry>
								<entry>
									<para>200</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>height</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Height attribute of the embed tag.</para>
									<para>Not used for txt, html, htm and sound files.</para>
								</entry>
								<entry>
									<para>200</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).MULTIMEDIA]</para>
				<section>
					<title>Meaningful parameters for .params</title>
					<section>
						<title>For the different file types many different parameters can be set. This is an incomplete list of some of those parameters:</title>
					</section>
					<section>
						<title>au, wav, mp3:</title>
						<informaltable frame="all">
							<tgroup cols="3">
								<thead>
									<row>
										<entry>
											<para>Parameter:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>width</para>
										</entry>
										<entry>
											<para>Width of the controls. If not set, the browser defaults to 200.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>height</para>
										</entry>
										<entry>
											<para>Height of the controls. If not set, the browser defaults to 16.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>loop</para>
										</entry>
										<entry>
											<para>Repeat the sound, when playing finished. Set to true or false.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>autostart</para>
										</entry>
										<entry>
											<para>Automatically start the sound. Set to true or false.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
					<section>
						<title>avi, mov, asf, mpg, wmv:</title>
						<informaltable frame="all">
							<tgroup cols="3">
								<thead>
									<row>
										<entry>
											<para>Parameter:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>width</para>
										</entry>
										<entry>
											<para>Width of the movie.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>height</para>
										</entry>
										<entry>
											<para>Height of the movie.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>autostart</para>
										</entry>
										<entry>
											<para>Automatically start the video. Set to true or false.</para>
											<para/>
											<para>Note: Not for "mov", there the parameter is called "autostart". See example below.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
					<section>
						<title>swf, swa, dcr:</title>
						<informaltable frame="all">
							<tgroup cols="3">
								<thead>
									<row>
										<entry>
											<para>Parameter:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>width</para>
										</entry>
										<entry>
											<para>Width of the object. If not set, the browser defaults to approx. 200.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>height</para>
										</entry>
										<entry>
											<para>Height of the object. If not set, the browser defaults to approx. 200.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>quality</para>
										</entry>
										<entry>
											<para>Quality of the video.</para>
										</entry>
										<entry>
											<para>high</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
					<section>
						<title>class:</title>
						<informaltable frame="all">
							<tgroup cols="3">
								<thead>
									<row>
										<entry>
											<para>Parameter:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>width</para>
										</entry>
										<entry>
											<para>Width of the object.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>height</para>
										</entry>
										<entry>
											<para>Height of the object.</para>
										</entry>
										<entry>
											<para>200</para>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para/>
					</section>
					<section>
						<title>Example for QuickTime (mov):</title>
						<programlisting>params (</programlisting>
						<programlisting>&#xA0; width = 256</programlisting>
						<programlisting>&#xA0; height = 208</programlisting>
						<programlisting>&#xA0; autoplay = true</programlisting>
						<programlisting>&#xA0; controller = true</programlisting>
						<programlisting>&#xA0; loop = false</programlisting>
						<programlisting>&#xA0; pluginspage = 
							<ulink url="http://www.apple.com/quicktime/">http://www.apple.com/quicktime/</ulink>
						</programlisting>
						<programlisting>)</programlisting>
					</section>
				</section>
			</section>
			<section>
				<title>SVG</title>
				<para>With this element you can insert a SVG. You can use XML data directly or reference a file. A flash fallback will be used for browsers which do not have native SVG support, so that it also works in e.g. IE 6/7/8.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>width</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Width of the SVG.</para>
								</entry>
								<entry>
									<para>600</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>height</para>
								</entry>
								<entry>
									<para>integer /stdWrap</para>
								</entry>
								<entry>
									<para>Height of the SVG.</para>
								</entry>
								<entry>
									<para>400</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>src</para>
								</entry>
								<entry>
									<para>file resource /stdWrap</para>
								</entry>
								<entry>
									<para>SVG file resource.</para>
									<para/>
									<para>Example:</para>
									<para>src = fileadmin/svg/tiger.svg</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>value</para>
								</entry>
								<entry>
									<para>XML /stdWrap</para>
								</entry>
								<entry>
									<para>Raw XML data for the SVG.</para>
									<para>Will be ignored, if "src" is defined.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noscript</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Output, if SVG output is not possible.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).SVG]</para>
				<section>
					<title>Example:</title>
					<programlisting>10 = SVG</programlisting>
					<programlisting>10 {</programlisting>
					<programlisting>&#xA0; width = 600</programlisting>
					<programlisting>&#xA0; height = 600</programlisting>
					<programlisting>&#xA0; value (</programlisting>
					<programlisting>&#xA0; &#xA0; &lt;rect x="100" y="100" width="500" height="200" fill="white" stroke="black" stroke-width="5px"/&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &lt;line x1="0" y1="200" x2="700" y2="200" stroke="red" stroke-width="20px"/&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &lt;polygon points="185 0 125 25 185 100" transform="rotate(135 125 25)" /&gt;</programlisting>
					<programlisting>&#xA0; &#xA0; &lt;circle cx="190" cy="150" r="40" stroke="black" stroke-width="2" fill="yellow"/&gt;</programlisting>
					<programlisting>&#xA0; )</programlisting>
					<programlisting>&#xA0; noscript.cObject = TEXT</programlisting>
					<programlisting>&#xA0; noscript.cObject.value = No SVG rendering possible, please use a browser.</programlisting>
					<programlisting>}</programlisting>
					<para>This example will show some geometric forms.</para>
				</section>
			</section>
			<section>
				<title>EDITPANEL</title>
				<para>This content object is inserted only if a backend user is logged in, a FE-editing extension is installed and loaded. What gets displayed exactly may depend on which FE-editing extension is used. The reference below is related to the "feedit" system extension. In such a case the EDITPANEL also requires that the Admin Panel be displayed (config.admPanel = 1) and that user has checked the &#xA0;"Display Edit Icons" option. Whenever the edit panel is inserted, page caching is disabled.</para>
				<para>The edit panel inserts icons for moving, editing, deleting, hiding and creating records.</para>
				<para>In conjunction with css_styled_content, an EDITPANEL will appear for each content element on the page. It is also possible to insert EDITPANEL in the template, using TypoScript.</para>
				<section>
					<title>Example</title>
					<programlisting>page = PAGE</programlisting>
					<programlisting>page.10 = EDITPANEL</programlisting>
					<programlisting>page.10 {</programlisting>
					<programlisting>...</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<para>In such a case, there's nothing to edit in the FE, but the panel can be used to create new records, for example.</para>
					<para>
						<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}1000020100000020000000200F1A6686.png" width=""/>Note
					</para>
					<para>The extension "feedit" needs to be installed for this to work.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>label</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Title for the panel. You can insert the record title with %s</para>
										<para/>
										<para>Example:</para>
										<para>label = Section &lt;b&gt;%s&lt;/b&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>allow</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Define which functions are accessible. Further this list may be reduced, if the BE_USER does not have permission to perform the action</para>
										<para>Values should be listed separated by comma. This is the options you can choose between:</para>
										<para>toolbar,edit,new,delete,move,hide </para>
										<para>(toolbar is a general list of icons regarding the page, so use this for page records only)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>newRecordFromTable</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Will display a panel for creation of new element (in the top of list) on the page from that table.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>newRecordInPid</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Define a page ID where new records (except new pages) will be created.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>line</para>
									</entry>
									<entry>
										<para>boolean / int</para>
									</entry>
									<entry>
										<para>If set, a black line will appear after the panel. This value will indicate the distance from the black line to the panel</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>edit.displayRecord</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, then the record edited is displayed above the editing form.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>onlyCurrentPid</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, only records with a pid matching the current id (TSFE-&gt;id) will be shown with the panel.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>innerWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the edit panel</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>outerWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the whole edit panel including the black line (if configured)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>printBeforeContent</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Normally the edit panel is displayed below the content element it belongs to. If this option is set, the panel is printed in front of the according element.</para>
										<para/>
										<para>Example:</para>
										<para>tt_content.stdWrap.editPanel.printBeforeContent = 1</para>
										<para/>
										<para>This displays the edit panels in front of the according elements, if you use css_styled_content.</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>previewBorder</para>
									</entry>
									<entry>
										<para>boolean / int</para>
									</entry>
									<entry>
										<para>If set, the hidden/starttime/endtime/fe_user elements which are previewed will have a border around.</para>
										<para>The integer value denotes the thickness of the border</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>previewBorder.innerWrap</para>
										<para>previewBorder.outerWrap</para>
										<para>previewBorder.color</para>
									</entry>
									<entry>
										<para>wrap / HTML color</para>
									</entry>
									<entry>
										<para>innerWrap wraps the content elements (including the icons) inside the preview border (an HTML table). </para>
										<para/>
										<para>outerWrap wraps the whole content element including the border. </para>
										<para/>
										<para>color denotes the color of the border.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).EDITPANEL]</para>
					<para/>
				</section>
			</section>
		</section>
		<section>
			<title>GIFBUILDER</title>
			<section>
				<title>GIFBUILDER</title>
				<para>GIFBUILDER is an object, which is used in many situations for creating gif-files. Anywhere the -&gt;GIFBUILDER object is mentioned, these are the properties that apply.</para>
				<para>Using TypoScript you can define a "numerical array" of "GIFBUILDER OBJECTS" (like "TEXT", "IMAGE", etc.) and they will be rendered onto an image one by one.</para>
				<para>The name "GIFBUILDER" comes from the time where GIF was the only file format supported. PNG and JPG are just as well to create today (configured with $TYPO3_CONF_VARS['GFX']).</para>
				<section>
					<title>NOTE (+calc)</title>
					<para>Whenever the "+calc"-function is added to a value in the data type of the properties underneath, you can use the dimensions of TEXT and IMAGE-objects from the GifBuilderObj-array. This is done by inserting a tag like this: "[10.w]" or "[10.h]", where "10" is the GifBuilderObj-number in the array and "w"/"h" signifies either width or height of the object.</para>
					<para>The special property "lineHeight" (e.g. "[10.lineHeight]") uses the height a single line of text would take.</para>
					<para>On using the special function max(), the maximum of multiple values can be determined. Example:</para>
					<programlisting>XY: [10.w]+[20.w], max([10.h], [20.h])</programlisting>
					<programlisting/>
					<para>Here's a full example (taken from "styles.content (default)"):</para>
					<programlisting>styles.header.gfx1 = IMAGE</programlisting>
					<programlisting>styles.header.gfx1 {</programlisting>
					<programlisting>&#xA0; wrap = {$styles.header.gfx1.wrap}</programlisting>
					<programlisting>&#xA0; file = GIFBUILDER</programlisting>
					<programlisting>&#xA0; file {</programlisting>
					<programlisting>&#xA0; &#xA0; XY = [10.w]+10 ,{$styles.header.gfx1.itemH}</programlisting>
					<programlisting>&#xA0; &#xA0; backColor = {$styles.header.gfx1.bgCol}</programlisting>
					<programlisting>&#xA0; &#xA0; reduceColors = {$styles.header.gfx1.reduceColors}</programlisting>
					<programlisting>&#xA0; &#xA0; 10 = TEXT</programlisting>
					<programlisting>&#xA0; &#xA0; 10 {</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; text.current = 1</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; text.crop = {$styles.header.gfx1.maxChars}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontSize = {$styles.header.gfx1.fontSize}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontFile = {$styles.header.gfx1.file.fontFile}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; fontColor = {$styles.header.gfx1.fontColor}</programlisting>
					<programlisting>&#xA0; &#xA0; &#xA0; offset = {$styles.header.gfx1.fontOffset}</programlisting>
					<programlisting>&#xA0; &#xA0; }</programlisting>
					<programlisting>&#xA0; }</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<para>As you see, the gif-image has a width defined as the width of the text printed onto it + 10 pixels. The height is fixed by the value of the constant {$styles.header.gfx1.itemH}</para>
				</section>
				<section>
					<title>The "_GIFBUILDER" Top Level Object</title>
					<para>You can configure some global settings for GIFBUILDER by a top level object named "_GIFBUILDER". One of the available properties of the global GIFBUILDER configuration is "charRangeMap".</para>
					<para>.charRangeMap</para>
					<para>By this property you can globally configure mapping of font files for certain character ranges. For instance you might need GIFBUILDER to produce gif files with a certain font for latin characters while you need to use another true type font for Japanese glyphs. So what you need is to specify the usage of another font file when characters fall into another range of Unicode values.</para>
					<para>In the GIFBUILDER object this is possible with the "splitRendering" option but if you have hundreds of GIFBUILDER objects around your site it is not very efficient to add 5-10 lines of configuration for each time you render text. Therefore this global setting allows you to match the basename of the main font face with an alternative font.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>[array] </para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Basename of font file to match for this configuration. Notice that only the filename of the font file is used - the path is stripped off. This is done to make matching easier and avoid problems when font files might move to other locations in extensions etc.</para>
										<para/>
										<para>So if you use the font file "EXT:myext/fonts/arial.ttf" or "t3lib/fonts/arial.ttf" both of them will match with this configuration.</para>
										<para/>
										<para>The key:</para>
										<para>The value of the array key will be the key used when forcing the configuration into "splitRendering" configuration of the individual GIFBUILDER objects. In the example below the key is "123". </para>
										<para>Notice; If the key is already found in the local GIFBUILDER configuration the content of that key is respected and not overridden. Thus you can make local configurations which override the global setting.</para>
										<para/>
										<para>Example:</para>
										<para>_GIFBUILDER.charRangeMap {</para>
										<para>&#xA0; 123 = arial.ttf</para>
										<para>....</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[array].charMapConfig</para>
									</entry>
									<entry>
										<para>TEXT / splitRendering.[array] configuration</para>
									</entry>
									<entry>
										<para>splitRendering configuration to set. See GIFBUILDER TEXT object for details.</para>
										<para/>
										<para>Example:</para>
										<para/>
										<para>_GIFBUILDER.charRangeMap {</para>
										<para>&#xA0; 123 = arial.ttf</para>
										<para>&#xA0; 123 {</para>
										<para>&#xA0; &#xA0; charMapConfig {</para>
										<para>&#xA0; &#xA0; &#xA0; fontFile = t3lib/fonts/vera.ttf</para>
										<para>&#xA0; &#xA0; &#xA0; value = -65</para>
										<para>&#xA0; &#xA0; &#xA0; fontSize = 45</para>
										<para>&#xA0; &#xA0; }</para>
										<para>&#xA0; &#xA0; fontSizeMultiplicator = 2.3</para>
										<para>&#xA0; }</para>
										<para>}</para>
										<para/>
										<para>This example configuration shows that GIFBUILDER TEXT objects with font faces matching "arial.ttf" will have a splitConfiguration that uses "t3lib/fonts/vera.ttf" for all characters that fall below/equal to 65 in Unicode value.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[array].fontSizeMultiplicator</para>
									</entry>
									<entry>
										<para>double</para>
									</entry>
									<entry>
										<para>If set, this will take the font size of the TEXT GIFBUILDER object and multiply with this amount (xx.xx) and override the "fontSize" property inside "charMapConfig".</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[array].pixelSpaceFontSizeRef</para>
									</entry>
									<entry>
										<para>double</para>
									</entry>
									<entry>
										<para>If set, this will multiply the four [x/y]Space[Before/After] properties of split rendering with the relationship between the fontsize and this value. </para>
										<para>In other words; Since pixel space may vary depending on the font size used you can simply specify by this value at what fontsize the pixel space settings are optimized and for other fontsizes this will automatically be adjusted according to this font size.</para>
										<para/>
										<para>Example:</para>
										<para>_GIFBUILDER.charRangeMap {</para>
										<para>&#xA0; 123 = arial.ttf</para>
										<para>&#xA0; 123 {</para>
										<para>&#xA0; &#xA0; charMapConfig {</para>
										<para>&#xA0; &#xA0; &#xA0; fontFile = t3lib/fonts/vera.ttf</para>
										<para>&#xA0; &#xA0; &#xA0; value = 48-57</para>
										<para>&#xA0; &#xA0; &#xA0; color = green</para>
										<para>&#xA0; &#xA0; &#xA0; xSpaceBefore = 3</para>
										<para>&#xA0; &#xA0; &#xA0; xSpaceAfter = 3</para>
										<para>&#xA0; &#xA0; }</para>
										<para>&#xA0; &#xA0; pixelSpaceFontSizeRef = 24</para>
										<para>&#xA0; }</para>
										<para>}</para>
										<para/>
										<para>In this example xSpaceBefore and xSpaceAfter will be "3" when the font size is 24. If this configuration is used on a GIFBUILDER TEXT object where the font size is only 16, the spacing values will be corrected by "16/24", effectively reducing the pixelspace to "2" in that case.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:_GIFBUILDER.charRangeMap]</para>
				</section>
			</section>
			<section>
				<title>Object names in this section</title>
				<para>Whenever you see a reference to anything named an "object" in this section it's a reference to a "GifBuilderObj" and not the "cObjects" from the previous section. Confusion could happen, because both "IMAGE" and "TEXT" is an object in both areas.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>GifBuilderObj</para>
									<para>+ .if (-&gt;if)</para>
								</entry>
								<entry>
									<para>.if (-&gt;if) &#xA0;is a property of all gifbuilder-objects. If the property is present and NOT set, the object is NOT rendered! This corresponds to the functionality of ".if" of the stdWrap-function.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>XY</para>
								</entry>
								<entry>
									<para>x,y +calc /stdWrap</para>
								</entry>
								<entry>
									<para>Size of the gif-file. </para>
									<para>For the usage of "calc" see the according note on that at the beginning of the section "GIFBUILDER".</para>
								</entry>
								<entry>
									<para>100,20</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>format</para>
								</entry>
								<entry>
									<para>"gif" / "jpg"</para>
								</entry>
								<entry>
									<para>Output type. </para>
									<para>"jpg"/"jpeg" = jpg-image</para>
								</entry>
								<entry>
									<para>gif</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>reduceColors</para>
								</entry>
								<entry>
									<para>posint (1-255) /stdWrap</para>
								</entry>
								<entry>
									<para>Reduce the number of colors (if gif-file)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>transparentBackground</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>Set this flag to render the background transparent. TYPO3 makes the color found at position 0,0 of the image (upper left corner) transparent.</para>
									<para>If you render text, you should leave the niceText option OFF as the result will probably be more precise without the niceText antialiasing hack.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>transparentColor</para>
								</entry>
								<entry>
									<para>HTMLColor /stdWrap</para>
								</entry>
								<entry>
									<para>Specify a color that should be transparent</para>
									<para/>
									<para>Example-values:</para>
									<para>#ffffcc </para>
									<para>red </para>
									<para>255,255,127</para>
									<para/>
									<para>Option:</para>
									<para>transparentColor.closest = 1</para>
									<para>This will allow for the closest color to be matched instead. You may need this if you image is not guaranteed "clean".</para>
									<para/>
									<para>NOTE: You may experience that this doesn't work if you use the reduceColors-option or render text with niceText-option.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>quality</para>
								</entry>
								<entry>
									<para>posint (10-100)</para>
								</entry>
								<entry>
									<para>JPG-quality (if ".format" = jpg/jpeg)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>backColor</para>
								</entry>
								<entry>
									<para>GraphicColor </para>
									<para>/stdWrap</para>
								</entry>
								<entry>
									<para>Background color for the gif.</para>
								</entry>
								<entry>
									<para>white</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>offset</para>
								</entry>
								<entry>
									<para>x,y +calc /stdWrap</para>
								</entry>
								<entry>
									<para>Offset all objects on the gif.</para>
								</entry>
								<entry>
									<para>0,0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>workArea</para>
								</entry>
								<entry>
									<para>x,y,w,h + calc /stdWrap</para>
								</entry>
								<entry>
									<para>Define the workarea on the giffile. All the GifBuilderObj's will see this as the dimensions of the gif-file regarding alignment, overlaying of images an so on. Only TEXT-objects exceeding the boundaries of the workarea will be printed outside this area.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxWidth</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Maximal width of the gif-file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxHeight</para>
								</entry>
								<entry>
									<para>pixels /stdWrap</para>
								</entry>
								<entry>
									<para>Maximal height of the gif-file.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:-&gt;GIFBUILDER]</para>
				<section>
					<title>TEXT</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>text</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>This is text text-string on the gif-file. The item is rendered only if this string is not empty.</para>
										<para>The cObj-&gt;data-array is loaded with the page-record, if for example the GIFBUILDER-object is used by GMENU or IMGMENU.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>breakWidth</para>
									</entry>
									<entry>
										<para>integer /stdWrap</para>
									</entry>
									<entry>
										<para>Defines the maximum width for an object, overlapping elements will force an automatic line break.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>breakSpace</para>
									</entry>
									<entry>
										<para>float</para>
									</entry>
									<entry>
										<para>Defines a value that is multiplied by the line height of the current element.</para>
									</entry>
									<entry>
										<para>1.0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>textMaxLength</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>The maximum length of the text. This is just a natural break that prevents incidental rendering of very long texts!</para>
									</entry>
									<entry>
										<para>100</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>maxWidth</para>
									</entry>
									<entry>
										<para>pixels /stdWrap</para>
									</entry>
									<entry>
										<para>Sets the maximum width in pixels, the text must be. Reduces the fontSize if the text does not fit within this width.</para>
										<para/>
										<para>Does not support setting alternative fontSizes in splitRendering options.</para>
										<para/>
										<para>(By Ren&#xE9; Fritz &lt;r.fritz@colorcube.de&gt;)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>doNotStripHTML</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, HTML-tags in the string inserted are NOT removed. Any other way HTML-code is removed by default!</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fontSize</para>
									</entry>
									<entry>
										<para>posint</para>
									</entry>
									<entry>
										<para>Font size</para>
									</entry>
									<entry>
										<para>12</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fontColor</para>
									</entry>
									<entry>
										<para>GraphicColor /stdWrap</para>
									</entry>
									<entry>
										<para>Font color</para>
									</entry>
									<entry>
										<para>black</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fontFile</para>
									</entry>
									<entry>
										<para>resource</para>
									</entry>
									<entry>
										<para>Font face (truetype font you can upload!)</para>
									</entry>
									<entry>
										<para>Nimbus (Arial-clone)</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>angle</para>
									</entry>
									<entry>
										<para>degree</para>
									</entry>
									<entry>
										<para>Rotation degrees of the text. </para>
										<para/>
										<para>Note: Angle is not available if spacing/wordSpacing is set.</para>
									</entry>
									<entry>
										<para>0</para>
										<para>Range: -90 til 90</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>align</para>
									</entry>
									<entry>
										<para>align</para>
									</entry>
									<entry>
										<para>Alignment of the text</para>
									</entry>
									<entry>
										<para>left</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>offset</para>
									</entry>
									<entry>
										<para>x,y +calc /stdWrap</para>
									</entry>
									<entry>
										<para>Offset of the text</para>
									</entry>
									<entry>
										<para>0,0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>antiAlias</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>FreeType antialiasing. Notice, the default mode is "on"!</para>
										<para/>
										<para>Note: This option is not available if .niceText is enabled.</para>
									</entry>
									<entry>
										<para>1</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>iterations</para>
									</entry>
									<entry>
										<para>posint</para>
									</entry>
									<entry>
										<para>How many times the text should be "printed" onto it self. This will add the effect of bold text.</para>
										<para/>
										<para>Note: This option is not available if .niceText is enabled.</para>
									</entry>
									<entry>
										<para>1</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>spacing</para>
									</entry>
									<entry>
										<para>posint</para>
									</entry>
									<entry>
										<para>Pixel-distance between letters. This may render ugly!</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>wordSpacing</para>
									</entry>
									<entry>
										<para>posint</para>
									</entry>
									<entry>
										<para>Pixel-distance between words.</para>
									</entry>
									<entry>
										<para>= ".spacing"*2</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>hide</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If this is true, the text is NOT printed. </para>
										<para>This feature may be used if you need a shadow-object to base a shadow on the text, but do not want the text to print.</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>hideButCreateMap</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If this option is set, the text will not be rendered. Shadows and emboss will, though, so don't apply these!! But this feature is also meant only to enable a text to generate the imageMap coordinates without rendering itself.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>emboss</para>
									</entry>
									<entry>
										<para>GifBuilderObj-&gt;EMBOSS</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>shadow</para>
									</entry>
									<entry>
										<para>GifBuilderObj-&gt;SHADOW</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>outline</para>
									</entry>
									<entry>
										<para>GifBuilderObj-&gt;OUTLINE</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>imgMap</para>
									</entry>
									<entry>
										<para>-&gt;IMGMAP</para>
										<para/>
										<para>-&gt;stdWrap properties for "altText" and "titleText" in this case</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>niceText</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>This is a very popular feature that helps to render small letters much nicer than the freetype library can normally do. But it also loads the system very much!</para>
										<para>The principle of this function is to create a black/white giffile in twice or more times the size of the actual gif-file and then print the text onto this in a scaled dimension. Afterwards ImageMagick (IM) scales down the mask and masks the font color down on the original gif-file through the temporary mask. </para>
										<para>The fact that the font &#xA0;is &#xA0;actually rendered in the double size and scaled down adds a more homogenous shape to the letters. Some fonts are more critical than others though. If you do not need the quality, then don't use the function.</para>
										<para/>
										<para>Some properties:</para>
										<para>.before = IM-params before scale</para>
										<para>.after = IM-params after scale</para>
										<para>.sharpen = sharpen-value for the mask (after scaling), integer 0-99 (this enables you to make the text crisper if it's too blurred!)</para>
										<para>.scaleFactor = scaling-factor, int 2-5</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>splitRendering.compX</para>
										<para>splitRendering.compY</para>
										<para>splitRendering.[array]</para>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>Split the rendering of a string into separate processes with individual configurations. By this method a certain range of characters can be rendered with another font face or size. This is very useful if you want to use separate fonts for strings where you have latin characters combined with e.g. Japanese and there is a separate font file for each.</para>
										<para>You can also render keywords in another font/size/color.</para>
										<para/>
										<para>Properties:</para>
										<para>splitRendering.compX = Additional pixelspace between parts, x direction</para>
										<para>splitRendering.compY = Additional pixelspace between parts, y direction</para>
										<para>splitRendering.[array] = keyword &#xA0;[charRange, highlightWord]</para>
										<para>splitRendering.[array] {</para>
										<para>&#xA0; fontFile = Alternative font file for this rendering</para>
										<para>&#xA0; fontSize = Alternative font size for this rendering</para>
										<para>&#xA0; color = Alternative color for this rendering, works ONLY without "niceText"</para>
										<para>&#xA0; xSpaceBefore = x-Space before this part</para>
										<para>&#xA0; xSpaceAfter = x-Space after this part</para>
										<para>&#xA0; ySpaceBefore = y-Space before this part</para>
										<para>&#xA0; ySpaceAfter = &#xA0;y-Space after this part</para>
										<para>}</para>
										<para/>
										<para>Keyword: charRange</para>
										<para>splitRendering.[array].value = Commaseparated list of character ranges (eg. "100-200") given as Unicode character numbers. The list accepts optional starting and ending points, eg. " - 200" or " 200 -" and single values, eg. "65, 66, 67"</para>
										<para/>
										<para>Keyword: highlightWord</para>
										<para>splitRendering.[array].value = Word to highlight, makes a case sensitive search for this.</para>
										<para/>
										<para>Limitations:</para>
										<orderedlist>
											<listitem>
												<para>The pixelcompensation values are not corrected for scale factor used with niceText. Basically this means that when niceText is used, these values will have only the half effect.</para>
											</listitem>
											<listitem>
												<para>When word spacing is used the "highlightWord" mode doesn't work.</para>
											</listitem>
											<listitem>
												<para>The color override works only without "niceText".</para>
											</listitem>
										</orderedlist>
										<para/>
										<para>Example:</para>
										<para>10.splitRendering.compX = 2</para>
										<para>10.splitRendering.compY = -2</para>
										<para>10.splitRendering.10 = charRange</para>
										<para>10.splitRendering.10 {</para>
										<para>&#xA0; value = 200-380 , 65, 66</para>
										<para>&#xA0; fontSize = 50</para>
										<para>&#xA0; fontFile = &#xA0;t3lib/fonts/nimbus.ttf</para>
										<para>&#xA0; xSpaceBefore = 30</para>
										<para>}</para>
										<para>10.splitRendering.20 = highlightWord</para>
										<para>10.splitRendering.20 {</para>
										<para>&#xA0; value = TheWord</para>
										<para>&#xA0; color = red</para>
										<para>}</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).TEXT]</para>
				</section>
				<section>
					<title>SHADOW</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>textObjNum</para>
									</entry>
									<entry>
										<para>pos-int</para>
									</entry>
									<entry>
										<para>Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!</para>
										<para>If - on the other hand - the shadow is a property to a text-object, this property is not needed.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>offset</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>Shadow offset</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>Shadow color</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>blur</para>
									</entry>
									<entry>
										<para>posint (1-99)</para>
									</entry>
									<entry>
										<para>Blurring of the shadow. Above 40 only values of 40,50,60,70,80,90 mean something.</para>
										<para/>
										<para>Note: Unfortunately the blurring capabilities of ImageMagick are not very mature in version 4.2.9. This is addressed in the later version 5.2.0 where a gaussian blur-function is added. BUT as we cannot use the latest ImageMagick development yet, this is not utilized so far.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>opacity</para>
									</entry>
									<entry>
										<para>posint (1-100)</para>
									</entry>
									<entry>
										<para>Opacity (transparency^-1) </para>
										<para>100% opacity = 0% transparency). Only active with a value for blur.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>intensity</para>
									</entry>
									<entry>
										<para>posint(0-100)</para>
									</entry>
									<entry>
										<para>How "massive" the shadow is. This value can - if it has a high value combined with a blurred shadow - create a kind of soft-edged outline.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).SHADOW]</para>
				</section>
				<section>
					<title>EMBOSS</title>
					<para>Emboss is actually two shadows offset in opposite directions and with different colors as to create an effect of light cast onto an embossed text.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>textObjNum</para>
									</entry>
									<entry>
										<para>pos-int</para>
									</entry>
									<entry>
										<para>Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!</para>
										<para>If - on the other hand - the shadow is a property to a text-object, this property is not needed.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>offset</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>Offset of the emboss</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>highColor</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>Upper border-color</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>lowColor</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>lower border-color</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>blur</para>
									</entry>
									<entry>
										<para>posint (1-99)</para>
									</entry>
									<entry>
										<para>Blurring of the shadow. Above 40 only values of 40,50,60,70,80,90 means something.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>opacity</para>
									</entry>
									<entry>
										<para>posint (1-100)</para>
									</entry>
									<entry>
										<para>Opacity (transparency^-1) </para>
										<para>100% opacity = 0% transparency). Only active with a value for blur.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>intensity</para>
									</entry>
									<entry>
										<para>posint(0-100)</para>
									</entry>
									<entry>
										<para>How "massive" the emboss is. This value can - if it has a high value combined with a blurred shadow - create a kind of soft-edged outline.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).EMBOSS]</para>
					<para/>
				</section>
				<section>
					<title>OUTLINE</title>
					<para>This outline normally renders quite ugly as it's done by printing 4 or 8 texts underneath the text in question. Try to use a shadow with a high intensity. That works better!</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>textObjNum</para>
									</entry>
									<entry>
										<para>pos-int</para>
									</entry>
									<entry>
										<para>Must point to the TEXT-object if these shadow-properties are not properties to a TEXT-object directly ("stand-alone-shadow"). Then the shadow needs to know which TEXT-object it should be a shadow of!</para>
										<para>If - on the other hand - the shadow is a property to a text-object, this property is not needed.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>thickness</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>Thickness in each direction, range 1-2</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>Outline color</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).OUTLINE]</para>
				</section>
				<section>
					<title>BOX</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>dimensions</para>
									</entry>
									<entry>
										<para>x,y,w,h +calc /stdWrap</para>
									</entry>
									<entry>
										<para>Dimensions of a filled box. </para>
										<para>x,y &#xA0; &#xA0;is the offset. </para>
										<para>w,h &#xA0; &#xA0;are the dimensions. Dimensions of 1 will result in 1-pixel wide lines!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>fill-color</para>
									</entry>
									<entry>
										<para>black</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>opacity</para>
									</entry>
									<entry>
										<para>pos-int (1-100)</para>
									</entry>
									<entry>
										<para>Opacity (i.e. inverse of transparency, e.g. 100% opacity = 0% transparency)</para>
									</entry>
									<entry>
										<para>100</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>align</para>
									</entry>
									<entry>
										<para>VHalign</para>
									</entry>
									<entry>
										<para>Pair of values, which defines the horizontal and vertical alignment.</para>
										<para/>
										<para>Values:</para>
										<para>Horizontal alignment: r/c/l standing for right, center, left</para>
										<para>Vertical alignment: t/c/b standing for top, center, bottom</para>
										<para/>
										<para>Example:</para>
										<para>Horizontally centered, vertically at the bottom:</para>
										<para>align = c, b</para>
									</entry>
									<entry>
										<para>l, t</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).BOX]</para>
				</section>
				<section>
					<title>ELLIPSE</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>dimensions</para>
									</entry>
									<entry>
										<para>x,y,w,h +calc /stdWrap</para>
									</entry>
									<entry>
										<para>Dimensions of a filled ellipse. </para>
										<para>x,y &#xA0; &#xA0;is the offset. </para>
										<para>w,h &#xA0; &#xA0;are the dimensions. Dimensions of 1 will result in 1-pixel wide lines!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>fill-color</para>
										<para/>
										<para>Example:</para>
										<para>file = GIFBUILDER</para>
										<para>file {</para>
										<para>&#xA0; XY = 200,200</para>
										<para>&#xA0; format = jpg</para>
										<para>&#xA0; quality = 100</para>
										<para>&#xA0; 10 = ELLIPSE</para>
										<para>&#xA0; 10.dimensions = 100,100,50,50</para>
										<para>&#xA0; 10.color = red</para>
										<para>}</para>
									</entry>
									<entry>
										<para>black</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
				</section>
				<section>
					<title>[tsref:-&gt;GIFBUILDER.(GBObj).ELLIPSE]</title>
					<para/>
				</section>
				<section>
					<title>IMAGE</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>file</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>The imagefile</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>offset</para>
									</entry>
									<entry>
										<para>x,y +calc /stdWrap</para>
									</entry>
									<entry>
										<para>Offset of the image</para>
									</entry>
									<entry>
										<para>0,0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>tile</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>tile x,y times. </para>
										<para>Maximum times is 20 each direction. If you need more, use a larger image.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>align</para>
									</entry>
									<entry>
										<para>VHalign</para>
									</entry>
									<entry>
										<para>See in the "Data types reference" at the beginning of this document or in the table "BOX".</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>mask</para>
									</entry>
									<entry>
										<para>imgResource</para>
									</entry>
									<entry>
										<para>Optional mask-image for the imagefile.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).IMAGE]</para>
				</section>
				<section>
					<title>EFFECT</title>
					<section>
						<title>Syntax:</title>
						<programlisting>.value = [Property] = [value] | [Property] = [value]</programlisting>
					</section>
					<section>
						<title>Example:</title>
						<programlisting>lib.image = IMAGE</programlisting>
						<programlisting>lib.image {</programlisting>
						<programlisting>&#xA0; file = GIFBUILDER</programlisting>
						<programlisting>&#xA0; file {</programlisting>
						<programlisting>&#xA0; &#xA0; XY = 1024,768</programlisting>
						<programlisting>&#xA0; &#xA0; format = jpg</programlisting>
						<programlisting>&#xA0; &#xA0; 10 = IMAGE</programlisting>
						<programlisting>&#xA0; &#xA0; 10.file = fileadmin/image.jpg</programlisting>
						<programlisting/>
						<para>&#xA0; &#xA0; 20 = EFFECT</para>
						<para>&#xA0; &#xA0; 20.value = gamma=1.3 | flip | rotate=180</para>
						<programlisting>&#xA0; }</programlisting>
						<para>}</para>
						<para/>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>gamma</para>
										</entry>
										<entry>
											<para>0.5 - 3.0</para>
										</entry>
										<entry>
											<para>Sets the gamma value.</para>
										</entry>
										<entry>
											<para>1.0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>blur</para>
										</entry>
										<entry>
											<para>1-99</para>
										</entry>
										<entry>
											<para>Blurs the edges inside the image.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>sharpen</para>
										</entry>
										<entry>
											<para>1-99</para>
										</entry>
										<entry>
											<para>Sharpens the edges inside the image.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>solarize</para>
										</entry>
										<entry>
											<para>0-99</para>
										</entry>
										<entry>
											<para>Color reduction.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>swirl</para>
										</entry>
										<entry>
											<para>0-100</para>
										</entry>
										<entry>
											<para>The image is swirled or spun from its center.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>wave</para>
										</entry>
										<entry>
											<para>amplitude, length</para>
										</entry>
										<entry>
											<para>All horizontal edges are transformed by a wave with the given amplitude and length.</para>
											<para>Maximum value for amplitude and length is 100.</para>
											<para/>
											<para>Example:</para>
											<para>20 = EFFECT</para>
											<para>20.value = wave=1,20</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>charcoal</para>
										</entry>
										<entry>
											<para>0-100</para>
										</entry>
										<entry>
											<para>Makes the image look as if it had been drawn with charcoal and defines the intensity of that effect.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>gray</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>The image is converted to gray tones.</para>
											<para/>
											<para>Example:</para>
											<para>This gives the image a slight wave and renders it in gray.</para>
											<para>20 = EFFECT</para>
											<para>20.value = wave=1,20 | gray</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>edge</para>
										</entry>
										<entry>
											<para>0-99</para>
										</entry>
										<entry>
											<para>Creates rounded edges.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>emboss</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>Creates a relief effect: Creates highlights or shadows that replace light and dark boundaries in the image.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>flip</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>Vertical flipping.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>flop</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>Horizontal flipping.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>rotate</para>
										</entry>
										<entry>
											<para>0-360</para>
										</entry>
										<entry>
											<para>Number of degrees for a clockwise rotation.</para>
											<para>Image dimensions will grow if needed, so that nothing is cut off from the original image.</para>
										</entry>
										<entry>
											<para>0</para>
										</entry>
									</row>
									<row>
										<entry>
											<para>colors</para>
										</entry>
										<entry>
											<para>2-255</para>
										</entry>
										<entry>
											<para>Defines the number of different colors to use in the image.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>shear</para>
										</entry>
										<entry>
											<para>-90 - 90</para>
										</entry>
										<entry>
											<para>Horizontal shearing.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>invert</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>Invert the colors.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:-&gt;GIFBUILDER.(GBObj).EFFECT]</para>
					</section>
				</section>
				<section>
					<title>WORKAREA</title>
					<para>Sets another workarea.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>set</para>
									</entry>
									<entry>
										<para>x,y,w,h + calc /stdWrap</para>
									</entry>
									<entry>
										<para>Sets the dimensions of the workarea. </para>
										<para>x,y is the offset. </para>
										<para>w,h are the dimensions. </para>
										<para>For the usage of "calc" see the according note at the beginning of the section "GIFBUILDER". </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>clear</para>
									</entry>
									<entry>
										<para>(isset)</para>
									</entry>
									<entry>
										<para>Sets the current to the default.</para>
										<para>Checked for using isset().</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).WORKAREA]</para>
				</section>
				<section>
					<title>CROP</title>
					<para>Note: This object resets workArea to the new dimensions of the image!</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>backColor</para>
									</entry>
									<entry>
										<para>GraphicColor</para>
									</entry>
									<entry>
										<para>See "Data types reference".</para>
									</entry>
									<entry>
										<para>The original backColor</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>align</para>
									</entry>
									<entry>
										<para>VHalign</para>
									</entry>
									<entry>
										<para>Horizontal and vertical alignment of the crop frame.</para>
										<para>See "Data types reference".</para>
									</entry>
									<entry>
										<para>l, t</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>crop</para>
									</entry>
									<entry>
										<para>x,y,w,h + calc /stdWrap</para>
									</entry>
									<entry>
										<para>x,y is the offset of the crop-frame from the position specified by "align".</para>
										<para>w,h are the dimensions of the frame.</para>
										<para>For the usage of "calc" see the according note at the beginning of the section "GIFBUILDER".</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).CROP]</para>
				</section>
				<section>
					<title>SCALE</title>
					<para>Note: This object resets workArea to the new dimensions of the image!</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>width</para>
									</entry>
									<entry>
										<para>pixels + calc /stdWrap</para>
									</entry>
									<entry>
										<para>Width of the scaled image.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>height</para>
									</entry>
									<entry>
										<para>pixels + calc /stdWrap</para>
									</entry>
									<entry>
										<para>Height of the scaled image.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>params</para>
									</entry>
									<entry>
										<para>ImageMagickParams</para>
									</entry>
									<entry>
										<para>Parameters to be used for the processing.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;GIFBUILDER.(GBObj).SCALE]</para>
				</section>
				<section>
					<title>ADJUST</title>
					<para>This lets you adjust the tonal range like in the "levels"-dialog of Photoshop. You can set the input- and output-levels and that way remap the tonal range of the image. If you need to adjust the gamma value, have a look at the EFFECT-object.</para>
					<section>
						<title>Example:</title>
						<programlisting>20 = ADJUST</programlisting>
						<programlisting>20.value = inputLevels = 13, 230</programlisting>
						<para/>
						<informaltable frame="all">
							<tgroup cols="4">
								<thead>
									<row>
										<entry>
											<para>Property:</para>
										</entry>
										<entry>
											<para>Data type:</para>
										</entry>
										<entry>
											<para>Description:</para>
										</entry>
										<entry>
											<para>Default:</para>
										</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<para>inputLevels</para>
										</entry>
										<entry>
											<para>low, high</para>
										</entry>
										<entry>
											<para>With this option you can remap the tone of the image to make shadows darker, highlights lighter and increase contrast.</para>
											<para>Possible values for "low" and "high" are integers between 0 and 255, where "high" must be higher than "low".</para>
											<para>The value "low" will then be remapped to a tone of 0, the value "high" will be remapped to 255.</para>
											<para/>
											<para>Example:</para>
											<para>This example will cause the tonal range of the resulting image to begin at 50 of the original (which is set as 0 for the new image) and to end at 190 of the original (which is set as 255 for the new image).</para>
											<para>20 = ADJUST</para>
											<para>20.value = inputLevels = 50, 190</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>outputLevels</para>
										</entry>
										<entry>
											<para>low, high</para>
										</entry>
										<entry>
											<para>With this option you can remap the tone of the image to make shadows lighter, highlights darker and decrease contrast.</para>
											<para>Possible values for "low" and "high" are integers between 0 and 255, where "high" must be higher than "low".</para>
											<para>The beginning of the tonal range, which is 0, will then be remapped to the value "low", the end, which is 255, will be remapped to the value "high".</para>
											<para/>
											<para>Example:</para>
											<para>This example will cause the resulting image to have a tonal range, where there is no pixel with a tone below 50 and no pixel with a tone above 190 in the image.</para>
											<para>20 = ADJUST</para>
											<para>20.value = outputLevels = 50, 190</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
									<row>
										<entry>
											<para>autoLevels</para>
										</entry>
										<entry>
											<para>-</para>
										</entry>
										<entry>
											<para>Sets the levels automatically.</para>
										</entry>
										<entry>
											<para/>
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
						<para>[tsref:-&gt;GIFBUILDER.(GBObj).ADJUST]</para>
					</section>
				</section>
			</section>
			<section>
				<title>NON-GifBuilderObj</title>
				<section>
					<title>IMGMAP</title>
					<para>This is used by the GifBuilderObj "TEXT" to create an image-map for the gif-file. This is especially used with the IMGMENU menuobject.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>url</para>
									</entry>
									<entry>
										<para>url</para>
									</entry>
									<entry>
										<para>url to link</para>
									</entry>
									<entry>
										<para>For IMGMENU menu objects provided automatically</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>target</para>
									</entry>
									<entry>
										<para>target</para>
									</entry>
									<entry>
										<para>target for link</para>
									</entry>
									<entry>
										<para>For IMGMENU menu objects provided automatically</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>noBlur</para>
									</entry>
									<entry>
										<para>Boolean</para>
									</entry>
									<entry>
										<para>Normally graphical links are "blurred" if the browser is MSIE. This removes the ugly box around a link. </para>
										<para>If this property is set, the link is NOT blurred with "onFocus".</para>
									</entry>
									<entry>
										<para>For IMGMENU menu objects provided automatically</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>explode</para>
									</entry>
									<entry>
										<para>x,y</para>
									</entry>
									<entry>
										<para>This "explodes" or "implodes" the image-map. Useful to let the hot area cover a little more than just the letters of the text.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>altText</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Value of the alt-attribute.</para>
										<para>(Used from TEXT Gifbuilding objects, this has stdWrap properties. Otherwise not)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>titleText</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Value of the title attribute.</para>
										<para>(Used from TEXT Gifbuilding objects, this has stdWrap properties. Otherwise not)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:-&gt;IMGMAP]</para>
				</section>
			</section>
		</section>
		<section>
			<title>MENU Objects</title>
			<section>
				<title>Common properties</title>
				<para>These properties are in common for all menu objects unless otherwise noted! </para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>sectionIndex</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>(see below)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>alternativeSortingField</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Normally the menuitems are sorted by the fields "sorting" in the pages- and tt_content-table. Here you can enter a list of fields that is used in the SQL- "ORDER BY" statement instead.</para>
									<para/>
									<para>Examples (for "pages" table):</para>
									<para>alternativeSortingField = title desc</para>
									<para>(This will render the menu in reversed alphabetical order.)</para>
									<para/>
									<para>LIMITATIONS: </para>
									<para>This property works with normal menus, sectionsIndex menus and special-menus of type "directory".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>minItems</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The minimum items in the menu. If the number of pages does not reach this level, a dummy-page with the title "..." and uid=[currentpage_id] is inserted.</para>
									<para/>
									<para>Takes precedence over HMENU.minItems.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>maxItems</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The maximum items in the menu. More items will be ignored.</para>
									<para/>
									<para>Takes precedence over HMENU.maxItems.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>begin</para>
								</entry>
								<entry>
									<para>int +calc</para>
								</entry>
								<entry>
									<para>The first item in the menu. </para>
									<para/>
									<para>Example:</para>
									<para>This results in a menu, where the first two items are skipped starting with item number 3:</para>
									<para>begin = 3</para>
									<para/>
									<para>Takes precedence over HMENU.begin.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>JSWindow</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the links of the menu-items will open by JavaScript in a pop-up window. </para>
									<para/>
									<para>.newWindow boolean, that lets every menuitem open in its own window opposite to opening in the same window for each click.</para>
									<para/>
									<para>.params is the list of parameters sent to the JavaScript open-window function, e.g.: </para>
									<para>width=200,height=300,status=0,menubar=0</para>
									<para/>
									<para>Note: Does not work with JSMENU's.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgNamePrefix</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>prefix for the imagenames. This prefix is appended with the uid of the page.</para>
								</entry>
								<entry>
									<para>"img"</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgNameNotRandom</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the image names of menuitems is not randomly assigned. Useful switch if you're manipulating these images with some external JavaScript.</para>
									<para/>
									<para>Note: Don't set this if you're working with a menu with sectionIndex! In that case you need special unique names of items based on something else than the uid of the parent page of course!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>debugItemConf</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para>Outputs (by the debug()-function) the configuration arrays for each menuitem. Useful to debug optionSplit things and such...</para>
									<para>Applies to GMENU, TMENU and IMGMENU.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>overrideId</para>
								</entry>
								<entry>
									<para>integer (page-id)</para>
								</entry>
								<entry>
									<para>If set, then all links in the menu will point to this pageid. Instead the real uid of the page is sent by the parameter "&amp;real_uid=[uid]".</para>
									<para>This feature is smart, if you have inserted a menu from somewhere else, perhaps a shared menu, but wants the menuitems to call the same page, which then generates a proper output based on the real_uid.</para>
									<para>Applies to GMENU, TMENU and IMGMENU.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>addParams</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Additional parameter for the menu-links. </para>
									<para/>
									<para>Example:</para>
									<para>"&amp;some_var=some%20value"</para>
									<para>Must be rawurlencoded.</para>
									<para>Applies to GMENU, TMENU and IMGMENU.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>showAccessRestrictedPages</para>
								</entry>
								<entry>
									<para>integer (page id) / keyword "NONE"</para>
								</entry>
								<entry>
									<para>If set, pages in the menu will include pages with frontend user group access enabled. &#xA0;However the page is of course not accessible and therefore the URL in the menu will be linked to the page with the ID of this value. On that page you could put a login form or other message.</para>
									<para>If the value is "NONE" the link will not be changed and the site will perform page-not-found handling when clicked (which can be used to capture the event and act accordingly of course).</para>
									<para/>
									<para>Properties:</para>
									<para>.addParam = Additional parameter for the URL, which can hold two markers; ###RETURN_URL### which will be substituted with the link the page would have had if it had been accessible and ###PAGE_ID### holding the page id of the page coming from (could be used to look up which fe_groups was required for access.</para>
									<para/>
									<para>Example:</para>
									<para>showAccessRestrictedPages = 22</para>
									<para>showAccessRestrictedPages.addParams = &amp;return_url=###RETURN_URL###&amp;pageId=###PAGE_ID###</para>
									<para/>
									<para>The example will link access restricted menu items to page id 22 with the return URL in the GET var "return_url" and the page id in the GET var "pageId".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>itemArrayProcFunc</para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>The first variable passed to this function is the "menuArr" array with the menuitems as they are collected based on the type of menu.</para>
									<para>You're free to manipulate or add to this array as you like. Just remember to return the array again!</para>
									<para/>
									<para>Note:</para>
									<para>.parentObj property is hardcoded to be a reference to the calling tslib_menu object. Here you'll find e.g. -&gt;id to be the uid of the menu item generating a submenu and such.</para>
									<para/>
									<para>Presetting element state</para>
									<para>You can override element states like SPC, IFSUB, ACT, CUR or USR by setting the key ITEM_STATE in the page records. See cObject HMENU/special=userdefined for more information.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>submenuObjSuffixes</para>
								</entry>
								<entry>
									<para>string</para>
									<para>+optionSplit</para>
								</entry>
								<entry>
									<para>Defines a suffix for alternative sub-level menu objects. Useful to create special submenus depending on their parent menu element. See example below.</para>
									<para/>
									<para>Example:</para>
									<para>This example will generate a menu where the menu objects for the second level will differ depending on the number of the first level item for which the submenu is rendered. The second level objects used are "2" (the default), "2a" and "2b" (the alternatives). Which of them is used is defined by "1.submenuObjSuffixes" which has the configuration "a |*| |*| b". This configuration means that the first menu element will use configuration "2a" and the last will use "2b" while anything in between will use "2" (no suffix applied)</para>
									<para/>
									<para>page.200 = HMENU</para>
									<para>page.200 {</para>
									<para>&#xA0; 1 = TMENU</para>
									<para>&#xA0; 1.wrap = &lt;div style="width:200px; border: 1px solid;"&gt;|&lt;/div&gt;</para>
									<para>&#xA0; 1.expAll = 1</para>
									<para>&#xA0; 1.submenuObjSuffixes = a |*| &#xA0;|*| b</para>
									<para>&#xA0; 1.NO.allWrap = &lt;b&gt;|&lt;/b&gt;&lt;br/&gt;</para>
									<para/>
									<para>&#xA0; 2 = TMENU</para>
									<para>&#xA0; 2.NO.allWrap = &lt;div style="background:red;"&gt;|&lt;/div&gt;</para>
									<para/>
									<para>&#xA0; 2a = TMENU</para>
									<para>&#xA0; 2a.NO.allWrap = &lt;div style="background:yellow;"&gt;|&lt;/div&gt;</para>
									<para/>
									<para>&#xA0; 2b = TMENU</para>
									<para>&#xA0; 2b.NO.allWrap = &lt;div style="background:green;"&gt;|&lt;/div&gt;</para>
									<para>}</para>
									<para/>
									<para>The result can be seen in the image below (applied on the testsite package):</para>
									<para/>
									<para>
										<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}10000000000000D20000013EDD6DE4D4.png" width=""/>
									</para>
									<para/>
									<para>Applies to GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS and GMENU_FOLDOUT on &gt;= 2nd level in a menu.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj)]</para>
			</section>
			<section>
				<title>Common item states for TMENU, GMENU and IMGMENU series:</title>
				<para>These properties are in common for TMENU, GMENU and IMGMENU series. That means they are not used by for instance the JSMENU.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>NO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>The default "Normal" state rendering of Item. This is required for all menus.</para>
									<para>If you specify properties for the "NO" property you do not have to set it "1". Otherwise with no properties setting "NO=1" will render the menu anyways (for TMENU this may make sense).</para>
									<para/>
									<para>The simplest menu TYPO3 can generate is then:</para>
									<para/>
									<para>page.20 = HMENU</para>
									<para>page.20.1 = TMENU</para>
									<para>page.20.1.NO = 1</para>
									<para/>
									<para>That will be pure &lt;a&gt; tags wrapped around page titles.</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>IFSUB</para>
									<para>IFSUBRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for menu items which has subpages.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>ACT</para>
									<para>ACTRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for menu items which are found in the rootLine.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>ACTIFSUB</para>
									<para>ACTIFSUBRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for menu items which are found in the rootLine and have subpages.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>CUR</para>
									<para>CURRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for a menu item if the item is the current page.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>CURIFSUB</para>
									<para>CURIFSUBRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for a menu item if the item is the current page and has subpages.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>USR</para>
									<para>USRRO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for menu items which are access restricted pages that a user has access to.</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>SPC</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Enable/Configuration for 'Spacer' pages.</para>
									<para>Spacers are pages of the doktype "Spacer". These are not viewable pages but "placeholders" which can be used to divide menuitems.</para>
									<para/>
									<para>Note: Rollovers doesn't work with spacers, if you use GMENU!</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>USERDEF1</para>
									<para>USERDEF1RO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>Userdefined, see .itemArrayProcFunc for details on how to use this.</para>
									<para>You can set the ITEM_STATE values USERDEF1 and USERDEF2 (+...RO) from a script/userfunction processing the menu item array. See HMENU/special=userdefined or the property .itemArrayProcFunc of the menu objects.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>USERDEF2</para>
									<para>USERDEF2RO</para>
								</entry>
								<entry>
									<para>Boolean / (config)</para>
								</entry>
								<entry>
									<para>(See above)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj_itemStates)]</para>
				<para>Order of priority: USERDEF2, USERDEF1, SPC, USR, CURIFSUB, CUR, ACTIFSUB, ACT, IFSUB</para>
				<para>All *RO states require the default "RO" configuration to be set up.</para>
				<para/>
			</section>
			<section>
				<title>[menuObj].sectionIndex</title>
				<para>This is a property that all menuObj's share. If it's set, then the menu will not consist of links to pages on the "next level" but rather links to the parent page to the menu, but in addition "#"-links to the cObjects rendered on the page. In other words, the menu items will be links to the content elements (with colPos=0!) on the page. A section index.</para>
				<para>.sectionIndex = [boolean]</para>
				<para>If you set this, all content elements (from tt_content table) of "Column" = "Normal" and the "Index"-check box clicked are selected. This corresponds to the "Menu/Sitemap" content element when "Section index" is selected as type.</para>
				<para>.sectionIndex.type = "all" / "header"</para>
				<para>If you set this additional property to "all", then the "Index"-checkbox is not considered and all content elements with colPos=0 is selected. </para>
				<para>If this property is "header" then only content elements with a visible header-layout (and a non-empty 'header'-field!) is selected. In other words, if the header layout of an element is set to "Hidden" then the page will not appear in the menu.</para>
				<section>
					<title>The data-record /Behind the scene</title>
					<para>When the menu-records are selected it works like this: The parent page record is used as the "base" for the menu-record. That means that any "no_cache" or "target"-properties of the parent page is used for the whole menu. </para>
					<para>But of course some fields from the tt_content records are transferred. This is how it mapped:</para>
					<programlisting>$temp[$row[uid]]=$basePageRow;</programlisting>
					<programlisting>$temp[$row[uid]]['title']=$row['header'];</programlisting>
					<programlisting>$temp[$row[uid]]['subtitle']=$row['subheader'];</programlisting>
					<programlisting>$temp[$row[uid]]['starttime']=$row['starttime'];</programlisting>
					<programlisting>$temp[$row[uid]]['endtime']=$row['endtime'];</programlisting>
					<programlisting>$temp[$row[uid]]['fe_group']=$row['fe_group'];</programlisting>
					<programlisting>$temp[$row[uid]]['media']=$row['media'];</programlisting>
					<programlisting>$temp[$row[uid]]['header_layout']=$row['header_layout'];</programlisting>
					<programlisting>$temp[$row[uid]]['bodytext']=$row['bodytext'];</programlisting>
					<programlisting>$temp[$row[uid]]['image']=$row['image'];</programlisting>
					<programlisting>$temp[$row[uid]]['sectionIndex_uid']=$row['uid'];</programlisting>
					<programlisting/>
					<para>Basically this shows that </para>
					<para>- the field "header" and "subheader" from tt_content are mapped to "title" and "subtitle" in the pages-record. Thus you shouldn't need to change your standard menu-objects to fit this thing...</para>
					<para>- the fields "starttime", "endtime", "fe_group", "media" from tt_content are mapped to the same fields in a pages-record.</para>
					<para>- the fields "header_layout", "bodytext" and "image" are mapped to non-existing fields in the page-record</para>
					<para>- a new field, "sectionIndex_uid" is introduced in the page record which is detected by the function t3lib_tstemplate-&gt;linkData(). If this field is present in a page record, the linkData()-function will prepend a hash-mark and the number of the field.</para>
					<para>Note: </para>
					<para>You cannot create submenus to sectionIndex-menus. That doesn't make any sense as these elements are not pages and thereby have no children.</para>
				</section>
			</section>
			<section>
				<title/>
			</section>
			<section>
				<title>GMENU</title>
				<para>GMENU works as an object under the cObject "HMENU" and it creates graphical navigation, where each link is a separate gif-file.</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>RO</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>RollOver configuration enabled / disabled. </para>
									<para>If this is true, RO becomes a GIFBUILDER-object defining the layout of the menu item when the mouse rolls over it</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>expAll</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>If this is true, the menu will always show the menu on the level underneath the menu item. This corresponds to a situation where a user has clicked a menu item and the menu folds out the next level. This can enable that to happen on all items as default.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>collapse</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>If set, "active" menu items that has expanded the next level on the menu will now collapse that menu again.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>accessKey</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>If set access-keys are set on the menu-links</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noBlur</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>Normally graphical links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. </para>
									<para>If this property is set, the link is NOT blurred (browser-default) with "onFocus".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Target of the menu links</para>
								</entry>
								<entry>
									<para>self</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceTypeValue</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>If set, the &amp;type parameter of the link is forced to this value regardless of target. Overrides the global equivalent in 'config' if set.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the whole item using stdWrap</para>
									<para/>
									<para>Example:</para>
									<para>2 = TMENU</para>
									<para>2 {</para>
									<para>&#xA0; stdWrap.dataWrap = &lt;ul class="{register :</para>
									<para>&#xA0; &#xA0; &#xA0;parentProperty}"&gt; | &lt;/ul&gt;</para>
									<para>&#xA0; NO {</para>
									<para>&#xA0; &#xA0; ...</para>
									<para>&#xA0; }</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>Wraps only if there were items in the menu!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>applyTotalH</para>
								</entry>
								<entry>
									<para>objNumsList (offset)</para>
								</entry>
								<entry>
									<para>This adds the total height of the previously generated menu items to the offset of the GifBuilderObj's mentioned in this list.</para>
									<para/>
									<para>Example:</para>
									<para>This is useful it you want to create a menu with individual items but a common background image that extends to the whole area behind the menu. Then you should setup the background image in each GIFBUILDER-object and include the object-number in this list. </para>
									<para>Look at the implementation in static_template "styles.gmenu.bug"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>applyTotalW</para>
								</entry>
								<entry>
									<para>objNumsList (offset)</para>
								</entry>
								<entry>
									<para>This adds the total width of the previously generated menu items to the offset of the GifBuilderObj's mentioned in this list.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>min</para>
								</entry>
								<entry>
									<para>x,y (calcInt)</para>
								</entry>
								<entry>
									<para>Forces the menu as a whole to these minimum dimensions</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>max</para>
								</entry>
								<entry>
									<para>x,y (calcInt)</para>
								</entry>
								<entry>
									<para>Forces the menu as a whole to these maximum dimensions</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>useLargestItemX</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the width of all menu items will be equal to the largest of them all.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>useLargestItemY</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the height of all menu items will be equal to the largest of them all.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>distributeX</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>If set, the total width of all the menu items will be equal to this number of pixels by adding/subtracting an equal amount of pixels to each menu items width.</para>
									<para>Will overrule any setting for ".useLargestItemX"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>distributeY</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>If set, the total height of all the menu items will be equal to this number of pixels by adding/subtracting an equal amount of pixels to each menu items height.</para>
									<para>Will overrule any setting for ".useLargestItemY"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>removeObjectsOfDummy</para>
								</entry>
								<entry>
									<para>objNumsList</para>
								</entry>
								<entry>
									<para>If the menu is forced to a certain minimum dimension, this is a list of objects in the gifbuilder-object that is removed for this last item. This is important to do if the menu items has elements that should only be applied if the item is actually a menu item!!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>disableAltText</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the alt-parameter of the images are not set. You can do it manually by "imgParams" (see below)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>IProcFunc</para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>The internal array "I" is passed to this function and expected returned as well. Subsequent to this function call the menu item is compiled by implode()'ing the array $I[parts] in the passed array. Thus you may modify this if you need to.</para>
									<para>See example in typo3/sysext/cms/tslib/media/scripts/example_itemArrayProcFunc.php</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>[Common Item States, see above]</para>
									<para>+ rollover version for all, except SPC</para>
								</entry>
								<entry>
									<para>-&gt;GIFBUILDER</para>
									<para>+ Additional properties! See table below</para>
								</entry>
								<entry>
									<para>This is the GIFBUILDER-options for each category of menu item that can be generated.</para>
									<para/>
									<para>Note: For the GMENU series you can also define the RollOver configuration for the item states. This means that you define the GIFBUILDER object for the 'Active' state by ACT and the RollOver GIFBUILDER object for the 'Active' state by ACTRO.</para>
									<para>This pattern goes for ALL the states except the SPC state.</para>
									<para/>
									<para>SPECIAL:</para>
									<para>The -&gt;OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).GMENU</para>
				<section>
					<title>Additional properties for Menu item states</title>
					<para>These properties are additionally available for the GMENU item states although the main object is declared to be GIFBUILDER. </para>
					<para>It is evident that it is an unclean solution to introduce these properties on the same level as the GIFBUILDER object in a single situation like this. However this is how it irreversibly is and has been for a long time.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>noLink</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, the item is NOT linked!</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>imgParams</para>
									</entry>
									<entry>
										<para>params</para>
									</entry>
									<entry>
										<para>Parameters for the &lt;img&gt;-tag</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>altTarget</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Alternative target which overrides the target defined for the GMENU</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>altImgResource</para>
									</entry>
									<entry>
										<para>imgResouce</para>
									</entry>
									<entry>
										<para>Defines an alternative image to use. If an image returns here, it will override any GIFBUILDER configuration.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>ATagParams</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Additional parameters</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>ATagTitle</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>which defines the title attribute of the a-tag. (See TMENUITEM also)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>additionalParams</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Define parameters that are added to the end of the URL. This must be code ready to insert after the last parameter.</para>
										<para/>
										<para>For details, see typolink-&gt;additionalParams</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>wrap</para>
									</entry>
									<entry>
										<para>Wrap of the menu item.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>allWrap</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the whole item.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrapItemAndSub</para>
									</entry>
									<entry>
										<para>wrap /stdWrap</para>
									</entry>
									<entry>
										<para>Wraps the whole item and any submenu concatenated to it.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>subst_elementUid</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, "{elementUid}" is substituted with the item uid.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>allStdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>stdWrap of the whole item</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).HMENU.(mObj).GMENU.(itemState)]</para>
				</section>
			</section>
			<section>
				<title>GMENU_LAYERS / TMENU_LAYERS</title>
				<para>GMENU_LAYERS / TMENU_LAYERS works as an extension to GMENU/TMENU, which means the these properties underneath is additional properties to the ones above. </para>
				<para>The purpose of xMENU_LAYERS is to create 2-level (or more!) menus where the 2nd+ level is shown on a DHTML-layer. Most features works with modern browsers including Netscape, Microsoft Internet Explorer, Mozilla, Konqueror and Opera. You can cascade the menus as you like.</para>
				<para>Note: You must include the library "typo3/sysext/cms/tslib/media/scripts/gmenu_layers.php" (for GMENU_LAYERS) and/or "typo3/sysext/cms/tslib/media/scripts/tmenu_layers.php" (for TMENU_LAYERS) and you must also expand the xMENU_LAYERS to the next for the menu to make sense (use the expAll-flag).</para>
				<para>Compatibility: MSIE 4+, Netscape 4+ and 6+, Opera 5+, Konqueror.</para>
				<para>Notes: </para>
				<orderedlist>
					<listitem>
						<para>Netscape 4 does not support mouseover on the layers. </para>
					</listitem>
					<listitem>
						<para>Opera seems to have problems with the mouseout event if you roll from an element to a layer. Then the event may not be fired before entering the layer. It happens only if the layer is placed very close to the trigger element. Problems from this may be that the rollover state of the items are not reset.</para>
					</listitem>
					<listitem>
						<para>Possible bug; It has been seen with cascaded layers that Opera may suddenly refuse any interaction on the page, even clicking normal links. It may be a JavaScript error that makes this happen, but as even normal links are not clickable anymore, I'm not really sure. Seems to be no problem with single-level menu.</para>
					</listitem>
				</orderedlist>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>layerStyle</para>
								</entry>
								<entry>
									<para>&lt;DIV&gt;-tag params</para>
								</entry>
								<entry>
									<para>Parameters for the &lt;DIV&gt;-layer-tags in the HTML-document. You might probably not need change this.</para>
									<para/>
									<para>Example:</para>
									<para>position: absolute; VISIBILITY: hidden;</para>
								</entry>
								<entry>
									<para>position:absolute; visibility: hidden; </para>
								</entry>
							</row>
							<row>
								<entry>
									<para>lockPosition</para>
								</entry>
								<entry>
									<para>"x" / "y" / ""</para>
								</entry>
								<entry>
									<para>If this is set to "x" or "y" the menu on the layers is locked and does not follow the mouse-cursor (which it does if this is not set).</para>
									<para>"x" or "y" defines respectively that the summed width (x) or height (y) is added to the x or y offset of the menu. That means that you should set this value to "x" if you have a horizontal GMENU_LAYERS and to "y" if you have a vertical menu.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>dontFollowMouse</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set and lockPosition is blank (so that the menu layer follows the mouse) then the menu will NOT follow the mouse but still it will appear where the mouse cursor hit the trigger-element. Useful if you don't know the exact positions of elements. </para>
									<para/>
									<para>Warning: You should not set displayActiveOnLoad for menus with this feature enabled (because the absolute position of the layer is not known).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>lockPosition_adjust</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>A number which is added to the width/height of the menu items in order &#xA0;to compensate for e.g. hspace or other things between the images in the GMENU_LAYERS</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>lockPosition_addSelf</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Normally the width and height of the items (+lockPosition_adjust) are summed up after the item has been rendered. This is good if the direction of the menu layers is right- og downwards.</para>
									<para>But if you use directionLeft/directionUp, you might want to add the width of the items before.</para>
									<para>If so, set this flag.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>xPosOffset</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The offset of the menu from the point where it's "activated" (if lockPosition is false) / from top left page corner (if lockPosition is set)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>yPosOffset</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>As above, but for the y-dimension.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>topOffset</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The offset of menu items from top of browser. Should be set rather than defining it in the .layerStyle property. Must be set in order to use directionUp.</para>
									<para>Used with either lockPosition=x or xPosOffset defined.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>leftOffset</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The offset of menu items from left border of browser. Should be set rather than defining it in the .layerStyle property. Must be set in order to use directionLeft.</para>
									<para>Used with either lockPosition=y or yPosOffset defined.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>blankStrEqFalse</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the properties topOffset,leftOffset, xPosOffset, yPosOffset are considered "blank" if they are really blank strings - not just "zero". You should enable this if you wish to be able to work with zero offsets. This is typically the case if you use relative positioning.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>directionLeft</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Set this, if you want the items to be right-aligned (pop's out towards the left).</para>
									<para>Does not work with Opera at this time because I don't know how to make Opera read the width of each layer.</para>
									<para>If you set the width of the menu-layers in .layerStyles this might work no matter what.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>directionUp</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Set this, if you want the items to be bottom-aligned (pop's out upwards instead of downwards).</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>setFixedWidth</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>For GMENU_LAYERS the width and heights of the element is normally known from the graphical item. For TMENU_LAYERS this cannot be known in the same way. Therefore you can use .setFixedWidth and .setFixedHeight to set these values to a number you find reasonable. Of course this may be blasted by the browsers rendering if the font gets out of proportions etc.</para>
									<para>Alternatively you may want to use the property "relativeToTriggerItem" which will position your menu layers relative to the item you roll over. This has some drawbacks though. A middle solution is to use a menu with lockPosition set to blank and dontFollowMouse set to true. Then you need only specify either an x or y coordinate to follow and the item will appear where the mouse hits the element.</para>
									<para>Notice: Active if value is NOT a blank str. Setting this value to zero means that no width is calculated for the items in GMENU_LAYERS.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>setFixedHeight</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>See "setFixedWidth". Same, but for height.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bordersWithin</para>
								</entry>
								<entry>
									<para>l,t,r,b,l,t</para>
								</entry>
								<entry>
									<para>Keep borders of the layer within these limits in pixels. Zero is 'not set'</para>
									<para>(Syntax: List of integers, evaluated clockwise: Left, Top, Right, Bottom, Left, Top)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>displayActiveOnLoad</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the submenu-layer of the active menu item is opened at page-load. If .freezeMouseover is also set and there is RO defined for the main menu items, the menu item belonging to the displayed submenu is also shown.</para>
									<para/>
									<para>Properties:</para>
									<para>.onlyOnLoad (boolean)</para>
									<para>If set, then the display of the active item will happen only when the page is loaded. The display will not be restored on mouseout of other items.</para>
									<para/>
									<para>Warning: If you are cascading GMENU_LAYER objects, make sure that all elements before this element (for which you set this attribute) also have this attribute set!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>freezeMouseover</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, any mouseout effect of main menu items is removed not on roll-out but when another element is rolled over (or the layer is hidden/default layer restored)</para>
									<para/>
									<para>Properties:</para>
									<para>.alwaysKeep (boolean)</para>
									<para>If set, the frozen element will always stay, even if the submenu is hidden.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>hideMenuWhenNotOver</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>If set (&gt; 1) then the menu will hide it self whenever a user moves the cursor away from the menu. The value of this parameter determines the width (pixels) of the zone around the element until the mouse pointer is considered to be far enough away to hide the layer.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>hideMenuTimer</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>This is the number of milliseconds to wait before the submenu will disappear if hideMenuWhenNotOver is set.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>dontHideOnMouseUp</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the menu will not hide its layers when the mouse button is clicked. Useful if your menu items loads the pages in another frame.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>layer_menu_id</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If you want to specifically name a menu on a page. Probably you don't need that!</para>
									<para/>
									<para>Warning: Don't use underscore and special characters in this string. Stick to alpha-numeric characters.</para>
								</entry>
								<entry>
									<para>[random 6 char hashstring]</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>relativeToTriggerItem</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>This allows you to position the menu layers relative to the item that triggers it. However you should be aware of the following facts:</para>
									<orderedlist>
										<listitem>
											<para>This does not work with Netscape 4 - the position of the trigger layer will be calculated to zero and thus the offset for all menu layers will be 0,0 + your values. </para>
										</listitem>
										<listitem>
											<para>This feature will wrap the menu item in some &lt;div&gt;-tags right before the whole item is wrapped by the .wrap code (for GMENU_LAYERS) or .allWrap (for TMENU_LAYERS). The bottom line of this is: 1) If your menu is horizontal, always wrap your menu items in a table so line breaks does not appear because of the &lt;div&gt;-tags and 2) make sure the wrapping of the table cell is done with the .wrap/.allWrap properties respectively.</para>
										</listitem>
										<listitem>
											<para>Works only effectively on the first xMENU_LAYER in a cascade. For succeeding xMENU_LAYERS items please use "relativeToParentLayer".</para>
										</listitem>
									</orderedlist>
									<para>If set, properties xPosOffset, yPosOffset and lockPosition* are not functional (properties directionLeft, directionUp, topOffset and leftOffset are still active)</para>
									<para/>
									<para>Additional Properties:</para>
									<para>.addWidth = Adds the width of the trigger element</para>
									<para>.addHeight = Adds the height of the trigger element</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>relativeToParentLayer</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, then the layer will be positioned relative to the previous layer (parent) in a cascaded series of xMENU_LAYERS. Basically the relative position of the parent layer is just added to the offset of the current menu. </para>
									<para/>
									<para>Warning: This property makes sense only if there really is a previous GMENU_LAYER to get position from! So you must have a cascaded menu!</para>
									<para/>
									<para>Additional Properties:</para>
									<para>.addWidth = Adds the width of the parent layer</para>
									<para>.addHeight = Adds the height of the parent layer</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).GMENU_LAYERS, (cObject).HMENU.(mObj).TMENU_LAYERS]</para>
				<section>
					<title>Example:</title>
					<programlisting>page.includeLibs.gmenu_layers = media/scripts/gmenu_layers.php</programlisting>
					<programlisting>page.10 = HMENU</programlisting>
					<programlisting>page.10.1 = GMENU_LAYERS</programlisting>
					<programlisting>page.10.1 {</programlisting>
					<para>&#xA0; layerStyle = position: absolute; VISIBILITY: hidden;</para>
					<para>&#xA0; xPosOffset = -30</para>
					<para>&#xA0; lockPosition = x</para>
					<para>&#xA0; expAll=1</para>
					<para>&#xA0; leftOffset = 15</para>
					<para>&#xA0; topOffset = 30</para>
					<programlisting>}</programlisting>
					<programlisting>page.10.1.NO {</programlisting>
					<programlisting>&#xA0; backColor = #cccccc</programlisting>
					<programlisting>&#xA0; XY = [10.w]+10, 14</programlisting>
					<programlisting>&#xA0; 10 = TEXT</programlisting>
					<programlisting>&#xA0; 10.text.field = title</programlisting>
					<programlisting>&#xA0; 10.offset = 5,10</programlisting>
					<programlisting>}</programlisting>
					<programlisting>page.10.2 = GMENU</programlisting>
					<programlisting>page.10.2.wrap = &lt;nobr&gt;|&lt;/nobr&gt;</programlisting>
					<programlisting>page.10.2.NO {</programlisting>
					<programlisting>&#xA0; backColor = #99cccc</programlisting>
					<programlisting>&#xA0; XY = [10.w]+10, 14</programlisting>
					<programlisting>&#xA0; 10 = TEXT</programlisting>
					<programlisting>&#xA0; 10.text.field = title</programlisting>
					<programlisting>&#xA0; 10.offset = 5,10</programlisting>
					<programlisting>}</programlisting>
				</section>
			</section>
			<section>
				<title>GMENU_FOLDOUT</title>
				<para>GMENU_FOLDOUT works as an extension to GMENU, which means the these properties underneath is additional properties to the ones above.</para>
				<para>The purpose of GMENU_FOLDOUT is to create 2-level menus which are folded out dynamically.</para>
				<para>It works with both Netscape, Mozilla, Microsoft internet Explorer and Opera. The menu on the first level is a GMENU because GMENU_FOLDOUT is responsible for this, but the submenu on the next level (referred to as 2nd level) can be both TMENU and another GMENU.</para>
				<para>NOTE: You must include the library "typo3/sysext/cms/tslib/media/scripts/gmenu_foldout.php".</para>
				<para>The script implemented is taken from http://www9.ewebcity.com/skripts/foldoutmenu_move.htm</para>
				<para>Compatibility: MSIE 4+, Netscape 4+ and 6+, Opera 5+</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>dontLinkIfSubmenu</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, items that has a submenu is not linked. Items without a submenu are always linked in the regular ways.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>foldTimer</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>The timeout in the animation, these are milliseconds.</para>
								</entry>
								<entry>
									<para>40</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>foldSpeed</para>
								</entry>
								<entry>
									<para>int, range 1-100</para>
								</entry>
								<entry>
									<para>How many steps in an animation? Choose 1 for no animation.</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>stayFolded</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Stay open when you click a new toplink? (Level 1)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>bottomHeight</para>
								</entry>
								<entry>
									<para>int, pixels</para>
								</entry>
								<entry>
									<para>Sets the height of the bottom layer. Is important if the bottom layer &#xA0;contains either content or a background color: Else the layer will be clipped.</para>
								</entry>
								<entry>
									<para>100</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>menuWidth</para>
								</entry>
								<entry>
									<para>int, pixels</para>
								</entry>
								<entry>
									<para>Width of the whole menu main layer. Important to set, especially for the bottom layer as it is clipped by this value. Always try to set this to the width in pixels of the menu.</para>
								</entry>
								<entry>
									<para>170</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>menuHeight</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Height of the whole menu layer. Seems not to be not that important.</para>
								</entry>
								<entry>
									<para>400</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>subMenuOffset</para>
								</entry>
								<entry>
									<para>x,y</para>
								</entry>
								<entry>
									<para>Offset of the submenu for each menu item. This is important because if you don't set this value the items will appear on top of their "parent".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>menuOffset</para>
								</entry>
								<entry>
									<para>x,y</para>
								</entry>
								<entry>
									<para>Offset of the menu main layer on the page. From upper left corner</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>menuBackColor</para>
								</entry>
								<entry>
									<para>HTML-color</para>
								</entry>
								<entry>
									<para>Background color behind menu. If not set, transparent (which will not work very well in case .foldSpeed is set to something else than 1. But see for yourself)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>dontWrapInTable</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>By default every menu item on the first level is wrapped in a table:</para>
									<para>&lt;TABLE cellSpacing=0 cellPadding=0 width="100%" border=0&gt;&lt;TR&gt;&lt;TD&gt;</para>
									<para>[menu item HTML here..]</para>
									<para>&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;</para>
									<para>Doing this ensures that the layers renders equally in the supported browsers. However you might need to disable that which is what you can do by setting this flag.</para>
									<para>Note: Using &lt;TBODY&gt; in this tables seems to break Netscape 4+</para>
								</entry>
								<entry>
									<para>0</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>bottomContent</para>
								</entry>
								<entry>
									<para>cObject</para>
								</entry>
								<entry>
									<para>Content for the bottom layer that covers the end of the menu. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>adjustItemsH</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Adjusts the height calculation of the menulayers of the first level (called Top)</para>
									<para/>
									<para>Example:</para>
									<para>-10</para>
									<para/>
									<para>This value will substract 10 pixels from the height of the layer in calculations.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>adjustSubItemsH</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>Adjusts the height calculation of the menu layers of the second level (subitems, called Sub)</para>
									<para>See above</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>arrowNO</para>
									<para>arrowACT</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para>If both arrowNO and arrowACT is defined and valid imgResources then these images are use as "traditional arrows" that indicates whether an item is expanded (active) or not. </para>
									<para>NO is normal, ACT is expanded</para>
									<para>The image is inserted just before the menu item. If you want to change the position, put the marker ###ARROW_IMAGE### into the wrap of the item and the image will be put there instead.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>arrowImgParams</para>
								</entry>
								<entry>
									<para>&lt;img&gt; params</para>
								</entry>
								<entry>
									<para>Parameters to the arrow-image.</para>
									<para/>
									<para>Example:</para>
									<para>hspace=5 vspace=7</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>displayActiveOnLoad</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, the active menu items will fold out "onLoad".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).GMENU_FOLDOUT]</para>
				<section>
					<title>Example:</title>
					<programlisting>## GMENU_FOLDOUT</programlisting>
					<programlisting>includeLibs.gmenu_foldout = typo3/sysext/cms/tslib/media/scripts/gmenu_foldout.php</programlisting>
					<programlisting/>
					<programlisting>temp.foldoutMenu = HMENU</programlisting>
					<programlisting>temp.foldoutMenu.1 = GMENU_FOLDOUT</programlisting>
					<programlisting>temp.foldoutMenu.1.expAll = 1</programlisting>
					<programlisting>temp.foldoutMenu.1.NO {</programlisting>
					<programlisting>&#xA0; wrap = | &lt;br&gt;</programlisting>
					<programlisting>&#xA0; XY = 150,20</programlisting>
					<programlisting>&#xA0; backColor = silver</programlisting>
					<programlisting/>
					<programlisting>&#xA0; 10 = TEXT</programlisting>
					<programlisting>&#xA0; 10.text.field = title</programlisting>
					<programlisting>&#xA0; 10.fontSize = 12</programlisting>
					<programlisting>&#xA0; 10.fontColor = Blue</programlisting>
					<programlisting>&#xA0; 10.offset = 2,10</programlisting>
					<programlisting>}</programlisting>
					<programlisting>temp.foldoutMenu.1.RO &lt; temp.foldoutMenu.1.NO</programlisting>
					<programlisting>temp.foldoutMenu.1.RO = 1</programlisting>
					<programlisting>temp.foldoutMenu.1.RO {</programlisting>
					<programlisting>&#xA0; 10.fontColor = red</programlisting>
					<programlisting>}</programlisting>
					<programlisting>temp.foldoutMenu.2 = TMENU</programlisting>
					<programlisting>temp.foldoutMenu.2.NO {</programlisting>
					<programlisting>&#xA0; linkWrap = &lt;nobr&gt;&lt;font face=verdana size=1 color=black&gt;&lt;b&gt;|&lt;/b&gt;&lt;/font&gt;&lt;/nobr&gt;&lt;br&gt;</programlisting>
					<programlisting>&#xA0; stdWrap.case = upper</programlisting>
					<programlisting>}</programlisting>
					<programlisting>temp.foldoutMenu.1 {</programlisting>
					<programlisting>&#xA0; dontLinkIfSubmenu = 1</programlisting>
					<programlisting>&#xA0; stayFolded=1</programlisting>
					<programlisting>&#xA0; foldSpeed = 6</programlisting>
					<programlisting>&#xA0; subMenuOffset = 10,18</programlisting>
					<programlisting>&#xA0; menuOffset = 100,20</programlisting>
					<programlisting>&#xA0; menuBackColor = silver</programlisting>
					<programlisting>&#xA0; bottomBackColor = silver</programlisting>
					<programlisting>&#xA0; menuWidth = 170</programlisting>
					<programlisting>&#xA0; </programlisting>
					<programlisting>&#xA0; arrowNO = typo3/sysext/cms/tslib/media/bullets/arrow_no.gif</programlisting>
					<programlisting>&#xA0; arrowACT = typo3/sysext/cms/tslib/media/bullets/arrow_act.gif</programlisting>
					<programlisting>&#xA0; arrowImgParams = hspace=4 align=top</programlisting>
					<programlisting/>
					<programlisting>&#xA0; bottomContent = TEXT</programlisting>
					<programlisting>&#xA0; bottomContent.value = Hello World! Here is some content!</programlisting>
					<programlisting>}</programlisting>
					<para/>
					<para>
						<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}10000200000000D10000013C3168C5C2.png" width=""/>
					</para>
					<para>This creates a menu like this (above). One important point is the line</para>
					<programlisting>temp.foldoutMenu.1.expAll = 1</programlisting>
					<programlisting/>
					<para>If you don't set this (just like the GMENU_LAYERS) then the second level is not generated!</para>
					<para/>
				</section>
			</section>
			<section>
				<title>TMENU</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>expAll</para>
								</entry>
								<entry>
									<para>Boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If this is true, the menu will always show the menu on the level underneath the menu item. This corresponds to a situation where a user has clicked a menu item and the menu folds out the next level. This can enable that to happen on all items as default.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>collapse</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, "active" menu items that has expanded the next level on the menu will now collapse that menu again.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>accessKey</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set access-keys are set on the menu-links</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noBlur</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Normally links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. </para>
									<para>If this property is set, the link is NOT blurred (browser-default) with "onFocus".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Target of the menu links</para>
								</entry>
								<entry>
									<para>self</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceTypeValue</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>If set, the &amp;type parameter of the link is forced to this value regardless of target.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the whole item using stdWrap</para>
									<para/>
									<para>Example: see GMENU.stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>Wraps only if there were items in the menu!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>IProcFunc</para>
								</entry>
								<entry>
									<para>function name</para>
								</entry>
								<entry>
									<para>The internal array "I" is passed to this function and expected returned as well. Subsequent to this function call the menu item is compiled by implode()'ing the array $I[parts] in the passed array. Thus you may modify this if you need to.</para>
									<para>See example in typo3/sysext/cms/tslib/media/scripts/example_itemArrayProcFunc.php</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>[Common Item States, see above]</para>
								</entry>
								<entry>
									<para>-&gt;TMENUITEM</para>
								</entry>
								<entry>
									<para>This is the TMENUITEM-options for each category of menu item that can be generated.</para>
									<para/>
									<para>SPECIAL:</para>
									<para>The -&gt;OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).TMENU]</para>
			</section>
			<section>
				<title>TMENUITEM</title>
				<para>The current record is the page-record of the menu item - just like you have it with GMENU/gifbuilder. Now, if you would like to get data from the current page record, use stdWrap.data = page : [field name]</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>allWrap</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the whole item.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrapItemAndSub </para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>Wraps the whole item and any submenu concatenated to it.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>subst_elementUid</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, all appearances of the string '{elementUid}' in the total element html-code (after wrapped in .allWrap} is substituted with the uid number of the menu item. </para>
									<para>This is useful if you want to insert an identification code in the HTML in order to manipulate properties with JavaScript.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>RO_chBgColor</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>If property RO is set (see below) then you can set this property to a certain set of parameters which will allow you to change the background color of e.g. the table cell when the mouse rolls over you text-link.</para>
									<para/>
									<para>Syntax:</para>
									<para>[over-color] | [out-color] | [id-prefix]</para>
									<para/>
									<para>Example:</para>
									<para>page = PAGE</para>
									<para>page.typeNum = 0</para>
									<para>page.10 = HMENU</para>
									<para>page.10.wrap = &lt;table border=1&gt;|&lt;/table&gt;</para>
									<para>page.10.1 = TMENU</para>
									<para>page.10.1.NO {</para>
									<para>&#xA0; allWrap = &lt;tr&gt;&lt;td valign=top id="1tmenu{elementUid}" style="background:#eeeeee;"&gt;|&lt;/td&gt;&lt;/tr&gt;</para>
									<para>&#xA0; subst_elementUid = 1</para>
									<para>&#xA0; RO_chBgColor = #cccccc | #eeeeee | 1tmenu</para>
									<para>&#xA0; RO = 1</para>
									<para>}</para>
									<para/>
									<para>This example will start out with the table cells in #eeeeee and change them to #cccccc (and back) when rolled over. The "1tmenu" string is a unique id for the menu items. You may not need it (unless the same menu items are more than once on a page), but the important thing is that the id of the table cell has the exact same label before the {elementUid} (red marks). The other important thing is that you DO set a default background color for the cell with the style-attribute (blue marking). If you do not, Mozilla browsers will behave a little strange by not capturing the mouseout event the first time it's triggered. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>before</para>
								</entry>
								<entry>
									<para>HTML /stdWrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beforeImg</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beforeImgTagParams</para>
								</entry>
								<entry>
									<para>&lt;img&gt;-params</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beforeImgLink</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, this image is linked with the same &lt;A&gt; tag as the text</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beforeROImg</para>
								</entry>
								<entry>
									<para>imgResource</para>
								</entry>
								<entry>
									<para>If set, ".beforeImg" and ".beforeROImg" is expected to create a rollOver-pair. </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>beforeWrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap around the ".before"-code</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>linkWrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap to the link-text! </para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagBeforeWrap</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagParams</para>
								</entry>
								<entry>
									<para>&lt;A&gt;-params /stdWrap</para>
								</entry>
								<entry>
									<para>Additional parameters</para>
									<para/>
									<para>Example:</para>
									<para>class="board"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>ATagTitle</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Allows you to specify the "title" attribute of the &lt;a&gt; tag around the menu item.</para>
									<para/>
									<para>Example:</para>
									<para>ATagTitle.field = abstract // description</para>
									<para/>
									<para>This would use the abstract or description field for the &lt;a title=""&gt; attribute.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>additionalParams</para>
								</entry>
								<entry>
									<para>string /stdWrap</para>
								</entry>
								<entry>
									<para>Define parameters that are added to the end of the URL. This must be code ready to insert after the last parameter.</para>
									<para/>
									<para>For details, see typolink-&gt;additionalParams</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>doNotLinkIt</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, the linktext are not linked at all!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>doNotShowLink</para>
								</entry>
								<entry>
									<para>boolean /stdWrap</para>
								</entry>
								<entry>
									<para>If set, the text will not be shown at all (smart with spacers)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>stdWrap2</para>
								</entry>
								<entry>
									<para>wrap /stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap to the total link-text and ATag. (Notice that the plain default value passed to the stdWrap function is "|".)</para>
								</entry>
								<entry>
									<para>&#xA0;| </para>
								</entry>
							</row>
							<row>
								<entry>
									<para>RO</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, rollOver is enabled for this link</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>after...</para>
								</entry>
								<entry>
									<para>[mixed]</para>
								</entry>
								<entry>
									<para>The series of "before..." properties are duplicated to "after..." properties as well. The only difference is that the output generated by the .after.... properties are placed after the link and not before.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>altTarget</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Alternative target overriding the target property of the TMENU if set.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>allStdWrap</para>
								</entry>
								<entry>
									<para>-&gt;stdWrap</para>
								</entry>
								<entry>
									<para>stdWrap of the whole item</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).TMENUITEM]</para>
			</section>
			<section>
				<title>IMGMENU</title>
				<para>Imagemaps are made by creating one large GIFBUILDER-object based on the GIFBUILDER-object ".main" and adding the properties of the GIFBUILDER-objects for each item (NO, ACT, SPC... and so on).</para>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Target of the menu links</para>
								</entry>
								<entry>
									<para>self</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceTypeValue</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>If set, the &amp;type parameter of the link is forced to this value regardless of target.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>noBlur</para>
								</entry>
								<entry>
									<para>Boolean</para>
								</entry>
								<entry>
									<para>Normally graphical links are "blurred" if the browser is MSIE. Blurring removes the ugly box around a clicked link. </para>
									<para>If this property is set, the link is NOT blurred (browser-default) with "onFocus".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>params</para>
								</entry>
								<entry>
									<para>&lt;img&gt;-params</para>
								</entry>
								<entry>
									<para/>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>main</para>
								</entry>
								<entry>
									<para>-&gt;GIFBUILDER</para>
								</entry>
								<entry>
									<para>Main configuration of the image-map! This defines the "underlay"!</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>dWorkArea</para>
								</entry>
								<entry>
									<para>offset + calc</para>
								</entry>
								<entry>
									<para>Main offset of the GIFBUILDER-items (also called the "distribution")</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>[Common Item States, see above]</para>
								</entry>
								<entry>
									<para>-&gt;IMGMENUITEM</para>
									<para>+ .distrib</para>
								</entry>
								<entry>
									<para>This is the TMENUITEM-options for each category of menu item that can be generated.</para>
									<para/>
									<para>SPECIAL:</para>
									<para>The -&gt;OptionSplit function is run on the whole GIFBUILDER-configuration before the items are generated.</para>
									<para/>
									<para>.distrib is (x,y,v,h +calc) of the distribution of the menu items. This provides a way to space each item from the other. The codes "textX" and "textY" can be used for the width (X) and height (Y) dimension of each link.</para>
									<para>This works by adding a WORKAREA-GifBuilderObj between each of the IMGMENUITEM ("subset" of a GIFBUILDER-object) and this work area defines where the text should be printed. As such the "x,y" defines the offset the next item will have (this should be the width of the previous in many cases!) and "v,h" defines the dimensions of the current item. </para>
									<para>Consider this example taken from the static_template "template: MM":</para>
									<para>&#xA0; &#xA0; NO.distrib = textX+10, 0, textX+10, textY+5</para>
									<para>In the future TypoScript may provide better ways to position GIFBUILDER-objects on the image-maps!</para>
									<para/>
									<para>ImgMap is automatically used on the links! (that is the ".imgMap" property of the text-objects in the GIFBUILDER-objects is set automatically, unless is already set.)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>imgMapExtras</para>
								</entry>
								<entry>
									<para>&lt;area...&gt;-tags</para>
								</entry>
								<entry>
									<para>Extra &lt;area...&gt;tags for the image-map</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>debugRenumberedObject</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>if set, the final GIFBUILDER object configuration is output in order for you to debug your configuration</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).IMGMENU]</para>
			</section>
			<section>
				<title>IMGMENUITEM</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>-&gt;GifBuilderObj</para>
								</entry>
								<entry>
									<para>NOTE:</para>
									<para>The way an imagemap is made is this; All IMGMENUITEMS are included in one big Gifbuilderobj (and renumbered!!). Because of this, Gifbuilderobjects on the next level will not be able to access the data of each menuitem.</para>
									<para>Also the feature of using [##.w] and [##.h] with +calc is currently not supported by IMGMENUITEMs.</para>
									<para>Therefore all IMAGE-objects on the first level is checked; if "file" or "mask" for any IMAGE-objects are set to "GIFBUILDER", the Gifbuilder-object is parsed to see if any TEXT-objects are present and if so, the TEXT-object is "checked" - which means, that the stdWrap-function is called at a time where the $cObj-&gt;data-array is set to the actual menuitem.</para>
									<para>In the example below, the text of each menuitem is rendered by letting the title be rendered on a mask instead of directly on the image. Please observe that the "NO.10"-object is present in order for the image-map coordinates to be generated!!</para>
									<para/>
									<para>NO.6 = IMAGE</para>
									<para>NO.6.file = masked_pencolor*.gif</para>
									<para>NO.6.mask = GIFBUILDER</para>
									<para>NO.6.mask {</para>
									<para>&#xA0; XY = 500, 200</para>
									<para>&#xA0; backColor = black</para>
									<para>&#xA0; 10 = TEXT</para>
									<para>&#xA0; 10 {</para>
									<para>&#xA0; &#xA0; text.field = title</para>
									<para>&#xA0; &#xA0; fontFile = fileadmin/fonts/caflisch.ttf</para>
									<para>&#xA0; &#xA0; fontSize = 34</para>
									<para>&#xA0; &#xA0; fontColor = white</para>
									<para>&#xA0; &#xA0; angle = 15</para>
									<para>&#xA0; &#xA0; offset = 48,110</para>
									<para>&#xA0; }</para>
									<para>&#xA0; 20 = EFFECT</para>
									<para>&#xA0; 20.value = blur=80</para>
									<para>} </para>
									<para>NO.10 = TEXT</para>
									<para>NO.10 {</para>
									<para>&#xA0; text.field = title</para>
									<para>&#xA0; fontFile = fileadmin/fonts/caflisch.ttf</para>
									<para>&#xA0; fontSize = 34</para>
									<para>&#xA0; angle = 15</para>
									<para>&#xA0; offset = 48,110</para>
									<para>&#xA0; hideButCreateMap = 1</para>
									<para>}</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).IMGMENUITEM]</para>
			</section>
			<section>
				<title>JSMENU</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>levels</para>
								</entry>
								<entry>
									<para>int, 1-5</para>
								</entry>
								<entry>
									<para>How many levels there are</para>
								</entry>
								<entry>
									<para>1</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>menuName</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>JavaScript menu name. </para>
									<para>If you have more than one JSMENU on the page, you should set this value for each one.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>target</para>
								</entry>
								<entry>
									<para>Decides target of the menu-links</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>forceTypeValue</para>
								</entry>
								<entry>
									<para>int</para>
								</entry>
								<entry>
									<para>If set, the &amp;type parameter of the link is forced to this value regardless of target.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>1,2,3,4...</para>
								</entry>
								<entry>
									<para>JSMENUITEM</para>
								</entry>
								<entry>
									<para>levels-config</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap around the selector-boxes</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrapAfterTags</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap around the selector-boxes with wrap and form-tags og JS-code.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>firstLabelGeneral</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>General first label. May be overridden by the one set in each JSMENUITEM</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>SPC</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set, spacer can go into the menu, else not.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).JSMENU]</para>
			</section>
			<section>
				<title>JSMENUITEM</title>
				<informaltable frame="all">
					<tgroup cols="4">
						<thead>
							<row>
								<entry>
									<para>Property:</para>
								</entry>
								<entry>
									<para>Data type:</para>
								</entry>
								<entry>
									<para>Description:</para>
								</entry>
								<entry>
									<para>Default:</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>noLink</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>Normally the selection of a menu item in the selector box will update the selector on the next level (if there is a next level) and if there are no items for that selector (because there were no subpages), then the link jumps to the page of itself. </para>
									<para>If this flag is set, however, no menu items in the selector box will ever link to anything. Only update the content of the next selector box on next level.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>alwaysLink</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>If set an item in the menu selector will always link. This takes precedence over "noLink".</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>showFi rst</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>if set, the first link will be shown when the menu is updated.</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>showActive</para>
								</entry>
								<entry>
									<para>boolean</para>
								</entry>
								<entry>
									<para>if set, the active level will be selected, if present</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wrap</para>
								</entry>
								<entry>
									<para>wraps the selector box</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>width</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>Initial width of the boxes set by a number of _ (underscores)</para>
								</entry>
								<entry>
									<para>14</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>elements</para>
								</entry>
								<entry>
									<para>int+</para>
								</entry>
								<entry>
									<para>Initial number of elements in the menu. &#xA0;This is of course overruled by the actual menu item texts.</para>
								</entry>
								<entry>
									<para>5</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>additionalParams</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Additional parameters to the &lt;select&gt; box. Eg, you could set the width with a style-parameter like this:</para>
									<para>style="width: 200px;"</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
							<row>
								<entry>
									<para>firstLabel</para>
								</entry>
								<entry>
									<para>string</para>
								</entry>
								<entry>
									<para>Firt label in top of the menu (default is blank)</para>
								</entry>
								<entry>
									<para/>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>[tsref:(cObject).HMENU.(mObj).JSMENUITEM]</para>
				<section>
					<title>Example:</title>
					<programlisting># The menu:</programlisting>
					<programlisting>temp.jsmenu = HMENU</programlisting>
					<programlisting>temp.jsmenu.1 = JSMENU</programlisting>
					<programlisting>temp.jsmenu.1 {</programlisting>
					<programlisting>&#xA0; levels = 2</programlisting>
					<programlisting>&#xA0; 1.wrap = |&lt;br&gt;</programlisting>
					<programlisting>&#xA0; 2.wrap = |&lt;hr&gt;</programlisting>
					<programlisting>}</programlisting>
					<programlisting/>
					<programlisting># Insert on page.</programlisting>
					<programlisting>page = PAGE</programlisting>
					<programlisting>page.typeNum =0</programlisting>
					<programlisting>page.5 = TEXT</programlisting>
					<programlisting>page.5.field = title</programlisting>
					<programlisting>page.10 &lt; temp.jsmenu</programlisting>
					<programlisting/>
					<para>This draws a menu with two selector boxes.</para>
					<para/>
				</section>
			</section>
		</section>
		<section>
			<title>Appendix A &#x2013; media/scripts/ &#xA0;Plugins</title>
			<section>
				<title>media/scripts/ in general</title>
				<para>The directory typo3/sysext/cms/tslib/media/scripts (in older versions just media/scripts) primarily contains php-scripts which are meant as 'external modules' as opposed to features included in the typo3/sysext/cms/tslib/ libraries. Although they are distributed with TYPO3 just like the rest of tslib/ they form a basis for externally developed frontend functionality. So for most of these scripts, be inspired by them to write your own code. Notice the word 'most'; because some are written long time ago and do not represent the state-of-the-day to do it.</para>
				<section>
					<title>About 'example templates'</title>
					<para>For each plugin script there is one or more example templates. These templates are a part of the documentation of the features in the plugin because they describe the features of the markers and subparts and present an example to learn from. Therefore the example templates may be changed e.g. when new features come along.</para>
					<para>You should therefore not rely on using the default templates unless you'll accept the fact that they may change in the future! So make a copy, modify it for your own purpose if needed and set up the TypoScript of the plugin to use your own template file!</para>
				</section>
			</section>
			<section>
				<title>fe_adminLib.inc</title>
				<section>
					<title>Files:</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>File:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>fe_adminLib.inc</para>
									</entry>
									<entry>
										<para>Main class used to display the frontend administration forms.</para>
										<para>Call it from a USER_INT cObject with 'userFunc = user_feAdmin-&gt;init'. See the static_templates for examples. </para>
										<para>Note: Using the USER_INT cObject allows the script to work regardless of the page-cache which is necessary!!</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fe_admin_dmailsubscrip.tmpl</para>
									</entry>
									<entry>
										<para>Example template file for subscription to newsletters of users to the tt_address table. This template is used by the static_template 'plugin.feadmin.dmailsubscription'.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fe_admin_fe_users.tmpl</para>
									</entry>
									<entry>
										<para>Example template file for creating new frontend users (fe_users). This template is used by the static_template 'plugin.feadmin.fe_users'.</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>Description</title>
					<para>This class is used to create forms for database-administration in the frontend independently of the backend (TBE). Thus you may want to use this, if you like frontend users to edit database content. </para>
					<para>Authentication either goes through fe_user login in which case you can stamp the records with the fe_user_uid so a record belongs to a certain fe_user. The other authentication option is email authentication. In this case you have access to the record if your email is found in a certain field. By fe_user authentication you can get a menu of items to edit when you're logged in. With email-authentication, you can request an email to be sent to your email address. This email contains a list of the available records.</para>
					<para>It's all based on HTML-template files which you have to design by yourself, so there's some design work to do. On the other hand you get total freedom to design your forms.</para>
					<section>
						<title>Example:</title>
						<para>See static_templates 'plugin.feadmin.*' for various examples. Test them configured on the TYPO3 test site.</para>
					</section>
				</section>
				<section>
					<title>Static template</title>
					<para>plugin.feadmin.*</para>
				</section>
				<section>
					<title>Incoming GET or POST vars:</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Name:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>cmd</para>
									</entry>
									<entry>
										<para>Command. </para>
									</entry>
								</row>
								<row>
									<entry>
										<para>preview</para>
									</entry>
									<entry>
										<para>Preview flag.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>backURL</para>
									</entry>
									<entry>
										<para>Back URL.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>rU</para>
									</entry>
									<entry>
										<para>Record UID.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>aC</para>
									</entry>
									<entry>
										<para>Authentication Code.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fD</para>
									</entry>
									<entry>
										<para>Fixed Data (array of fields)</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>FE</para>
									</entry>
									<entry>
										<para>Frontend Edit data array, syntax, FE[tablename][field name] = value</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>fe_adminLib.inc properties</title>
					<informaltable frame="all">
						<tgroup cols="3.8125">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>templateFile</para>
									</entry>
									<entry>
										<para>resource</para>
									</entry>
									<entry>
										<para>The template file, see examples in typo3/sysext/cms/tslib/media/scripts/fe_user_admin.tmpl</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>templateContent</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Alternatively you can set this property directly to the value of the template.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>table</para>
									</entry>
									<entry>
										<para>tablename</para>
									</entry>
									<entry>
										<para>The table to edit. </para>
										<para>Notice: The ultimate lsit of fields allowed to be edited for the table is defined in TCA with the key ["feInterface"]["fe_admin_fieldList"] for each table in question. For an example, see the table definition for fe_users which is a good example.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>defaultCmd</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Defines which action should be default (if &amp;cmd= is not set when calling the page)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>clearCacheOfPages</para>
									</entry>
									<entry>
										<para>[list of integers]</para>
									</entry>
									<entry>
										<para>This is a list of page-ids for which to clear the cache on any successful operation be it EDIT, CREATE or DELETE.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>debug</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, debug information will be output from fe_adminLib which helps to track errors.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Actions:</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>edit </para>
									</entry>
									<entry>
										<para>boolean /actionObject</para>
									</entry>
									<entry>
										<para>If set, editing is basically allowed.</para>
										<para>But you need to specify:</para>
										<para/>
										<para>.fields (list of field names) which determines the fields allowed for editing. Every field in this list must be found as well in the ["feInterface"]["fe_admin_fieldList"] found in the TCA array which ultimately determines which fields can be edited by the fe_adminLib.</para>
										<para/>
										<para>.overrideValues.[field name] (value string) defines values for specific fields which will override ANY input from the form. Overriding values happens after the outside values has been parsed by the .parseValues-property of fe_adminLib but before the evaluation by .required and .evalValues below. For example this may be useful if you wish to hide a record which is being edited, because you want to preview it first.</para>
										<para/>
										<para>.required (list of field names, subset of .fields) which determines which fields are required to return a true value. The valid fields entered here will have the subpart ###SUB_REQUIRED_FIELD_[field name]### removed from the templates if they evaluates to being true and thereby OK. See below for information about this subpart.</para>
										<para/>
										<para>.evalValues.[field name] (list of eval-codes) defines specific evaluation forms for the individual fiels of the form. See below.</para>
										<para/>
										<para>.preview (boolean) will enable the form submitted to be previewed first. This requires a template for preview to be found in the template file. See below for subpart marker names.</para>
										<para/>
										<para>.menuLockPid (boolean will force the menu of editable items to be locked to the .pid (edit only)</para>
										<para/>
										<para>.userFunc_afterSave (function name) is called after the record is saved. The content passed is an array with the current (and previous) record in.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>create </para>
									</entry>
									<entry>
										<para>boolean /actionObject</para>
									</entry>
									<entry>
										<para>The same as .edit above except where otherwise stated.</para>
										<para>Plus there is these additional properties:</para>
										<para/>
										<para>.noSpecialLoginForm (boolean) - if set, fe_adminLib does NOT look for the subpart marker TEMPLATE_CREATE_LOGIN but always for TEMPLATE_CREATE</para>
										<para/>
										<para>.defaultValues.[field name] (value string); Like .overrideValues but this sets the default values the first time the form is displayed.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>delete</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Whether or not records may be deleted. Still regular authentication (ownership or email authCode) is required. Setting the var "preview" lets you make a delete-preview before actually deleting the record.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>infomail</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Infomails are plaintext mails based on templates found in the template file. They may be used for such as sending a forgotten password to a user, but what goes into the infomail is totally up to your design of the template.</para>
										<para>Normally you may have only a default infomail (infomail.default) for instance for sending the password. But you can use other keys also. See below.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>infomail.[key]</para>
									</entry>
									<entry>
										<para>(configuration of infomail properties)</para>
									</entry>
									<entry>
										<para>In order to make fe_adminLib send an infomail, you must specify these vars in your GET vars or HTML-form.</para>
										<para/>
										<para>fetch - if integer, it searches for the uid being the value of 'fetch'. If not, it searches for the email-field (defined by a property of fe_adminLib, see below). </para>
										<para/>
										<para>key - points to the infomail.[key] configuration to use</para>
										<para/>
										<para>Properties:</para>
										<para>.dontLockPid (boolean) - selects only records from the .pid of fe_adminLib.</para>
										<para>.label (string) - The suffix for the markers, see 'Email Markers' beneath.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>setfixed</para>
									</entry>
									<entry>
										<para>boolean /properties</para>
									</entry>
									<entry>
										<para>Allows set-fixed input, probably coming from a link in an infomail or notification mail.</para>
										<para>Syntax: </para>
										<para/>
										<para>.[fixkey].[field name] = fieldvalue - is used to setup a setfixed-link insertable in the infomail by the SYS_SETFIXED_*-markers. See above (setfixed-property of fe_adminLib).</para>
										<para>Special fixkey 'DELETE' is just a boolean.</para>
										<para/>
										<para>.userFunc_afterSave (function name) is called after the record is saved. The content passed is an array with the current (and previous) record in.</para>
										<para/>
										<para>Concept:</para>
										<para>The 'setfixed' concept is best explained by describing a typical scenario - in fact the most common situation of its use:</para>
										<para>Imagine you have some users submitting information on your website. But before that information enters the database, you would like to moderate it - simply preview it and then either delete it or approve it. In the 'create' configuration of fe_adminLib, you set up the hidden field of the record to be overridden to 1. Thus the record is hidden by default. Then you configure a setfixed-fixkey to set the hidden field to 0. This set up generates a list of parameters for use in an URL and those parameters are finally inserted by a corresponding marker in the email template. The link includes all necessary authentication to perform the change of values and thus a single click on that link is enough to change the field values. So this will - by a single click of a link in a notification mail sent to an admin - enable the record! Or of course a similar link with a cmd=delete link will delete it...</para>
										<para>There is a special "field name" you can use, which is '_FIELDLIST" and that lets you specify a list of fields in the record to base the auth-code on. If nothing is specifyed the md5-hash is based on the whole record which means that any changes will disable the setfixed link. If on the other hand, you set _FIELDLIST = uid,pid then that record will be editable as long as the uid and pid values are intact.</para>
										<para>Example:</para>
										<para>This is a common configuration of the email-properties with a simple setfixed setting:</para>
										<para>email.from = kasper@typo3.com</para>
										<para>email.fromName = Kasper Sk&#xE5;rh&#xF8;j</para>
										<para>email.admin = kasper@typo3.com</para>
										<para>setfixed.approve {</para>
										<para>&#xA0; hidden = 0</para>
										<para>&#xA0; _FIELDLIST = uid,pid</para>
										<para>}</para>
										<para>setfixed.DELETE = 1</para>
										<para>setfixed.DELETE._FIELDLIST = uid</para>
										<para/>
										<para>Now, if you insert this marker in your email template </para>
										<para/>
										<para>###SYS_SETFIXED_approve###</para>
										<para/>
										<para>it will get substituted with something like these parameters:</para>
										<para/>
										<para>&amp;cmd=setfixed&amp;rU=9&amp;fD[hidden]=0&amp;aC=5c403d90 </para>
										<para/>
										<para>Now, all you need is to point that to the correct url (where fe_adminLib is invoked!), e.g.:</para>
										<para/>
										<para>###THIS_URL######FORM_URL######SYS_SETFIXED_approve###</para>
										<para/>
										<para>and for deletion:</para>
										<para/>
										<para>...###SYS_SETFIXED_DELETE###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>Others</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>authcodeFields </para>
									</entry>
									<entry>
										<para>[list of fields]</para>
									</entry>
									<entry>
										<para>Comma separated list of fields to base the authCode generation on. Basically this list would include "uid" only in most cases. If the list includes more fields, you should be aware that the authCode will change when the value of that field changes. And then the user will have to re-send an email to himself with a new code.</para>
										<para/>
										<para>.addKey (string) adds the string to the md5-hash of the authCode. Just enter any random string here. Point is that people from outside doesn't know this code and therefore are not able to reconstruct the md5-hash solely based on the uid</para>
										<para/>
										<para>.addDate (date-config) You can use this to make the code time-disabled. Say if you enter "d-m-Y" here as value, the code will work until midnight and then a new code will be valid.</para>
										<para/>
										<para>.codeLength (int) Defines how long the authentication code should be. Default is 8 characters.</para>
										<para>In any case $TYPO3_CONF_VARS['SYS']['encryptionKey'] is prepended.</para>
										<para/>
										<para>Advice:</para>
										<para>If you want to generate authCodes compatible with the standard authCodes (used by the direct mailer by t3lib_div::stdAuthCode()), please set $TYPO3_CONF_VARS['SYS']['encryptionKey'] to a unique and secret key (like you should in any case) and add "uid" as authcodeField ONLY. This is secure enough.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>email</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>.from (string, email) Defines the sender email address of mails sent out</para>
										<para/>
										<para>.fromName (string) Defines the name of the sender. If set, this will be used on the form NAME &lt;EMAIL&gt;</para>
										<para/>
										<para>.admin &#xA0;Email address of the administrator which is notified of changes.</para>
										<para/>
										<para>.field (string/integer) Defines the field name of the record where the email address to send to is found. If the field content happens to be an integer, this is assumed to be the uid of the fe_user owning the record and the email address of that user is fetched for the purpose instead.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>pid</para>
									</entry>
									<entry>
										<para>int+</para>
									</entry>
									<entry>
										<para>The pid in which to store/get the records.</para>
									</entry>
									<entry>
										<para>Current page</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>fe_userOwnSelf</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, fe_users created by this module has their fe_cruser_id-field set to their own uid which means they 'own' their own record and can thus edit their own data. </para>
										<para>All other tables which has a fe_cruser_id field configured in the 'ctrl' section of their $TCA-configuration will automatically get this field set to the current fe_user id.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>fe_userEditSelf</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, fe_users - regardless of whether they own themselves or not - will be allowed to edit himself.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>allowedGroups</para>
									</entry>
									<entry>
										<para>[list of integers]</para>
									</entry>
									<entry>
										<para>List of fe_groups uid numbers which are allowed to edit the records through this form. Normally only the owner fe_user is allowed to do that.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>evalFunc</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Function by which you can manipulate the dataArray before it's saved. </para>
										<para>The dataArray is passed to the function as $content and MUST be returned again from the function.</para>
										<para>The property "parentObj" is a hardcoded reference to the fe_adminLib object.</para>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>formurl</para>
									</entry>
									<entry>
										<para>-&gt;typolink</para>
									</entry>
									<entry>
										<para>Contains typolink properties for the URL (action tag) of the form.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>parseValues.[field]</para>
									</entry>
									<entry>
										<para>[list of parseCodes]</para>
									</entry>
									<entry>
										<para>ParseCodes:</para>
										<para>int - returns the integer value of the input</para>
										<para>lower - returns lowercase version of the input</para>
										<para>upper - returns uppercase version of the input</para>
										<para>nospace - strips all space</para>
										<para>alpha, num, alphanum, alphanum_x &#xA0;- only alphabetic (a-z) and/or numeric chars. alphanum_x also allows _ and -</para>
										<para>trim - trims whitespace in the ends of the string</para>
										<para>setEmptyIfAbsent - will make sure the field is set to empty if the value is not submitted. This ensures a field to be updated an is handy with checkboxes</para>
										<para>random[x] - Returns a random number between 0 and x</para>
										<para>files[semicolon-list(!) of extensions, none=all][maxsize in kb, none=no limit] - Defining the field to hold files. See below for details!</para>
										<para>multiple - Set this, if the input comes from a multiple-selector box (remember to add ...[] to the field name so the values come in an array!)</para>
										<para>checkArray - Set this, if you want several checkboxes to set bits in a single field. In that case you must prepend every checkbox with [x] where x is the bitnumber to set starting with zero. The default values of the checkbox form elements must be false.</para>
										<para>uniqueHashInt[semicolon-list(!) of other fields] - This makes a unique hash (32 bit integer) of the content in the specified fields. The values of those fields are first converted to lowercase and only alphanum chars are preserved. </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>userFunc_updateArray</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Points to a user function which will have the value-array passed to it before the value array is used to construct the update-JavaScript statements.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>evalErrors.[field].[evalCode]</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para>This lets you specify the error messages inserted in the ###EVAL_ERROR_FIELD_[field name]### markers upon an evaluation error.</para>
										<para>See description of evaluation below.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>cObjects.[marker_name]</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>This is cObjects you can insert by markers in the template.</para>
										<para/>
										<para>Example:</para>
										<para>Say, you set up a cObject like this:</para>
										<para/>
										<para>cObject.myHeader = TEXT</para>
										<para>cObject.myHeader.value = This is my header</para>
										<para/>
										<para>then you can include this cObject in most of the templates through a marker named ###CE_myHeader### or ###PCE_myHeader### (see below for details on the difference).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap1</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Global Wrap 1. This will be split into the markers ###GW1B### and ###GW1E###. Don't change the input value by the settings, only wrap it in something.</para>
										<para/>
										<para>Example:</para>
										<para>wrap1.wrap = &lt;b&gt; |&lt;/b&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap2</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Global Wrap 2 (see above)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color1</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC1### marker (Global color 1)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color2</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC2### marker (Global color 2)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color3</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC3### marker (Global color 3)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(script).fe_adminLib]</para>
					<para/>
				</section>
				<section>
					<title>Main subparts</title>
					<para>There is a certain system in the naming of the main subparts of the template file. The markers below are used when an action results in "saving". The [action] code may be DELETE, EDIT or CREATE depending on the cmd value.</para>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Subpart marker:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>###TEMPLATE_[action]_SAVED###</para>
									</entry>
									<entry>
										<para>Used for HTML output</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###TEMPLATE_SETFIXED_OK### (general)</para>
										<para>###TEMPLATE_SETFIXED_OK_[fixkey]###</para>
									</entry>
									<entry>
										<para>Used for a successful setfixed-link. </para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###TEMPLATE_SETFIXED_FAILED###</para>
									</entry>
									<entry>
										<para>Used for an unsuccessful setfixed-link. Notice that if you click a setfixed link twice, the second time it will fail. This is because the setfixed link is bound to the original record and if that changes in any way the authentication code will be invalid!</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_[action]_SAVED###</para>
									</entry>
									<entry>
										<para>Used for an email message sent to the website user</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_[action]_SAVED-ADMIN###</para>
									</entry>
									<entry>
										<para>Used for an email message sent to the admin</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_SETFIXED_[fixkey]###</para>
									</entry>
									<entry>
										<para>Used for notification messages in the event of successful setfixed operations.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_SETFIXED_[fixkey]-ADMIN###</para>
									</entry>
									<entry>
										<para>Ditto, for admin email</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
					<para>Likewise there is a system in the subpart markers used for the EDIT and CREATE actions to display the initial forms: </para>
					<para>###TEMPLATE_[action]###or if a fe_user is logged in (only CREATE): &#xA0;###TEMPLATE_[action]_LOGIN###</para>
					<para/>
					<para>... and if the &amp;preview-flag is sent as well (including DELETE)</para>
					<para>###TEMPLATE_[action]_PREVIEW###</para>
					<para/>
					<para>Must-have subparts:</para>
					<para>These are subparts that should exist in any template.</para>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Subpart marker:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>###TEMPLATE_AUTH###</para>
									</entry>
									<entry>
										<para>Displayed if the authentication - either of fe_user or email authentication code - failed. You must design the error display to correctly reflect the problem!</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###TEMPLATE_NO_PERMISSIONS###</para>
									</entry>
									<entry>
										<para>This error message is displayed if you were authenticated but did not posses the right to edit or delete a record due to other reasons (like wrong fe_user/group ownership).</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>'infomail' Email subparts</title>
					<para>All email subparts can be sent as HTML. This is done if the first and last word of the templates is &lt;html&gt; and &lt;/html&gt; respectively. In addition the t3lib_htmlmail class must be loaded.</para>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Subpart:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_NORECORD###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>###EMAIL_TEMPLATE_[infomail_key]###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>###SUB_RECORD###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>'infomail' Email markers</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Marker:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>###SYS_AUTHCODE###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>###SYS_SETFIXED_[fixkey]###</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>FORM conventions</title>
					<para>The forms used with fe_adminLib should be named after the table they are supposed to edit. For instance if you are going to edit records in the table 'fe_users' you must use a FORM-tag like this:</para>
					<programlisting>&lt;FORM name="fe_users_form" method="POST" action="...."&gt;</programlisting>
					<para/>
					<para>The fields used to submit data for the records has this syntax: FE[tablename][field name]. This means, if you want to edit the 'city' field of a tt_address record, you could use a form element like this:</para>
					<programlisting>&lt;INPUT name="FE[tt_address][city]"&gt;</programlisting>
					<para/>
					<para>Submit buttons can be named as you like except using the name "doNotSave" of a submit button will prevent saving. If you need a Cancel button, please resort to JavaScript in an onClick even to change document.location.</para>
					<para/>
				</section>
				<section>
					<title>Common markers</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Marker:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>###GW1B### / ###GW1E###</para>
									</entry>
									<entry>
										<para>Global wrap 1, begin and end (headers).</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###GW2B### / ###GW2E###</para>
									</entry>
									<entry>
										<para>Global wrap 2, begin and end (bodytext).</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###GC1### / ###GC2### / ###GC3###</para>
									</entry>
									<entry>
										<para>Global color 1 through 3.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###FORM_URL###</para>
									</entry>
									<entry>
										<para>The url used in the forms:</para>
										<para>index.php?id=page-id&amp;type=page-type</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###FORM_URL_ENC###</para>
									</entry>
									<entry>
										<para>As above, but rawurlencoded.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###BACK_URL###</para>
									</entry>
									<entry>
										<para>The backUrl value. Set to the value of incoming "backURL" var.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###BACK_URL_ENC###</para>
									</entry>
									<entry>
										<para>As above, but rawurlencoded.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###REC_UID###</para>
									</entry>
									<entry>
										<para>The UID of the record edited. Set to the value of incoming "rU" var.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###AUTH_CODE###</para>
									</entry>
									<entry>
										<para>The "aC" incoming var.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###THE_PID###</para>
									</entry>
									<entry>
										<para>The "thePid" value - where the records are stored.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###THIS_ID###</para>
									</entry>
									<entry>
										<para>Set to the current page id.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###THIS_URL###</para>
									</entry>
									<entry>
										<para>Set to the current script url as obtained by t3lib_div::getThisUrl().</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>###HIDDENFIELDS###</para>
									</entry>
									<entry>
										<para>A bunch of hiddenfields which are required to be inserted in the forms. These by default include 'cmd', 'aC' and 'backURL'.</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
					<para>In addition you can in most cases use markers like this</para>
					<programlisting>###FIELD_[field name]###</programlisting>
					<programlisting/>
					<para>where [field name] is the name of a field from the record. All fields in the record are used.</para>
					<para>Finally you can insert cObjects defined in TypoScript with this series of markers (see .cObject property in table above):</para>
					<programlisting>###CE_[cObjectName]###</programlisting>
					<programlisting>###PCE_[cObjectName]###</programlisting>
					<programlisting/>
					<para>(###PCE_* is different from the ###CE_* cObjects by the fact they are rendered with a newly created cObj (as opposed to the parant cObj of fe_adminLib) where the data-array is loaded with the value of -&gt;dataArr which is the array submitted into the script. This is useful for presenting preview data. Finally both PCE_ and CE_ types cObject markers may be used with each single element in an edit menu (list of available records) by prefixing the marker with 'ITEM_', e.g. ###ITEM_PCE_[cObjectName]###</para>
				</section>
				<section>
					<title>Evaluation of the form fields</title>
					<para>Printing error messages for REQUIRED fields</para>
					<para>When a form template is displayed all subparts with the markers</para>
					<programlisting>###SUB_REQUIRED_FIELDS_WARNING###</programlisting>
					<para>and </para>
					<programlisting>###SUB_REQUIRED_FIELD_[field name]###</programlisting>
					<para/>
					<para>are removed. If there is a simple "required"-error (a field is not filled in) then the &#xA0;SUB_REQUIRED_FIELDS_WARNING is not removed and thus the error message contained herein is shown. </para>
					<para>Let's say that more specifically it's the 'email' field in a form which is not filled in. Then you can put in a subpart named </para>
					<programlisting>###SUB_REQUIRED_FIELD_email###</programlisting>
					<para>This is normally removed, but it'll not be removed if the email field fails and thus you are able to give a special warning for that specific field.</para>
					<para/>
					<para>Printing other error messages</para>
					<para>However you may use other forms of evaluation than simple "required" check. This is specified for "create" and "edit" modes by the properties ".evalValues.[field name] = [list of codes]". In order to tell your website user which of the possible evaluations went wrong, you can specify error messages by the property .evalErrors which will be inserted as the marker named ###EVAL_ERROR_FIELD_[field name]###.</para>
					<para>Lets say that you have put the code 'uniqueLocal' in the list of evaluation code for the email field. You would do that if you want to make sure that no email address is put into the database twice. Then you may specify that as:</para>
					<programlisting>create.evalValues {</programlisting>
					<programlisting>&#xA0; email = uniqueLocal, email</programlisting>
					<programlisting>}</programlisting>
					<para/>
					<para>Then you set the evaluation error messages like this:</para>
					<programlisting>evalErrors.email {</programlisting>
					<programlisting>&#xA0; uniqueLocal = Apparently you're already registered with this email address!</programlisting>
					<programlisting>&#xA0; email = This is not a proper email address!</programlisting>
					<programlisting>}</programlisting>
					<para/>
					<para>If the error happens to be that the email address already exists, the field ###EVAL_ERROR_FIELD_email### will be substituted with the error message "Apparently you're already registered with this email address!".</para>
					<para/>
				</section>
				<section>
					<title>Passing default values to a form</title>
					<para>You can pass default values to a form by the same syntax as you use in the forms. For instance this would set the name and email address by default:</para>
					<programlisting>...?FE[tt_address][name]=Mike%20Tyson&amp;FE[tt_address][email]=mike@trex.us&amp;doNotSave=1&amp;noWarnings=1</programlisting>
					<para/>
					<para>Notice the blue value names are the field values (must be rawurlencoded. In javascript this function is called escape()) and the red values are necessary if you want to NOT save the record by this action and NOT to display error messages if some fields which are required is not passed any value.</para>
				</section>
				<section>
					<title>List of eval-codes</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>Eval-code:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>uniqueGlobal</para>
									</entry>
									<entry>
										<para>This requires the value of the field to be globally unique, which means it must not exist in the same field of any other record in the current table.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>uniqueLocal</para>
									</entry>
									<entry>
										<para>This is like uniqueGlobal, but the value is required to be unique only in the PID of the record. Thus if two records has different pid values, they may have the same value of this field.</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>twice</para>
									</entry>
									<entry>
										<para>This requires the value of the field to match the value of a secondary field name [field name]_again sent in the incoming formdata. This is useful for entering password. Then if your password field is name "user_pass" then you simple add a second field name "user_pass_again" and then set the 'twice' eval code. </para>
									</entry>
								</row>
								<row>
									<entry>
										<para>email</para>
									</entry>
									<entry>
										<para>Requires the field value to be an email address at least on the form [name]@*[domain].[tld]</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>required</para>
									</entry>
									<entry>
										<para>Just simple required (trimmed value). 0 (zero) will evaluate to false!</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>atLeast</para>
										<para>atMost</para>
									</entry>
									<entry>
										<para>Specifies a minimum / maximum of characters to enter in the fields.</para>
										<para>Example, that requires at least 5 characters: &#xA0;atleast [5] &#xA0;</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>inBranch</para>
									</entry>
									<entry>
										<para>inBranch requires the value (typically of a pid-field) to be among a list of page-id's (pid's) specified with the inBranch parameters. The parameters are given like [root_pid; depth; beginAt]</para>
										<para>Example, which will return a list of pids one level deep from page 4 (included): inBranch [4;1]</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>unsetEmpty</para>
									</entry>
									<entry>
										<para>This evaluation does not result in any error code. Only it simply unsets the field if the value of the field is empty. Thus it'll not override any current value if the field value is not set.</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(script).fe_adminLib.evalErrors.(field).(evalCode)]</para>
					<para/>
				</section>
				<section>
					<title>Uploading files</title>
					<para>fe_adminLib is able to receive files in the forms. However there currently are heavy restrictions on how that is handled. Ideally the proces would be handled by the t3lib_tcemain class used in the backend. In fact this could have been deployed but is not at this stage. The good thing about tcemain.php is that it perfectly handles the copying/deletion of files which goes into a certain field and even handles it independent of the storing method be it a list of filenames or use MM-relations to records (see tables.php section in 'Inside TYPO3').</para>
					<para>This is how files are handled by fe_adminLib and the restrictions that apply currently:</para>
					<orderedlist>
						<listitem>
							<para>You can upload files ONLY using "create" mode of a record. In any case you cannot edit currently attached files (this may be improved in the future). You can however use 'delete' mode.</para>
						</listitem>
						<listitem>
							<para>However you can use PREVIEW mode with 'create'. Works like this: if the mode is preview the temporary uploaded file is copied to a unique filename (prepended with the tablename) in typo3temp/ folder. Then the field value is set to the filenames in a list. When the user approves the content of the preview those temporary files are finally copied to the uploads/* folder (or wherever specified in TCA). Limitations are that the temporary files in typo3temp/ are NOT deleted when copied to the real upload-folder (this may be improved) and certainly not if the user aborts (can't be improved because the user may go anywhere). If the user cancels the preview in order to change values, the files will need to be uploaded again (this may be improved).</para>
						</listitem>
					</orderedlist>
					<orderedlist>
						<listitem>
							<para>The TCA extensions allowed for the field is ignored! However you can specify a list of extensions of allowed for the files in the .parseValues property of fe_adminLib</para>
						</listitem>
						<listitem>
							<para>The TCA filesize limitation for the field is ignored! However you can specify a max file size in kb in the .parseValues property of fe_adminLib</para>
						</listitem>
						<listitem>
							<para>Works only on fields configured for comma-list representation of the filenames (non-MM, see "Inside TYPO3" document on MM relations for files).</para>
						</listitem>
					</orderedlist>
					<para/>
					<para>It's recommended to use a dedicated folder for files administered by the fe_adminLib. The TYPO3 testsite does that by using the uploads/photomarathon/ folder for images. This makes it much easier to clean up the mess if files and their relations to the records are broken.</para>
					<para/>
					<para>field names for files</para>
					<para>Lets say you have a field named "picture" of a table name "user_cars", the form-element should look like this:</para>
					<programlisting>&lt;input type="file" name="FE[user_cars][picture][]"&gt;</programlisting>
					<para/>
					<para>If you wish to upload multiple files to that field, the form-elements should look like:</para>
					<programlisting>&lt;input type="file" name="FE[user_cars][picture][]"&gt;</programlisting>
					<programlisting>&lt;input type="file" name="FE[user_cars][picture][]"&gt;</programlisting>
					<programlisting>&lt;input type="file" name="FE[user_cars][picture][]"&gt;</programlisting>
					<para/>
					<para>Use blob-types for the file-fields and reserve a minimum of 32 characters pr. filename.</para>
					<para>Note: Make sure to always add the last square brackets ('...[]') to the field name! Otherwise it will not work!</para>
					<para/>
				</section>
			</section>
			<section>
				<title>tipafriendLib.inc</title>
				<para/>
				<para>
					<inlinegraphic fileref="{TX_TERDOC_PICTURESDIR}100000000000021700000190D8B16473.png" width=""/>
				</para>
				<section>
					<title>Files:</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>File:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>tipafriendLib.inc</para>
									</entry>
									<entry>
										<para>Main class used to display the Tip-a-Friend form.</para>
										<para>Call it from a USER cObject with 'userFunc = user_tipafriend-&gt;main_tipafriend'</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>tipafriend_template.tmpl</para>
									</entry>
									<entry>
										<para>Example template file. </para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
				</section>
				<section>
					<title>Example:</title>
					<para>(See static_template 'plugin.tipafriend' for a working configuration)</para>
				</section>
				<section>
					<title>Static template</title>
					<para>plugin.tipafriend</para>
				</section>
				<section>
					<title>tipafriendLib.inc properties</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>templateFile</para>
									</entry>
									<entry>
										<para>resource</para>
									</entry>
									<entry>
										<para>The template-file. </para>
										<para>See example in 'media/scripts/tipafriend_template.tmpl'</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>code</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Code to define, what the script does. Case sensitive.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>defaultCode</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>The default code (see above) if the value is empty. By default it's not set and a help screen will appear</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap1</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Global Wrap 1. This will be split into the markers ###GW1B### and ###GW1E###. Don't change the input value by the settings, only wrap it in something.</para>
										<para/>
										<para>Example:</para>
										<para>wrap1.wrap = &lt;b&gt; | &lt;/b&gt;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>wrap2</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>Global Wrap 2 (see above)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color1</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC1### marker (Global color 1)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color2</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC2### marker (Global color 2)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>color3</para>
									</entry>
									<entry>
										<para>string /stdWrap</para>
									</entry>
									<entry>
										<para>Value for ###GC3### marker (Global color 3)</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>typolink</para>
									</entry>
									<entry>
										<para>-&gt;typolink</para>
									</entry>
									<entry>
										<para>TypoLink configuration for the TIPLINK to the TIPFORM page. .additionalParams is added the parameter "&amp;tipUrl="</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>htmlmail</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, the page is fetched as HTML and send in HTML (a plain text version is sent as well).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(script).tipafriend]</para>
					<para/>
				</section>
			</section>
			<section>
				<title>plaintextLib.inc</title>
				<section>
					<title>Files:</title>
					<informaltable frame="all">
						<tgroup cols="2">
							<thead>
								<row>
									<entry>
										<para>File:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>plaintextLib.inc</para>
									</entry>
									<entry>
										<para>Main class used to display plain text content.</para>
										<para>Call it from a USER cObject with 'userFunc = user_plaintext-&gt;main_plaintext'</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>plaintext_content.tmpl</para>
									</entry>
									<entry>
										<para>Example template file. </para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
				</section>
				<section>
					<title>Example:</title>
					<para>(See static_template 'plugin.alt.plaintext' for a working configuration)</para>
				</section>
				<section>
					<title>Static template</title>
					<para>plugin.alt.plaintext</para>
				</section>
				<section>
					<title>plaintextLib.inc properties</title>
					<informaltable frame="all">
						<tgroup cols="3.896551724137931">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>siteUrl</para>
									</entry>
									<entry>
										<para>url</para>
									</entry>
									<entry>
										<para>Url of the site.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>defaultOutput</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Default output if CType is not rendered.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>uploads.header</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Header for uploads.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>images.header</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Header for images.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>images.captionHeader</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Header for image captions.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>images.linkPrefix</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Prefix for image-links.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry namest="c1" nameend="c4">
										<para>.header</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>defaultType</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Defines which type to use as default.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>date</para>
									</entry>
									<entry>
										<para>date-config</para>
									</entry>
									<entry>
										<para>For header date.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>datePrefix</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Prefix for header date.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>linkPrefix</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Prefix for header links.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].preLineLen</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Length of line before header.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].postLineLen</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Length of line after header.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].preBlanks</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Number of blank lines before header.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].postBlanks</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Number of blank lines after header.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>for header text.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].preLineChar</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Character to pre-line.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].postLineChar</para>
									</entry>
									<entry>
										<para>string</para>
									</entry>
									<entry>
										<para>Character to post-line.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].preLineBlanks</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Number of blank lines between header and pre-line.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].postLineBlanks</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>Number of blank lines between header and post-line.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].autonumber</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>If set, a number is prepended every header. The number corresponds to the content element number in the select.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>[1-5].prefix</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Header string prefix.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>bulletlist.[0-3].bullet</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>Bullet for bullet list, layout [0-3].</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>bulletlist.[0-3].secondRow</para>
									</entry>
									<entry>
										<para>untrimmed string</para>
									</entry>
									<entry>
										<para>If set, this is used for lines on the second row of bullet-lists.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>menu</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject to render menu. The output is stripped for tags and the links is extracted. Further all &lt;BR&gt; chars are converted to chr(10).</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>shortcut</para>
									</entry>
									<entry>
										<para>cObject</para>
									</entry>
									<entry>
										<para>cObject to render other elements. See config below which simply uses this object to render more tt_content elements as plaintext.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>bodytext.stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para>stdWrap for body-text. See config example below.</para>
									</entry>
									<entry>
										<para>&#xA0;</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>userProc</para>
									</entry>
									<entry>
										<para>function name</para>
									</entry>
									<entry>
										<para>Lets you process the output of each content element before it finally is returned. Property "parentObj" of the conf-array holds a references to the plainText object calling the function.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(script).plaintextLib]</para>
					<para/>
					<para>Datatype 'untrimmed string' means that you can enter a string as usual, but if you enter a value between two vertical lines, that value will be used and NOT trimmed. Normally values are trimmed.</para>
					<section>
						<title>Example:</title>
						<programlisting>lib.renderObj = USER</programlisting>
						<programlisting>lib.renderObj.userFunc = user_plaintext-&gt;main_plaintext</programlisting>
						<programlisting>lib.renderObj {</programlisting>
						<programlisting>&#xA0; header.defaultType = 1</programlisting>
						<programlisting>&#xA0; header.date = D-m-Y</programlisting>
						<programlisting>&#xA0; header.datePrefix = |Date: |</programlisting>
						<programlisting>&#xA0; header.linkPrefix = | - Headerlink: |</programlisting>
						<programlisting>&#xA0; header.1.preLineLen = 76</programlisting>
						<programlisting>&#xA0; header.1.postLineLen = 76</programlisting>
						<programlisting>&#xA0; header.1.preBlanks = 1</programlisting>
						<programlisting>&#xA0; header.1.stdWrap.case = upper</programlisting>
						<programlisting/>
						<programlisting>&#xA0; header.2 &lt; .header.1</programlisting>
						<programlisting>&#xA0; header.2.preLineChar = *</programlisting>
						<programlisting>&#xA0; header.2.postLineChar = *</programlisting>
						<programlisting/>
						<programlisting>&#xA0; header.3.preBlanks = 2</programlisting>
						<programlisting>&#xA0; header.3.postBlanks = 1</programlisting>
						<programlisting>&#xA0; header.3.stdWrap.case = upper</programlisting>
						<programlisting>&#xA0; </programlisting>
						<programlisting>&#xA0; header.4 &lt; .header.1</programlisting>
						<programlisting>&#xA0; header.4.preLineChar= =</programlisting>
						<programlisting>&#xA0; header.4.postLineChar= =</programlisting>
						<programlisting>&#xA0; header.4.preLineBlanks= 1</programlisting>
						<programlisting>&#xA0; header.4.postLineBlanks = 1</programlisting>
						<programlisting/>
						<programlisting>&#xA0; header.5.preBlanks = 1</programlisting>
						<programlisting>&#xA0; header.5.autonumber = 1</programlisting>
						<programlisting>&#xA0; header.5.prefix = |: &gt;&gt; |</programlisting>
						<programlisting/>
						<programlisting/>
						<programlisting>&#xA0; siteUrl = {$plugin.alt.plaintext.siteUrl}</programlisting>
						<programlisting>&#xA0; defaultOutput (</programlisting>
						<programlisting>|</programlisting>
						<programlisting>[Unrendered Content Element; ###CType### ]</programlisting>
						<programlisting>|</programlisting>
						<programlisting>&#xA0; )</programlisting>
						<programlisting/>
						<programlisting>&#xA0; uploads.header = |DOWNLOADS:|</programlisting>
						<programlisting/>
						<programlisting>&#xA0; images.header = |IMAGES:|</programlisting>
						<programlisting>&#xA0; images.linkPrefix = | - Imagelink: |</programlisting>
						<programlisting>&#xA0; images.captionHeader = |CAPTION:|</programlisting>
						<programlisting/>
						<programlisting>&#xA0; bulletlist.0.bullet = |* &#xA0;|</programlisting>
						<programlisting/>
						<programlisting>&#xA0; bulletlist.1.bullet = |# &#xA0;|</programlisting>
						<programlisting/>
						<programlisting>&#xA0; bulletlist.2.bullet = | - |</programlisting>
						<programlisting/>
						<programlisting>&#xA0; bulletlist.3.bullet = |&gt; &#xA0;|</programlisting>
						<programlisting>&#xA0; bulletlist.3.secondRow = |. &#xA0;|</programlisting>
						<programlisting>&#xA0; bulletlist.3.blanks = 1</programlisting>
						<programlisting/>
						<programlisting>&#xA0; menu = &lt;tt_content.menu.20</programlisting>
						<programlisting>&#xA0; shortcut = &lt;tt_content.shortcut.20</programlisting>
						<programlisting>&#xA0; shortcut.0.conf.tt_content = &lt;lib.renderObj</programlisting>
						<programlisting>&#xA0; shortcut.0.tables = tt_content</programlisting>
						<programlisting/>
						<programlisting>&#xA0; bodytext.stdWrap.parseFunc.tags {</programlisting>
						<programlisting>&#xA0; &#xA0; link &lt; styles.content.parseFunc.tags.link</programlisting>
						<programlisting>&#xA0; &#xA0; typolist = USER</programlisting>
						<programlisting>&#xA0; &#xA0; typolist.userFunc = user_plaintext-&gt;typolist</programlisting>
						<programlisting>&#xA0; &#xA0; typolist.siteUrl = {$plugin.alt.plaintext.siteUrl} </programlisting>
						<programlisting>&#xA0; &#xA0; typolist.bulletlist &lt; temp.renderObj.bulletlist</programlisting>
						<programlisting>&#xA0; &#xA0; typohead = USER</programlisting>
						<programlisting>&#xA0; &#xA0; typohead.userFunc = user_plaintext-&gt;typohead</programlisting>
						<programlisting>&#xA0; &#xA0; typohead.siteUrl = {$plugin.alt.plaintext.siteUrl}</programlisting>
						<programlisting>&#xA0; &#xA0; typohead.header &lt; temp.renderObj.header</programlisting>
						<programlisting>&#xA0; &#xA0; typocode = USER</programlisting>
						<programlisting>&#xA0; &#xA0; typocode.userFunc = user_plaintext-&gt;typocode</programlisting>
						<programlisting>&#xA0; &#xA0; typocode.siteUrl = {$plugin.alt.plaintext.siteUrl}</programlisting>
						<programlisting>&#xA0; }</programlisting>
						<programlisting>}</programlisting>
						<para/>
					</section>
				</section>
			</section>
		</section>
		<section>
			<title>Appendix B &#x2013; Standard Templates</title>
			<section>
				<title>static_template</title>
				<para>This section of the TypoScript reference is used to introduce the standard templates that come with TYPO3 in the static table "static_template". </para>
				<para>In newer versions of TYPO3 the static templates are an own system extension. Old records in the database table static_template are NOT changed from version to version! Still changes may appear!</para>
			</section>
			<section>
				<title>Media</title>
				<para>The standard templates use some standard media-files, like gif-images and fonts. These are situated in the folder "typo3/sysext/cms/tslib/media/" (in older versions in "media/") relative to the root of the TYPO3-website.</para>
			</section>
		</section>
		<section>
			<title>Appendix C &#x2013; PHP include scripts</title>
			<section>
				<title>Introduction</title>
				<para>Although you can do very much with TypoScript itself, it can sometimes be a much more flexible solution to include a PHP-script you write on your own. But you must understand and respect some circumstances. For example the caching system: When a page is shown with TYPO3 it's normally cached afterwards in the SQL-database. This is done to ensure a high performance when delivering the same page the next time. But this also means that you can only make custom code from your include files if you differ your output based on the same conditions that the template may include! For example you cannot just return browser-specific code to TypoScript if not the template also distinguishes between the actual browsers. If you do, the cache will cache the page with the browser-specific HTML-code and the next hit by another browser will trigger the cache to return a wrong page. If the condition is correctly setup "another browser"-hit will instead render another page (which will also be cached but tagged with the other browser!) and the two browsers will receive different pages but still the pages will be cached.</para>
			</section>
			<section>
				<title>TypoScript Configuration</title>
				<para>The following objects are related to the direct inclusion of PHP code inside templates.</para>
				<section>
					<title>PHP_SCRIPT</title>
					<para>This includes a PHP-script. You should not name the script ".php" but rather ".inc" as it's meant to be included and not executed on it's own.</para>
					<para>NOTE: This option is ignored if $TYPO3_CONF_VARS['FE']['noPHPscriptInclude']=1; is set in localconf.php.</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>file</para>
									</entry>
									<entry>
										<para>resource /stdWrap</para>
									</entry>
									<entry>
										<para>File that will be included. This file must be valid PHP-code! It's included with "include()";</para>
										<para/>
										<para>Directions:</para>
										<para>1) All content must be put into $content. No output must be echo'ed out!</para>
										<para/>
										<para>2) Call $GLOBALS['TSFE']-&gt;set_no_cache(), if you want to disable caching of the page. Set this during development! And set it, if the content you create may not be cached. </para>
										<para/>
										<para>NOTE: If you have a parsing error in your include script the $GLOBALS['TSFE']-&gt;set_no_cache() function is NOT executed and thereby does not disable caching. Upon a parse-error you must manually clear the page-cache after you have corrected your error!</para>
										<para>3) the array $conf contains the configuration for the PHP_SCRIPT cObject. Try debug($conf) to see the content printed out for debugging!</para>
										<para>See the appendix later in this manual for an introduction to writing your own PHP include-scripts.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).PHP_SCRIPT]</para>
				</section>
				<section>
					<title>PHP_SCRIPT_INT</title>
					<para>(see PHP_SCRIPT)</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>file</para>
									</entry>
									<entry>
										<para>resource /stdWrap</para>
									</entry>
									<entry>
										<para>File that will be included. This file must be valid PHP-code! It's included with "include()";</para>
										<para/>
										<para>Purpose:</para>
										<para>This basically works like PHP_SCRIPT. But the vital difference is that inserting a PHP_SCRIPT_INT (internal opposed to external, see below) merely inserts a divider-string in the code and then serializes the current cObj and puts it in the $GLOBALS['TSFE']-&gt;config['INTincScript']-array. This array is saved with the cached page-content.</para>
										<para>Now, the point is, that including a script like this lets you avoid disabling pagecaching. The reason is that the cached page contains the divider string and when a "static" page is fetched from cache, it's divided by that string and the dynamic content object is inserted.</para>
										<para>This is the compromise option of all three PHP_SCRIPT-cObjects, because the page-data is all cached, but still the pagegen.php script is included, which initializes all the classes, objects and so. What you gain here is an environment for your script almost exactly the same as PHP_SCRIPT because your script is called from inside a class tslib_cObj object. You can work with all functions of the tslib_cObj-class. But still all the "static" page content is only generated once, cached and only your script is dynamically rendered.</para>
										<para/>
										<para>Rules:</para>
										<para>- calls to $GLOBALS['TSFE']-&gt;set_no_cache() and $GLOBALS['TSFE']-&gt;set_cache_timeout_default() makes no sense in this situation.</para>
										<para>- parsing errors do not interfere with caching</para>
										<para>- Be aware that certain global variables may not be set as usual and be available as usual when working in this mode. Most scripts should work out-of-the-box with this option though.</para>
										<para>- Dependence and use of LOAD_REGISTER is fragile because the PHP_SCRIPT_INT is not rendered until after the cached content and due to this changed order of events, use of LOAD_REGISTER may not work.</para>
										<para>- You can not nest PHP_SCRIPT_INT and PHP_SCRIPT_EXT in PHP_SCRIPT_INT. You may nest PHP_SCRIPT cObjects though.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>includeLibs</para>
									</entry>
									<entry>
										<para>list of resource</para>
									</entry>
									<entry>
										<para>This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.</para>
										<para>This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).PHP_SCRIPT_INT]</para>
				</section>
				<section>
					<title/>
				</section>
				<section>
					<title>PHP_SCRIPT_EXT</title>
					<para>(see PHP_SCRIPT)</para>
					<informaltable frame="all">
						<tgroup cols="3">
							<colspec colnum="1" colname="c&#10;                    1"/>
							<colspec colnum="2" colname="c&#10;                    2"/>
							<colspec colnum="3" colname="c&#10;                    3"/>
							<thead>
								<row>
									<entry>
										<para>Property:</para>
									</entry>
									<entry>
										<para>Data type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>file</para>
									</entry>
									<entry>
										<para>resource /stdWrap</para>
									</entry>
									<entry>
										<para>File that will be included. This file must be valid PHP-code! It's included with "include()";</para>
										<para/>
										<para>Purpose:</para>
										<para>This works like PHP_SCRIPT_INT, because a divider string is also inserted in the content for this kind of include-script. But the difference is that the content is divided as the very last thing before it's output to the browser. </para>
										<para>This basically means that PHP_SCRIPT_EXT (external, because it's included in the global space in index_ts.php file!!) can output data directly with echo-statements! </para>
										<para>This is a very "raw" version of PHP_SCRIPT because it's not included from inside an object and you have only very few standard functions from TYPO3 to call.</para>
										<para>This is the fastest option of all three PHP_SCRIPT-cObjects, because the page-data is all cached and your dynamic content is generated by a raw php-script.</para>
										<para/>
										<para>Rules:</para>
										<para>- All content can be either 1) echo'ed out directly, or 2) returned in $content.</para>
										<para>- calls to $GLOBALS['TSFE']-&gt;set_no_cache() and $GLOBALS['TSFE']-&gt;set_cache_timeout_default() makes no sense in this situation.</para>
										<para>- parsing errors do not interfere with caching</para>
										<para>- In the global name-space, the array $REC contains the current record when the file was "inserted" on the page, and $CONF-array contains the configuration for the script.</para>
										<para>- Don't mess with the global vars named $EXTiS_* &#xA0;</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>includeLibs</para>
									</entry>
									<entry>
										<para>list of resource</para>
									</entry>
									<entry>
										<para>This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.</para>
										<para>This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>stdWrap</para>
									</entry>
									<entry>
										<para>-&gt;stdWrap</para>
									</entry>
									<entry>
										<para/>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para>[tsref:(cObject).PHP_SCRIPT_EXT]</para>
				</section>
			</section>
			<section>
				<title>Including your script</title>
				<para>Your script is included by a function, PHP_SCRIPT, inside the class "tslib_cObj" in the "tslib_content.php" script. Thereby your file is a part of this object (tslib_cObj) and function. This is why you must return all content in the variable "$content" and any TypoScript-configuration is available from the array "$conf" (it may not be set at all though so check it with is_array()!)</para>
				<section>
					<title>$conf</title>
					<para>The array $conf contains the configuration for the PHP_SCRIPT cObject. Try debug($conf) to see the content printed out for debugging!</para>
				</section>
				<section>
					<title>$content</title>
					<para>Return all content in this variable. </para>
					<para>Remember, don't output anything (but debug code) in your script!</para>
				</section>
				<section>
					<title>White spaces</title>
					<para>Because nothing is sent off to the browser before everything is rendered and returned to index_ts.php which originally set of the rendering process, you must ensure that there's no whitespace before and after your &lt;?...?&gt; tags in your include- or library-scripts!</para>
				</section>
				<section>
					<title>$GLOBALS['TSFE']-&gt;set_no_cache()</title>
					<para>Call the function $GLOBALS['TSFE']-&gt;set_no_cache(), if you want to disable caching of the page. Call this during development! And call it, if the content you create may not be cached. </para>
					<para>Note: If you make a syntax error in your script that keeps PHP from executing it, then the $GLOBALS['TSFE']-&gt;set_no_cache() function is not executed and the page is cached! So in these situations, correct the error, clear the page-cache and try again. This is true only for PHP_SCRIPT and not for PHP_SCRIPT_INT and PHP_SCRIPT_EXT which are rendered after the cached page!</para>
					<section>
						<title>Example:</title>
						<programlisting>$GLOBALS['TSFE']-&gt;set_no_cache();</programlisting>
						<para/>
					</section>
				</section>
				<section>
					<title>$this-&gt;cObjGetSingle( &#xA0;value &#xA0;, &#xA0;properties &#xA0;)</title> &#xA0; &#xA0;
					<para>Gets a content-object from the $conf-array. (See the section below named "Case story" on how to use this!)</para>
					<section>
						<title>Example:</title>
						<programlisting>$content = $this-&gt;cObjGetSingle($conf['image'], $conf['image.']);</programlisting>
						<para/>
						<para>This would return any IMAGE-cObject at the property "image" of the conf-array for the include-script!</para>
						<para/>
					</section>
				</section>
				<section>
					<title>$this-&gt;stdWrap( value, properties )</title>
					<para>stdWrap's the content "value" due to the configuration of the array "properties".</para>
					<section>
						<title>Example:</title>
						<programlisting>$content = $this-&gt;stdWrap($content, $conf['stdWrap.']);</programlisting>
						<para/>
						<para>This will stdWrap the content with the properties of ".stdWrap" of the $conf-array!</para>
						<para/>
					</section>
				</section>
				<section>
					<title>Internal Vars in the main frontend object, TSFE (TypoScript Front End)</title>
					<para>There are some variables in the global object, TSFE, you might need to know about. These ARE ALL READ-ONLY!! (Read: Don't change them!) See the class tslib_fe for the full descriptions.</para>
					<para>If you for instance want to access the variable "id", you can do so by writing: $GLOBALS['TSFE']-&gt;id</para>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Var:</para>
									</entry>
									<entry>
										<para>PHP-Type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>id</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>The page id</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>type</para>
									</entry>
									<entry>
										<para>int</para>
									</entry>
									<entry>
										<para>The type </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>page</para>
									</entry>
									<entry>
										<para>array</para>
									</entry>
									<entry>
										<para>The pagerecord </para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>fe_user</para>
									</entry>
									<entry>
										<para>object</para>
									</entry>
									<entry>
										<para>The current front-end user. </para>
										<para>Userrecord in $GLOBALS['TSFE']-&gt;fe_user-&gt;user, if any login.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>loginUser</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Flag indicating that a front-end user is logged in.</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>rootLine</para>
									</entry>
									<entry>
										<para>array</para>
									</entry>
									<entry>
										<para>The rootLine (all the way to tree root, not only the current site!). Current site root line is in $GLOBALS['TSFE']-&gt;tmpl-&gt;rootLine</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>sys_page</para>
									</entry>
									<entry>
										<para>object</para>
									</entry>
									<entry>
										<para>The object with pagefunctions (object) See t3lib/page.php</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>gr_list</para>
									</entry>
									<entry>
										<para>string (list)</para>
									</entry>
									<entry>
										<para>The group list, sorted numerically. Group -1 = no login</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>beUserLogin</para>
									</entry>
									<entry>
										<para>boolean</para>
									</entry>
									<entry>
										<para>Flag that indicates if a Backend user is logged in!</para>
									</entry>
									<entry>
										<para>0</para>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
				<section>
					<title>Global vars</title>
					<informaltable frame="all">
						<tgroup cols="4">
							<thead>
								<row>
									<entry>
										<para>Var:</para>
									</entry>
									<entry>
										<para>PHP-Type:</para>
									</entry>
									<entry>
										<para>Description:</para>
									</entry>
									<entry>
										<para>Default:</para>
									</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>
										<para>BE_USER</para>
									</entry>
									<entry>
										<para>object</para>
									</entry>
									<entry>
										<para>The back-end user object (if any).</para>
									</entry>
									<entry>
										<para>not set</para>
									</entry>
								</row>
								<row>
									<entry>
										<para>TYPO3_CONF_VARS</para>
									</entry>
									<entry>
										<para>array</para>
									</entry>
									<entry>
										<para>TYPO3 Configuration.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
								<row>
									<entry>
										<para>TSFE</para>
									</entry>
									<entry>
										<para>object</para>
									</entry>
									<entry>
										<para>Main frontend object.</para>
									</entry>
									<entry>
										<para/>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</informaltable>
					<para/>
				</section>
			</section>
			<section>
				<title>Case story</title>
				<para>This is a case story of how to use include-scripts. </para>
				<para>In this situation we would like to use some libraries of our very own, not part of TYPO3. Therefore we use the feature of including a library at the very beginning of the page-parsing. </para>
				<para>First we put this TypoScript line in the "Setup"-field of the template:</para>
				<programlisting>config.includeLibrary = fileadmin/scripts/include.inc</programlisting>
				<para/>
				<para/>
				<para>The file include.inc is now included (in typo3/sysext/cms/tslib/pagegen.php). In this case it looks like this:</para>
				<para>file: &#xA0; fileadmin/scripts/include.inc</para>
				<programlisting>&lt;?</programlisting>
				<programlisting>...</programlisting>
				<programlisting>include('fileadmin/scripts/hello_world.inc');</programlisting>
				<programlisting>include('fileadmin/scripts/other_library.inc');</programlisting>
				<programlisting>...</programlisting>
				<programlisting>?&gt;</programlisting>
				<para>As you can see, this file includes our library "hello_world" and some other libraries too! </para>
				<para/>
				<para/>
				<para>The file hello_world.inc looks like this:</para>
				<para>file: &#xA0; fileadmin/scripts/hello_world.inc</para>
				<programlisting>&lt;?</programlisting>
				<programlisting>class hello_world {</programlisting>
				<programlisting>function theMessage() {</programlisting>
				<programlisting>return "Hello World";</programlisting>
				<programlisting>}</programlisting>
				<programlisting>}</programlisting>
				<programlisting>?&gt;</programlisting>
				<para/>
				<para>So far nothing has happened, except our libraries are included, ready for use.</para>
				<para>Now we need to use the outcome of the class hello_world somewhere on a page. So in the TypoScript code we setup a content-object that includes the third script:</para>
				<programlisting>page.100 = PHP_SCRIPT</programlisting>
				<programlisting>page.100.file = fileadmin/scripts/surprise.inc</programlisting>
				<para/>
				<para>surprise.inc looks like this:</para>
				<para>file: &#xA0; fileadmin/scripts/surprise.inc</para>
				<programlisting>&lt;?</programlisting>
				<programlisting>$hello_world_object = new hello_world;// New instance is created</programlisting>
				<programlisting>$contentBefore = $this-&gt;cObjGetSingle($conf['cObj'], $conf['cObj.']);</programlisting>
				<programlisting>$content = $contentBefore . $hello_world_object-&gt;theMessage();</programlisting>
				<programlisting>$content = $this-&gt;stdWrap($content, $conf['stdWrap.']);</programlisting>
				<programlisting>?&gt;</programlisting>
				<para/>
				<para>Line 1: The PHP-object $hello_world_object is created.</para>
				<para>Line 2: This fetches the content of a cObject, "cObj", we defined</para>
				<para>Line 3: The result of line 2 is concatenated with the result of the "theMessage"-function of the $hello_world_object object</para>
				<para>Line 4: Finally the content is stdWrap'ed with the properties of ".stdWrap" of the $conf-array.</para>
				<para/>
				<para>The output:</para>
				<para>With this configuration -</para>
				<programlisting>page.100 = PHP_SCRIPT</programlisting>
				<programlisting>page.100.file = fileadmin/scripts/surprise.inc</programlisting>
				<para/>
				<para>- the output will look like this:</para>
				<programlisting>Hello World</programlisting>
				<para/>
				<para>With this configuration -</para>
				<programlisting>page.100 = PHP_SCRIPT</programlisting>
				<programlisting>page.100 {</programlisting>
				<programlisting>file = fileadmin/scripts/surprise.inc</programlisting>
				<programlisting>cObj = TEXT</programlisting>
				<programlisting>cObj.value = Joe says:&amp;nbsp;</programlisting>
				<programlisting>}</programlisting>
				<para/>
				<para>- the output will look like this:</para>
				<programlisting>&#xA0;Joe says: Hello World</programlisting>
				<para/>
				<para>With this configuration -</para>
				<programlisting>page.100 = PHP_SCRIPT</programlisting>
				<programlisting>page.100 {</programlisting>
				<programlisting>file = fileadmin/scripts/surprise.inc</programlisting>
				<programlisting>cObj = TEXT</programlisting>
				<programlisting>cObj.value = Joe says:&amp;nbsp;</programlisting>
				<programlisting>stdWrap.wrap = &lt;font color="red"&gt; | &lt;/font&gt;</programlisting>
				<programlisting>stdWrap.case = upper</programlisting>
				<programlisting>}</programlisting>
				<para/>
				<para>- the output will look like this:</para>
				<para>JOE SAYS: HELLO WORLD</para>
				<para/>
				<para>End of lesson.</para>
			</section>
			<section>
				<title>Storing user-data or session-data</title>
				<para>Doing so is quite simple with TYPO3.</para>
				<para>Userdata is data, that follows login users. As soon as a user, who is logged in, logs out, this data is no more accessible and cannot be altered.</para>
				<para>Session data is data, that follows the user currently browsing the site. This user may be a logged in user, but his session-data is bound to the "browsing-session" and not to the user-id of his. This means, that the very same person will carry this data still, even if he logs out. As soon as he closes his browser, his data will be gone though. </para>
				<para>Also you should know, that session-data has a default expire-time of 24 hours.</para>
				<para>Retrieving and storing user-/session-data is done by these functions:</para>
				<section>
					<title>$GLOBALS['TSFE']-&gt;fe_user-&gt;getKey(type, key)</title>
					<para>"type" is either "user" or "ses", which defines the data-space, user-data or session-data</para>
					<para>"key" is the "name" under which your data is stored. This may be arrays or normal scalars. </para>
					<para>Note that the key "recs" is reserved for the built-in "shopping-basket". As is "sys" (for TYPO3 standard modules and code)</para>
					<section>
						<title>Example:</title>
						<programlisting>if ($GLOBALS['TSFE']-&gt;loginUser) {</programlisting>
						<programlisting>$myData = $GLOBALS['TSFE']-&gt;fe_user-&gt;getKey('user', 'myData');</programlisting>
						<programlisting>} else {</programlisting>
						<programlisting>$myData = $GLOBALS['TSFE']-&gt;fe_user-&gt;getKey('ses', 'myData');</programlisting>
						<programlisting>}</programlisting>
						<para/>
						<para>This gets the stored data with the key "myData" from the user-data, but if no user is logged in, it's fetched from the session data instead.</para>
						<para/>
					</section>
				</section>
				<section>
					<title>$GLOBALS['TSFE']-&gt;fe_user-&gt;setKey(type, key, data)</title>
					<para>"type" is either "user" or "ses", which defines the data-space, user-data or session-data</para>
					<para>"key" is the "name" under which your data is stored. </para>
					<para>Note that the key "recs" is reserved for the built-in "shopping-basket". As is "sys" (for TYPO3 standard modules and code)</para>
					<para>"data" is the variable, you want to store. This may be arrays or normal scalars. </para>
					<section>
						<title>Example:</title>
						<programlisting>$myConfig['name'] = 'paul';</programlisting>
						<programlisting>$myConfig['address'] = 'Main street';</programlisting>
						<programlisting>$GLOBALS['TSFE']-&gt;fe_user-&gt;setKey('ses', 'myData', $myConfig);</programlisting>
						<para/>
						<para>This stores the array $myConfig under the key "myData" in the session-data. This lasts as long as "paul" is surfing the site!</para>
						<para/>
					</section>
				</section>
			</section>
			<section>
				<title>Using the built in "shopping basket"</title>
				<para>TYPO3 features a shopping basket for the session-data.</para>
				<para>When you submit data from forms (or by querystring) (post/get-method) in the array "recs" it's stored in the session-data under the key recs. </para>
				<para>The syntax is like this:</para>
				<programlisting>recs[table_name][uid_of_record]</programlisting>
				<para/>
				<section>
					<title>Example:</title>
					<para>This form-element will change the registered value of record with uid=345 from the "tt_products" table in typo3. Please note, that the record itself is NOT in any way modified, only the "counter" in the session-data indicating the "number of items" from the table is modified.</para>
					<programlisting>&lt;input name="recs[tt_products][345]"&gt;</programlisting>
					<para/>
					<para>Note on checkboxes:</para>
					<para>When you are creating forms with checkboxes, the value of the checkbox is sent by MSIE/Netscape ONLY if the checkbox is checked! If you want a value sent in case of a disabled checkbox, include a hidden formfield of the same name just before the checkbox!</para>
				</section>
				<section>
					<title>Example:</title>
					<programlisting>&lt;INPUT type="hidden" name="recs[tt_content][345]" value="0"&gt;</programlisting>
					<programlisting>&lt;INPUT type="checkbox" name="recs[tt_content][345]" value="1"&gt;</programlisting>
					<para/>
				</section>
				<section>
					<title>Clearing the "basket"</title>
					<para>This will clear the basket:</para>
					<programlisting>&#xA0;&lt;INPUT type="hidden" name="recs[clear_all]" value="1"&gt;</programlisting>
					<para/>
				</section>
			</section>
		</section>
		<section>
			<title>Appendix D &#x2013; index.php</title>
			<section>
				<title>Introduction</title>
				<para>index.php is the main script for showing pages with TYPO3 / TypoScript. This page provides some information about this script and how to use it.</para>
				<para/>
				<para>Normally you request pages by setting a value for "id" and possibly for "type".</para>
				<para>"id" refers to a page. This is an integer. If a string is supplied, it's regarded as an alias and the corresponding page is found.</para>
				<para>"type" defines which "type" the page is of. It is always an integer (0-255). If "type" is not set, it's regarded to be zero. "type" is used to build framesets. For example the frameset could have "type=0" (or nothing) and the pages in the various frames could have "type=1" and "type=2" and "type=3". In TypoScript you define a PAGE-object for each type so TYPO3 renders different pages depending on the type-value. Normally the PAGE-object displaying the page content is named "page" and has the "type=1" value.</para>
				<para/>
			</section>
			<section>
				<title>Submitting data to index.php</title>
				<para>You can submit data to index.php for several reasons. These are the standard features included in the script:</para>
				<section>
					<title>Login/Logout:</title>
					<para>Detected by class "t3lib_userauth" looking for the var "logintype". If this is set, authentication is done.</para>
					<para>Input may be of both GET and POST method. </para>
					<para>Login:</para>
					<para>logintype = "login"</para>
					<para>pass = the password</para>
					<para>user = the username</para>
					<para>pid = the id of the page where the user-archive is found. You don't need this value if $TYPO3_CONF_VARS['FE']['checkFeUserPid'] is set.</para>
					<para>(redirect = Not used)</para>
					<para>Logout:</para>
					<para>logintype = "logout"</para>
					<para/>
					<para>See the cObject FORMS for an in-depth description</para>
					<para/>
				</section>
			</section>
			<section>
				<title>Search</title>
				<para>Detected by the cObject SEARCHRESULT, which proceeds with a search if "sword" &amp;&amp; "scols" are set. The search MUST submit to a page with such a content-object on it!</para>
				<para>Input may be of both GET and POST method. </para>
				<para>Search:</para>
				<para>sword = the searchwords</para>
				<para>stype = the search type</para>
				<para>scols = the tables/columns to search</para>
				<para>locationData = Reference to the record carrying the form. Used to look up the original startingpoint of the search (ONLY POST-method)</para>
				<para>(redirect = Not used)</para>
				<para/>
				<para>scount = Used by the searchresult to indicate the number of results</para>
				<para>spointer = Used by the searchresult to indicate the startingpoint for the next number of results.</para>
				<para/>
				<para>See the cObject SEARCHRESULT for a complete description.</para>
				<para/>
			</section>
			<section>
				<title>Emailforms</title>
				<para>Detected by the mainscript "index.php" looking for the var "formtype_mail" to be set (could be the submit-button).</para>
				<para>Input MUST be POST method. And the REFERER and HTTP_HOST must match. Also the locationData var must be sent and at least point to the uid of a readable page. </para>
				<para/>
			</section>
			<section>
				<title>Database-submit</title>
				<para>Detected by the mainscript "index.php" looking for the var "formtype_db" to be set. (could be the submit-button)</para>
				<para>Input MUST be POST method. And the REFERER and HTTP_HOST must match. To setup a script to handle the input, refer to the FE_DATA object.</para>
				<para>See examples from the typo3/sysext/cms/tslib/media/scripts/ folder, e.g. "guest_submit.inc".</para>
			</section>
		</section>
	</chapter>
</book>
